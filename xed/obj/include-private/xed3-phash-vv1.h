/// @file include-private/xed3-phash-vv1.h

// This file was automatically generated.
// Do not edit this file.

#if !defined(INCLUDE_PRIVATE_XED3_PHASH_VV1_H)
# define INCLUDE_PRIVATE_XED3_PHASH_VV1_H
/*BEGIN_LEGAL

Copyright (c) 2020 Intel Corporation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
END_LEGAL */
#include "xed-internal-header.h"
#include "xed3-operand-lu.h"
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x10_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x11_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x12_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x13_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x14_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x15_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x16_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x17_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x28_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x29_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x41_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x42_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x44_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x45_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x46_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x47_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x4a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x4b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x50_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x51_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x52_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x53_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x54_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x55_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x56_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x57_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x58_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x59_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x60_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x61_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x62_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x63_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x64_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x65_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x66_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x67_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x68_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x69_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x70_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x71_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x72_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x73_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x74_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x75_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x76_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x77_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x90_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x91_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x92_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x93_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x98_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x99_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xae_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc4_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd0_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd1_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd3_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd4_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xda_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdc_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdd_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xde_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe0_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe1_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe3_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe4_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xea_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xeb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xec_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xed_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xee_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xef_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf0_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf1_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf3_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf4_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfa_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfc_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfd_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfe_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x0_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x4_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xc_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xd_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xe_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x13_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x16_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x17_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x18_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x19_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x20_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x21_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x22_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x23_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x24_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x25_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x28_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x29_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x30_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x31_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x32_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x33_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x34_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x35_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x36_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x37_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x38_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x39_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x40_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x41_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x45_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x46_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x47_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x58_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x59_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x5a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x78_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x79_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x8c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x8e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x90_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x91_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x92_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x93_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x96_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x97_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x98_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x99_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xaa_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xab_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xac_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xad_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xae_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xaf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xba_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbc_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbd_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbe_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xcf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdc_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdd_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xde_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf3_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf7_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x0_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x1_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x2_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x8_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x9_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xa_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xb_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xc_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xd_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xe_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x14_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x15_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x16_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x17_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x18_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x19_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x1d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x20_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x21_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x22_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x30_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x31_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x32_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x33_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x38_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x39_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x40_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x41_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x42_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x44_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x46_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x48_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x49_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x60_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x61_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x62_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x63_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x68_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x69_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x78_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x79_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7a_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7b_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7c_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7d_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7e_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7f_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xce_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xcf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xdf_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xf0_vv1(const xed_decoded_inst_t* d);

static xed_uint32_t xed3_phash_find_map0x0F_opcode0x10_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[96] = {
/*h(125)=0 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 2466},
/*h(93)=1 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 2466},
/*h(61)=2 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 2466},
/*h(29)=3 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2466},
/*empty slot1 */ {0,0},
/*h(118)=5 VV1 0x10  VF2 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {118, 2525},
/*h(86)=6 VV1 0x10  VF2 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {86, 2525},
/*h(54)=7 VV1 0x10  VF2 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {54, 2525},
/*h(22)=8 VV1 0x10  VF2 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {22, 2525},
/*h(115)=9 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {115, 2526},
/*h(83)=10 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {83, 2526},
/*h(51)=11 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 2526},
/*h(19)=12 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {19, 2526},
/*h(126)=13 VV1 0x10  VF3 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {126, 2465},
/*h(94)=14 VV1 0x10  VF3 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {94, 2465},
/*h(62)=15 VV1 0x10  VF3 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {62, 2465},
/*h(30)=16 VV1 0x10  VF3 V0F MOD[mm] MOD!=3  NOVSR REG[rrr] RM[nnn] MODRM()*/ {30, 2465},
/*empty slot1 */ {0,0},
/*h(119)=18 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {119, 2526},
/*h(87)=19 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {87, 2526},
/*h(55)=20 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {55, 2526},
/*h(23)=21 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2526},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(127)=26 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {127, 2466},
/*h(95)=27 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {95, 2466},
/*h(63)=28 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2466},
/*h(31)=29 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2466},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(117)=35 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {117, 2526},
/*h(85)=36 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {85, 2526},
/*h(53)=37 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 2526},
/*h(21)=38 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2526},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(46)=42 VV1 0x10  V66 VL256 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3572},
/*h(14)=43 VV1 0x10  V66 VL128 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3568},
/*h(121)=44 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 2466},
/*h(89)=45 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {89, 2466},
/*h(57)=46 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 2466},
/*h(25)=47 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 2466},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(47)=55 VV1 0x10  V66 VL256 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3573},
/*h(15)=56 VV1 0x10  V66 VL128 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3569},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(123)=70 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 2466},
/*h(91)=71 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {91, 2466},
/*h(59)=72 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 2466},
/*h(27)=73 VV1 0x10  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 2466},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(38)=77 VV1 0x10  VNP VL256 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 2891},
/*h(6)=78 VV1 0x10  VNP VL128 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2887},
/*h(113)=79 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {113, 2526},
/*h(81)=80 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {81, 2526},
/*h(49)=81 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 2526},
/*h(17)=82 VV1 0x10  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {17, 2526},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(39)=90 VV1 0x10  VNP VL256 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 2892},
/*h(7)=91 VV1 0x10  VNP VL128 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2888},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((13*key % 139) % 96);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x11_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[96] = {
/*h(125)=0 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 2468},
/*h(93)=1 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 2468},
/*h(61)=2 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 2468},
/*h(29)=3 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2468},
/*empty slot1 */ {0,0},
/*h(118)=5 VV1 0x11  VF2 V0F MOD[mm] MOD!=3 NOVSR REG[rrr] RM[nnn] MODRM()*/ {118, 2527},
/*h(86)=6 VV1 0x11  VF2 V0F MOD[mm] MOD!=3 NOVSR REG[rrr] RM[nnn] MODRM()*/ {86, 2527},
/*h(54)=7 VV1 0x11  VF2 V0F MOD[mm] MOD!=3 NOVSR REG[rrr] RM[nnn] MODRM()*/ {54, 2527},
/*h(22)=8 VV1 0x11  VF2 V0F MOD[mm] MOD!=3 NOVSR REG[rrr] RM[nnn] MODRM()*/ {22, 2527},
/*h(115)=9 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {115, 2528},
/*h(83)=10 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {83, 2528},
/*h(51)=11 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 2528},
/*h(19)=12 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {19, 2528},
/*h(126)=13 VV1 0x11  VF3 V0F  MOD[mm] MOD!=3 NOVSR  REG[rrr] RM[nnn] MODRM()*/ {126, 2467},
/*h(94)=14 VV1 0x11  VF3 V0F  MOD[mm] MOD!=3 NOVSR  REG[rrr] RM[nnn] MODRM()*/ {94, 2467},
/*h(62)=15 VV1 0x11  VF3 V0F  MOD[mm] MOD!=3 NOVSR  REG[rrr] RM[nnn] MODRM()*/ {62, 2467},
/*h(30)=16 VV1 0x11  VF3 V0F  MOD[mm] MOD!=3 NOVSR  REG[rrr] RM[nnn] MODRM()*/ {30, 2467},
/*empty slot1 */ {0,0},
/*h(119)=18 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {119, 2528},
/*h(87)=19 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {87, 2528},
/*h(55)=20 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {55, 2528},
/*h(23)=21 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2528},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(127)=26 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {127, 2468},
/*h(95)=27 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {95, 2468},
/*h(63)=28 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2468},
/*h(31)=29 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2468},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(117)=35 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {117, 2528},
/*h(85)=36 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {85, 2528},
/*h(53)=37 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 2528},
/*h(21)=38 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2528},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(46)=42 VV1 0x11  V66 VL256 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3574},
/*h(14)=43 VV1 0x11  V66 VL128 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3570},
/*h(121)=44 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 2468},
/*h(89)=45 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {89, 2468},
/*h(57)=46 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 2468},
/*h(25)=47 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 2468},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(47)=55 VV1 0x11  V66 VL256 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3575},
/*h(15)=56 VV1 0x11  V66 VL128 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3571},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(123)=70 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 2468},
/*h(91)=71 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {91, 2468},
/*h(59)=72 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 2468},
/*h(27)=73 VV1 0x11  VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 2468},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(38)=77 VV1 0x11  VNP VL256 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 2893},
/*h(6)=78 VV1 0x11  VNP VL128 V0F NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2889},
/*h(113)=79 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {113, 2528},
/*h(81)=80 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {81, 2528},
/*h(49)=81 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 2528},
/*h(17)=82 VV1 0x11  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {17, 2528},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(39)=90 VV1 0x11  VNP VL256 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 2894},
/*h(7)=91 VV1 0x11  VNP VL128 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2890},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((13*key % 139) % 96);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x12_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x12  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3051},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x12  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3153},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x12  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2971},
/*h(10)=6 VV1 0x12  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3383},
/*h(23)=7 VV1 0x12  VL128 VF2 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2416},
/*h(2)=8 VV1 0x12  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3051},
/*empty slot1 */ {0,0},
/*h(62)=10 VV1 0x12  VL256 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 2972},
/*h(7)=11 VV1 0x12  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3153},
/*h(54)=12 VV1 0x12  VL256 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {54, 2417},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x12  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3383},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x12  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3051},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x12  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2970},
/*empty slot1 */ {0,0},
/*h(22)=20 VV1 0x12  VL128 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2415},
/*h(1)=21 VV1 0x12  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3153},
/*h(14)=22 VV1 0x12  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3383},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x12  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3051},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x12  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3153},
/*empty slot1 */ {0,0},
/*h(63)=31 VV1 0x12  VL256 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2973},
/*h(8)=32 VV1 0x12  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3383},
/*h(55)=33 VV1 0x12  VL256 VF2 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {55, 2418}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x13_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[3] = {
/*empty slot1 */ {0,0},
/*h(14)=1 VV1 0x13  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3384},
/*h(6)=2 VV1 0x13  VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3052}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 3ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x14_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0x14  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2555},
/*h(10)=1 VV1 0x14  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3601},
/*h(2)=2 VV1 0x14  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3599},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0x14  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2558},
/*h(1)=6 VV1 0x14  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2556},
/*h(11)=7 VV1 0x14  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3602},
/*h(3)=8 VV1 0x14  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3600},
/*h(8)=9 VV1 0x14  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2557}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x15_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0x15  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2962},
/*h(10)=1 VV1 0x15  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2493},
/*h(2)=2 VV1 0x15  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2491},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0x15  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2965},
/*h(1)=6 VV1 0x15  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2963},
/*h(11)=7 VV1 0x15  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2494},
/*h(3)=8 VV1 0x15  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2492},
/*h(8)=9 VV1 0x15  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2964}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x16_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[32] = {
/*h(0)=0 VV1 0x16  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3776},
/*h(3)=1 VV1 0x16  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3408},
/*h(30)=2 VV1 0x16  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2709},
/*h(7)=3 VV1 0x16  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3408},
/*h(10)=4 VV1 0x16  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2927},
/*empty slot1 */ {0,0},
/*h(14)=6 VV1 0x16  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2927},
/*h(4)=7 VV1 0x16  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3776},
/*h(31)=8 VV1 0x16  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2710},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(1)=11 VV1 0x16  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3408},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(8)=14 VV1 0x16  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2927},
/*empty slot1 */ {0,0},
/*h(62)=16 VV1 0x16  VL256 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 2711},
/*empty slot1 */ {0,0},
/*h(5)=18 VV1 0x16  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3408},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(12)=21 VV1 0x16  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2927},
/*h(2)=22 VV1 0x16  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3776},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(63)=27 VV1 0x16  VL256 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2712},
/*empty slot1 */ {0,0},
/*h(6)=29 VV1 0x16  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3776},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((11*key % 37) % 32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x17_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[3] = {
/*empty slot1 */ {0,0},
/*h(14)=1 VV1 0x17  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2928},
/*h(6)=2 VV1 0x17  VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3777}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 3ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x28_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[13] = {
/*h(47)=0 VV1 0x28  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3913},
/*h(39)=1 VV1 0x28  VL256 VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 3557},
/*empty slot1 */ {0,0},
/*h(15)=3 VV1 0x28  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3909},
/*h(7)=4 VV1 0x28  VL128 VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3553},
/*h(46)=5 VV1 0x28  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3912},
/*h(38)=6 VV1 0x28  VL256 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 3556},
/*empty slot1 */ {0,0},
/*h(14)=8 VV1 0x28  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3908},
/*h(6)=9 VV1 0x28  VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3552},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 13ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x29_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[13] = {
/*h(47)=0 VV1 0x29  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3915},
/*h(39)=1 VV1 0x29  VL256 VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 3559},
/*empty slot1 */ {0,0},
/*h(15)=3 VV1 0x29  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3911},
/*h(7)=4 VV1 0x29  VL128 VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3555},
/*h(46)=5 VV1 0x29  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3914},
/*h(38)=6 VV1 0x29  VL256 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 3558},
/*empty slot1 */ {0,0},
/*h(14)=8 VV1 0x29  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3910},
/*h(6)=9 VV1 0x29  VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3554},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 13ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(34)=0 VV1 0x2A  VF2 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {34, 3687},
/*empty slot1 */ {0,0},
/*h(60)=2 VV1 0x2A   VF3 V0F mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 2678},
/*empty slot1 */ {0,0},
/*h(52)=4 VV1 0x2A   VF3 V0F mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {52, 2676},
/*empty slot1 */ {0,0},
/*h(44)=6 VV1 0x2A  VF2 V0F mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {44, 3691},
/*h(57)=7 VV1 0x2A   VF3 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 2675},
/*h(36)=8 VV1 0x2A  VF2 V0F mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {36, 3689},
/*h(49)=9 VV1 0x2A   VF3 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 2675},
/*empty slot1 */ {0,0},
/*h(41)=11 VV1 0x2A  VF2 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {41, 3688},
/*empty slot1 */ {0,0},
/*h(33)=13 VV1 0x2A  VF2 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {33, 3688},
/*empty slot1 */ {0,0},
/*h(59)=15 VV1 0x2A   VF3 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 2675},
/*empty slot1 */ {0,0},
/*h(51)=17 VV1 0x2A   VF3 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 2675},
/*empty slot1 */ {0,0},
/*h(43)=19 VV1 0x2A  VF2 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {43, 3688},
/*h(56)=20 VV1 0x2A   VF3 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 2674},
/*h(35)=21 VV1 0x2A  VF2 V0F not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {35, 3688},
/*h(48)=22 VV1 0x2A   VF3 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {48, 2674},
/*h(61)=23 VV1 0x2A   VF3 V0F mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 2679},
/*h(40)=24 VV1 0x2A  VF2 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {40, 3687},
/*h(53)=25 VV1 0x2A   VF3 V0F mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 2677},
/*h(32)=26 VV1 0x2A  VF2 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {32, 3687},
/*h(45)=27 VV1 0x2A  VF2 V0F mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {45, 3692},
/*h(58)=28 VV1 0x2A   VF3 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 2674},
/*h(37)=29 VV1 0x2A  VF2 V0F mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {37, 3690},
/*h(50)=30 VV1 0x2A   VF3 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {50, 2674},
/*empty slot1 */ {0,0},
/*h(42)=32 VV1 0x2A  VF2 V0F not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {42, 3687},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEX_PREFIX(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(14)=0 VV1 0x2B  V66 V0F VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2612},
/*h(38)=1 VV1 0x2B  VNP V0F VL256 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 3696},
/*h(46)=2 VV1 0x2B  V66 V0F VL256 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2613},
/*h(6)=3 VV1 0x2B  VNP V0F VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3695}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((4*key % 7) % 4);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[24] = {
/*h(178)=0 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {178, 2533},
/*h(189)=1 VV1 0x2C   VF2 V0F  NOVSR mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {189, 2538},
/*h(243)=2 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {243, 2600},
/*h(248)=3 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {248, 2599},
/*h(179)=4 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {179, 2534},
/*h(184)=5 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {184, 2533},
/*h(244)=6 VV1 0x2C   VF3 V0F  NOVSR mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {244, 2601},
/*h(249)=7 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {249, 2600},
/*h(180)=8 VV1 0x2C   VF2 V0F  NOVSR mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {180, 2535},
/*h(185)=9 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {185, 2534},
/*h(245)=10 VV1 0x2C   VF3 V0F  NOVSR mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {245, 2602},
/*h(250)=11 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {250, 2599},
/*h(181)=12 VV1 0x2C   VF2 V0F  NOVSR mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {181, 2536},
/*h(186)=13 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {186, 2533},
/*h(240)=14 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {240, 2599},
/*h(251)=15 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {251, 2600},
/*h(176)=16 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {176, 2533},
/*h(187)=17 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {187, 2534},
/*h(241)=18 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {241, 2600},
/*h(252)=19 VV1 0x2C   VF3 V0F  NOVSR mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {252, 2603},
/*h(177)=20 VV1 0x2C   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {177, 2534},
/*h(188)=21 VV1 0x2C   VF2 V0F  NOVSR mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {188, 2537},
/*h(242)=22 VV1 0x2C   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {242, 2599},
/*h(253)=23 VV1 0x2C   VF3 V0F  NOVSR mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {253, 2604}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX(d);
hidx = ((4*key % 43) % 24);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[24] = {
/*h(178)=0 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {178, 2376},
/*h(189)=1 VV1 0x2D   VF2 V0F  NOVSR mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {189, 2381},
/*h(243)=2 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {243, 2836},
/*h(248)=3 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {248, 2835},
/*h(179)=4 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {179, 2377},
/*h(184)=5 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {184, 2376},
/*h(244)=6 VV1 0x2D   VF3 V0F  NOVSR mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {244, 2837},
/*h(249)=7 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {249, 2836},
/*h(180)=8 VV1 0x2D   VF2 V0F  NOVSR mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {180, 2378},
/*h(185)=9 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {185, 2377},
/*h(245)=10 VV1 0x2D   VF3 V0F  NOVSR mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {245, 2838},
/*h(250)=11 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {250, 2835},
/*h(181)=12 VV1 0x2D   VF2 V0F  NOVSR mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {181, 2379},
/*h(186)=13 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {186, 2376},
/*h(240)=14 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {240, 2835},
/*h(251)=15 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {251, 2836},
/*h(176)=16 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {176, 2376},
/*h(187)=17 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {187, 2377},
/*h(241)=18 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {241, 2836},
/*h(252)=19 VV1 0x2D   VF3 V0F  NOVSR mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {252, 2839},
/*h(177)=20 VV1 0x2D   VF2 V0F  NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {177, 2377},
/*h(188)=21 VV1 0x2D   VF2 V0F  NOVSR mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {188, 2380},
/*h(242)=22 VV1 0x2D   VF3 V0F  NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {242, 2835},
/*h(253)=23 VV1 0x2D   VF3 V0F  NOVSR mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {253, 2840}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX(d);
hidx = ((4*key % 43) % 24);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(15)=0 VV1 0x2E V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3641},
/*h(7)=1 VV1 0x2E VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2424},
/*h(14)=2 VV1 0x2E V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3640},
/*h(6)=3 VV1 0x2E VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2423}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX(d);
hidx = ((3*key % 5) % 4);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x2f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(15)=0 VV1 0x2F   V66 V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3598},
/*h(7)=1 VV1 0x2F   VNP V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3655},
/*h(14)=2 VV1 0x2F   V66 V0F  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3597},
/*h(6)=3 VV1 0x2F   VNP V0F  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3654}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX(d);
hidx = ((3*key % 5) % 4);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x41_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0x41 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {23, 2609},
/*h(17)=2 VV1 0x41 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 3174},
/*h(19)=3 VV1 0x41 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 3505},
/*h(21)=4 VV1 0x41 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 3800}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x42_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0x42 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {23, 2457},
/*h(17)=2 VV1 0x42 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 2865},
/*h(19)=3 VV1 0x42 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 3393},
/*h(21)=4 VV1 0x42 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 2382}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x44_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*h(13)=0 VV1 0x44 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {13, 3717},
/*h(31)=1 VV1 0x44 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {31, 2941},
/*h(15)=2 VV1 0x44 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {15, 3271},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(29)=7 VV1 0x44 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {29, 3270}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x45_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0x45 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {23, 2652},
/*h(17)=2 VV1 0x45 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 3096},
/*h(19)=3 VV1 0x45 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 3124},
/*h(21)=4 VV1 0x45 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 3097}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x46_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0x46 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {23, 2779},
/*h(17)=2 VV1 0x46 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 2774},
/*h(19)=3 VV1 0x46 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 3447},
/*h(21)=4 VV1 0x46 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 3009}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x47_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0x47 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {23, 2736},
/*h(17)=2 VV1 0x47 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 3031},
/*h(19)=3 VV1 0x47 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 2905},
/*h(21)=4 VV1 0x47 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 2990}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x4a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0x4A V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {23, 3842},
/*h(17)=2 VV1 0x4A VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 2552},
/*h(19)=3 VV1 0x4A VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 2908},
/*h(21)=4 VV1 0x4A V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 3319}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x4b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(17)=2 VV1 0x4B VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {17, 2729},
/*h(19)=3 VV1 0x4B VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1*/ {19, 3364},
/*h(21)=4 VV1 0x4B V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 2369}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x50_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(7)=0 VV1 0x50  VL128 VNP V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2442},
/*h(39)=1 VV1 0x50  VL256 VNP V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 2443},
/*h(15)=2 VV1 0x50  VL128 V66 V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3079},
/*h(47)=3 VV1 0x50  VL256 V66 V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3080}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((9*key % 7) % 4);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x51_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[144] = {
/*h(89)=0 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {89, 3333},
/*empty slot1 */ {0,0},
/*h(123)=2 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 3333},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(47)=6 VV1 0x51  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3474},
/*empty slot1 */ {0,0},
/*h(81)=8 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {81, 3633},
/*h(26)=9 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {26, 3332},
/*h(115)=10 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {115, 3633},
/*h(60)=11 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 3332},
/*empty slot1 */ {0,0},
/*h(94)=13 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {94, 3332},
/*h(39)=14 VV1 0x51  VL256 VNP NOVSR V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 2957},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(18)=17 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {18, 3632},
/*empty slot1 */ {0,0},
/*h(52)=19 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {52, 3632},
/*empty slot1 */ {0,0},
/*h(86)=21 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {86, 3632},
/*h(31)=22 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3333},
/*h(120)=23 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {120, 3332},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(23)=30 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3633},
/*h(112)=31 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {112, 3632},
/*h(57)=32 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 3333},
/*empty slot1 */ {0,0},
/*h(91)=34 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {91, 3333},
/*empty slot1 */ {0,0},
/*h(125)=36 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 3333},
/*empty slot1 */ {0,0},
/*h(15)=38 VV1 0x51  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3472},
/*empty slot1 */ {0,0},
/*h(49)=40 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 3633},
/*empty slot1 */ {0,0},
/*h(83)=42 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {83, 3633},
/*h(28)=43 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3332},
/*h(117)=44 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {117, 3633},
/*h(62)=45 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 3332},
/*h(7)=46 VV1 0x51  VL128 VNP NOVSR V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2955},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(20)=51 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3632},
/*empty slot1 */ {0,0},
/*h(54)=53 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {54, 3632},
/*empty slot1 */ {0,0},
/*h(88)=55 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {88, 3332},
/*empty slot1 */ {0,0},
/*h(122)=57 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {122, 3332},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(46)=61 VV1 0x51  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3473},
/*empty slot1 */ {0,0},
/*h(80)=63 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {80, 3632},
/*h(25)=64 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 3333},
/*h(114)=65 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {114, 3632},
/*h(59)=66 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 3333},
/*empty slot1 */ {0,0},
/*h(93)=68 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3333},
/*h(38)=69 VV1 0x51  VL256 VNP NOVSR V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 2956},
/*h(127)=70 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {127, 3333},
/*empty slot1 */ {0,0},
/*h(17)=72 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {17, 3633},
/*empty slot1 */ {0,0},
/*h(51)=74 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 3633},
/*empty slot1 */ {0,0},
/*h(85)=76 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {85, 3633},
/*h(30)=77 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3332},
/*h(119)=78 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {119, 3633},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(22)=85 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3632},
/*empty slot1 */ {0,0},
/*h(56)=87 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 3332},
/*empty slot1 */ {0,0},
/*h(90)=89 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {90, 3332},
/*empty slot1 */ {0,0},
/*h(124)=91 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {124, 3332},
/*empty slot1 */ {0,0},
/*h(14)=93 VV1 0x51  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3471},
/*empty slot1 */ {0,0},
/*h(48)=95 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {48, 3632},
/*empty slot1 */ {0,0},
/*h(82)=97 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {82, 3632},
/*h(27)=98 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 3333},
/*h(116)=99 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {116, 3632},
/*h(61)=100 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 3333},
/*h(6)=101 VV1 0x51  VL128 VNP NOVSR V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2954},
/*h(95)=102 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {95, 3333},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(19)=106 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {19, 3633},
/*empty slot1 */ {0,0},
/*h(53)=108 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 3633},
/*empty slot1 */ {0,0},
/*h(87)=110 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {87, 3633},
/*empty slot1 */ {0,0},
/*h(121)=112 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 3333},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(24)=119 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {24, 3332},
/*h(113)=120 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {113, 3633},
/*h(58)=121 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 3332},
/*empty slot1 */ {0,0},
/*h(92)=123 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 3332},
/*empty slot1 */ {0,0},
/*h(126)=125 VV1 0x51  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {126, 3332},
/*empty slot1 */ {0,0},
/*h(16)=127 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {16, 3632},
/*empty slot1 */ {0,0},
/*h(50)=129 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {50, 3632},
/*empty slot1 */ {0,0},
/*h(84)=131 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {84, 3632},
/*h(29)=132 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3333},
/*h(118)=133 VV1 0x51  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {118, 3632},
/*h(63)=134 VV1 0x51  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 3333},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(21)=140 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3633},
/*empty slot1 */ {0,0},
/*h(55)=142 VV1 0x51  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {55, 3633},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 144ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x52_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[72] = {
/*h(24)=0 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {24, 2780},
/*h(122)=1 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {122, 2780},
/*h(25)=2 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 2781},
/*empty slot1 */ {0,0},
/*h(123)=4 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 2781},
/*h(26)=5 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {26, 2780},
/*empty slot1 */ {0,0},
/*h(124)=7 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {124, 2780},
/*h(27)=8 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 2781},
/*empty slot1 */ {0,0},
/*h(125)=10 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 2781},
/*h(28)=11 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2780},
/*empty slot1 */ {0,0},
/*h(126)=13 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {126, 2780},
/*h(29)=14 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2781},
/*empty slot1 */ {0,0},
/*h(127)=16 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {127, 2781},
/*h(30)=17 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2780},
/*h(6)=18 VV1 0x52  VNP VL128 NOVSR V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2569},
/*empty slot1 */ {0,0},
/*h(31)=20 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2781},
/*h(7)=21 VV1 0x52  VNP VL128 NOVSR V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2570},
/*h(56)=22 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(57)=25 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 2781},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(58)=28 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(59)=31 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 2781},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(60)=34 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(61)=37 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 2781},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(62)=40 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 2780},
/*h(38)=41 VV1 0x52  VNP VL256 NOVSR V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 2571},
/*empty slot1 */ {0,0},
/*h(63)=43 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2781},
/*h(39)=44 VV1 0x52  VNP VL256 NOVSR V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 2572},
/*h(88)=45 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {88, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(89)=48 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {89, 2781},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(90)=51 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {90, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(91)=54 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {91, 2781},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=57 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(93)=60 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 2781},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(94)=63 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {94, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(95)=66 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {95, 2781},
/*empty slot1 */ {0,0},
/*h(120)=68 VV1 0x52  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {120, 2780},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(121)=71 VV1 0x52  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 2781}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((3*key % 73) % 72);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x53_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[72] = {
/*h(24)=0 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {24, 2772},
/*h(122)=1 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {122, 2772},
/*h(25)=2 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 2773},
/*empty slot1 */ {0,0},
/*h(123)=4 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 2773},
/*h(26)=5 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {26, 2772},
/*empty slot1 */ {0,0},
/*h(124)=7 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {124, 2772},
/*h(27)=8 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 2773},
/*empty slot1 */ {0,0},
/*h(125)=10 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 2773},
/*h(28)=11 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2772},
/*empty slot1 */ {0,0},
/*h(126)=13 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {126, 2772},
/*h(29)=14 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2773},
/*empty slot1 */ {0,0},
/*h(127)=16 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {127, 2773},
/*h(30)=17 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2772},
/*h(6)=18 VV1 0x53  VNP VL128 NOVSR V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2670},
/*empty slot1 */ {0,0},
/*h(31)=20 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2773},
/*h(7)=21 VV1 0x53  VNP VL128 NOVSR V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2671},
/*h(56)=22 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(57)=25 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 2773},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(58)=28 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(59)=31 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 2773},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(60)=34 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(61)=37 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 2773},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(62)=40 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 2772},
/*h(38)=41 VV1 0x53  VNP VL256 NOVSR V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 2672},
/*empty slot1 */ {0,0},
/*h(63)=43 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2773},
/*h(39)=44 VV1 0x53  VNP VL256 NOVSR V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 2673},
/*h(88)=45 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {88, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(89)=48 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {89, 2773},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(90)=51 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {90, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(91)=54 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {91, 2773},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=57 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(93)=60 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 2773},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(94)=63 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {94, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(95)=66 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {95, 2773},
/*empty slot1 */ {0,0},
/*h(120)=68 VV1 0x53  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {120, 2772},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(121)=71 VV1 0x53  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 2773}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = ((3*key % 73) % 72);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x54_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0x54  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3670},
/*h(10)=1 VV1 0x54  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3734},
/*h(2)=2 VV1 0x54  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3732},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0x54  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3673},
/*h(1)=6 VV1 0x54  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3671},
/*h(11)=7 VV1 0x54  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3735},
/*h(3)=8 VV1 0x54  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3733},
/*h(8)=9 VV1 0x54  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3672}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x55_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0x55  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2559},
/*h(10)=1 VV1 0x55  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3274},
/*h(2)=2 VV1 0x55  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3272},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0x55  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2562},
/*h(1)=6 VV1 0x55  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2560},
/*h(11)=7 VV1 0x55  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3275},
/*h(3)=8 VV1 0x55  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3273},
/*h(8)=9 VV1 0x55  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2561}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x56_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0x56  VNP V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3439},
/*h(10)=1 VV1 0x56  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2715},
/*h(2)=2 VV1 0x56  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2713},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0x56  VNP V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3442},
/*h(1)=6 VV1 0x56  VNP V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3440},
/*h(11)=7 VV1 0x56  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2716},
/*h(3)=8 VV1 0x56  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2714},
/*h(8)=9 VV1 0x56  VNP V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3441}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x57_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0x57  VNP V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2563},
/*h(10)=1 VV1 0x57  V66 V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2473},
/*h(2)=2 VV1 0x57  V66 V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2471},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0x57  VNP V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2566},
/*h(1)=6 VV1 0x57  VNP V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2564},
/*h(11)=7 VV1 0x57  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2474},
/*h(3)=8 VV1 0x57  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2472},
/*h(8)=9 VV1 0x57  VNP V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2565}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x58_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x58  VNP VL128 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2877},
/*h(13)=1 VV1 0x58  VF2  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 2398},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x58  VF2  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2398},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x58  VF3  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3537},
/*h(10)=6 VV1 0x58  V66 VL256 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3354},
/*h(23)=7 VV1 0x58  VF3  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3537},
/*h(2)=8 VV1 0x58  V66 VL128 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3352},
/*h(15)=9 VV1 0x58  VF3  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3537},
/*h(28)=10 VV1 0x58  VF2  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2397},
/*h(7)=11 VV1 0x58  VF3  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3537},
/*h(20)=12 VV1 0x58  VF2  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2397},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x58  VF2  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2397},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x58  VF2  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2397},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x58  VF3  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3536},
/*h(9)=19 VV1 0x58  VNP VL256 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2880},
/*h(22)=20 VV1 0x58  VF3  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3536},
/*h(1)=21 VV1 0x58  VNP VL128 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2878},
/*h(14)=22 VV1 0x58  VF3  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3536},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x58  VF3  V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3536},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0x58  V66 VL256 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3355},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x58  V66 VL128 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3353},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0x58  VF2  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2398},
/*h(8)=32 VV1 0x58  VNP VL256 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2879},
/*h(21)=33 VV1 0x58  VF2  V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2398}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x59_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x59  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3338},
/*h(13)=1 VV1 0x59  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 3022},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x59  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3022},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x59  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2904},
/*h(10)=6 VV1 0x59  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3268},
/*h(23)=7 VV1 0x59  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2904},
/*h(2)=8 VV1 0x59  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3266},
/*h(15)=9 VV1 0x59  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2904},
/*h(28)=10 VV1 0x59  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3021},
/*h(7)=11 VV1 0x59  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2904},
/*h(20)=12 VV1 0x59  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3021},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x59  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3021},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x59  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3021},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x59  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2903},
/*h(9)=19 VV1 0x59  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3341},
/*h(22)=20 VV1 0x59  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2903},
/*h(1)=21 VV1 0x59  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3339},
/*h(14)=22 VV1 0x59  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2903},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x59  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2903},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0x59  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3269},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x59  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3267},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0x59  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3022},
/*h(8)=32 VV1 0x59  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3340},
/*h(21)=33 VV1 0x59  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3022}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[144] = {
/*h(89)=0 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {89, 2520},
/*empty slot1 */ {0,0},
/*h(123)=2 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 2520},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(47)=6 VV1 0x5A  V66 VL256 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2834},
/*empty slot1 */ {0,0},
/*h(81)=8 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {81, 2776},
/*h(26)=9 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {26, 2519},
/*h(115)=10 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {115, 2776},
/*h(60)=11 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 2519},
/*empty slot1 */ {0,0},
/*h(94)=13 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {94, 2519},
/*h(39)=14 VV1 0x5A  VNP VL256 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 3466},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(18)=17 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {18, 2775},
/*empty slot1 */ {0,0},
/*h(52)=19 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {52, 2775},
/*empty slot1 */ {0,0},
/*h(86)=21 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {86, 2775},
/*h(31)=22 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2520},
/*h(120)=23 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {120, 2519},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(23)=30 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2776},
/*h(112)=31 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {112, 2775},
/*h(57)=32 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 2520},
/*empty slot1 */ {0,0},
/*h(91)=34 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {91, 2520},
/*empty slot1 */ {0,0},
/*h(125)=36 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 2520},
/*empty slot1 */ {0,0},
/*h(15)=38 VV1 0x5A  V66 VL128 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2832},
/*empty slot1 */ {0,0},
/*h(49)=40 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 2776},
/*empty slot1 */ {0,0},
/*h(83)=42 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {83, 2776},
/*h(28)=43 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2519},
/*h(117)=44 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {117, 2776},
/*h(62)=45 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 2519},
/*h(7)=46 VV1 0x5A  VNP VL128 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3464},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(20)=51 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2775},
/*empty slot1 */ {0,0},
/*h(54)=53 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {54, 2775},
/*empty slot1 */ {0,0},
/*h(88)=55 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {88, 2519},
/*empty slot1 */ {0,0},
/*h(122)=57 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {122, 2519},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(46)=61 VV1 0x5A  V66 VL256 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2833},
/*empty slot1 */ {0,0},
/*h(80)=63 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {80, 2775},
/*h(25)=64 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 2520},
/*h(114)=65 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {114, 2775},
/*h(59)=66 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 2520},
/*empty slot1 */ {0,0},
/*h(93)=68 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 2520},
/*h(38)=69 VV1 0x5A  VNP VL256 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 3465},
/*h(127)=70 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {127, 2520},
/*empty slot1 */ {0,0},
/*h(17)=72 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {17, 2776},
/*empty slot1 */ {0,0},
/*h(51)=74 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 2776},
/*empty slot1 */ {0,0},
/*h(85)=76 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {85, 2776},
/*h(30)=77 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2519},
/*h(119)=78 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {119, 2776},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(22)=85 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2775},
/*empty slot1 */ {0,0},
/*h(56)=87 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 2519},
/*empty slot1 */ {0,0},
/*h(90)=89 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {90, 2519},
/*empty slot1 */ {0,0},
/*h(124)=91 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {124, 2519},
/*empty slot1 */ {0,0},
/*h(14)=93 VV1 0x5A  V66 VL128 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2831},
/*empty slot1 */ {0,0},
/*h(48)=95 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {48, 2775},
/*empty slot1 */ {0,0},
/*h(82)=97 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {82, 2775},
/*h(27)=98 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 2520},
/*h(116)=99 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {116, 2775},
/*h(61)=100 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 2520},
/*h(6)=101 VV1 0x5A  VNP VL128 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3463},
/*h(95)=102 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {95, 2520},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(19)=106 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {19, 2776},
/*empty slot1 */ {0,0},
/*h(53)=108 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 2776},
/*empty slot1 */ {0,0},
/*h(87)=110 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {87, 2776},
/*empty slot1 */ {0,0},
/*h(121)=112 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 2520},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(24)=119 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {24, 2519},
/*h(113)=120 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {113, 2776},
/*h(58)=121 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 2519},
/*empty slot1 */ {0,0},
/*h(92)=123 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 2519},
/*empty slot1 */ {0,0},
/*h(126)=125 VV1 0x5A  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {126, 2519},
/*empty slot1 */ {0,0},
/*h(16)=127 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {16, 2775},
/*empty slot1 */ {0,0},
/*h(50)=129 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {50, 2775},
/*empty slot1 */ {0,0},
/*h(84)=131 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {84, 2775},
/*h(29)=132 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2520},
/*h(118)=133 VV1 0x5A  VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {118, 2775},
/*h(63)=134 VV1 0x5A  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 2520},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(21)=140 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2776},
/*empty slot1 */ {0,0},
/*h(55)=142 VV1 0x5A  VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {55, 2776},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 144ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[22] = {
/*empty slot1 */ {0,0},
/*h(47)=1 VV1 0x5B  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3318},
/*h(39)=2 VV1 0x5B  VL256 VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {39, 3184},
/*h(31)=3 VV1 0x5B  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3410},
/*empty slot1 */ {0,0},
/*h(15)=5 VV1 0x5B  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3316},
/*h(62)=6 VV1 0x5B  VL256 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 3411},
/*h(7)=7 VV1 0x5B  VL128 VNP V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3182},
/*empty slot1 */ {0,0},
/*h(46)=9 VV1 0x5B  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3317},
/*h(38)=10 VV1 0x5B  VL256 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {38, 3183},
/*h(30)=11 VV1 0x5B  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3409},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(14)=14 VV1 0x5B  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3315},
/*h(6)=15 VV1 0x5B  VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3181},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(63)=20 VV1 0x5B  VL256 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 3412},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 22ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x5C  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3843},
/*h(13)=1 VV1 0x5C  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 3657},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x5C  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3657},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x5C  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2500},
/*h(10)=6 VV1 0x5C  V66 V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3230},
/*h(23)=7 VV1 0x5C  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2500},
/*h(2)=8 VV1 0x5C  V66 V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3228},
/*h(15)=9 VV1 0x5C  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2500},
/*h(28)=10 VV1 0x5C  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3656},
/*h(7)=11 VV1 0x5C  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2500},
/*h(20)=12 VV1 0x5C  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3656},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x5C  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3656},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x5C  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3656},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x5C  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2499},
/*h(9)=19 VV1 0x5C  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3846},
/*h(22)=20 VV1 0x5C  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2499},
/*h(1)=21 VV1 0x5C  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3844},
/*h(14)=22 VV1 0x5C  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2499},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x5C  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2499},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0x5C  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3231},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x5C  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3229},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0x5C  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3657},
/*h(8)=32 VV1 0x5C  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3845},
/*h(21)=33 VV1 0x5C  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3657}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x5D  VNP V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3005},
/*h(13)=1 VV1 0x5D  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 3686},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x5D  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3686},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x5D  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 2414},
/*h(10)=6 VV1 0x5D  V66 V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3377},
/*h(23)=7 VV1 0x5D  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2414},
/*h(2)=8 VV1 0x5D  V66 V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3375},
/*h(15)=9 VV1 0x5D  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2414},
/*h(28)=10 VV1 0x5D  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3685},
/*h(7)=11 VV1 0x5D  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2414},
/*h(20)=12 VV1 0x5D  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3685},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x5D  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3685},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x5D  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3685},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x5D  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 2413},
/*h(9)=19 VV1 0x5D  VNP V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3008},
/*h(22)=20 VV1 0x5D  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2413},
/*h(1)=21 VV1 0x5D  VNP V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3006},
/*h(14)=22 VV1 0x5D  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2413},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x5D  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2413},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0x5D  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3378},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x5D  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3376},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0x5D  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3686},
/*h(8)=32 VV1 0x5D  VNP V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3007},
/*h(21)=33 VV1 0x5D  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3686}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x5E  VNP V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3212},
/*h(13)=1 VV1 0x5E  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 3074},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x5E  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3074},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x5E  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3011},
/*h(10)=6 VV1 0x5E  V66 V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2509},
/*h(23)=7 VV1 0x5E  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3011},
/*h(2)=8 VV1 0x5E  V66 V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2507},
/*h(15)=9 VV1 0x5E  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3011},
/*h(28)=10 VV1 0x5E  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3073},
/*h(7)=11 VV1 0x5E  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3011},
/*h(20)=12 VV1 0x5E  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3073},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x5E  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3073},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x5E  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3073},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x5E  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3010},
/*h(9)=19 VV1 0x5E  VNP V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3215},
/*h(22)=20 VV1 0x5E  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3010},
/*h(1)=21 VV1 0x5E  VNP V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3213},
/*h(14)=22 VV1 0x5E  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3010},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x5E  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3010},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0x5E  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2510},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x5E  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2508},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0x5E  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3074},
/*h(8)=32 VV1 0x5E  VNP V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3214},
/*h(21)=33 VV1 0x5E  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3074}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x5f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0x5F  VNP V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3443},
/*h(13)=1 VV1 0x5F  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 2930},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0x5F  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2930},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0x5F  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3119},
/*h(10)=6 VV1 0x5F  V66 V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3222},
/*h(23)=7 VV1 0x5F  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3119},
/*h(2)=8 VV1 0x5F  V66 V0F VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3220},
/*h(15)=9 VV1 0x5F  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3119},
/*h(28)=10 VV1 0x5F  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2929},
/*h(7)=11 VV1 0x5F  VF3 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3119},
/*h(20)=12 VV1 0x5F  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2929},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0x5F  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2929},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0x5F  VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2929},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0x5F  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3118},
/*h(9)=19 VV1 0x5F  VNP V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3446},
/*h(22)=20 VV1 0x5F  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3118},
/*h(1)=21 VV1 0x5F  VNP V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3444},
/*h(14)=22 VV1 0x5F  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3118},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0x5F  VF3 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3118},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0x5F  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3223},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0x5F  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3221},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0x5F  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2930},
/*h(8)=32 VV1 0x5F  VNP V0F VL256 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3445},
/*h(21)=33 VV1 0x5F  VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2930}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x60_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x60  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2541},
/*h(2)=1 VV1 0x60  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2539},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x60  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2542},
/*h(3)=4 VV1 0x60  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2540}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x61_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x61  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3003},
/*h(2)=1 VV1 0x61  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3001},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x61  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3004},
/*h(3)=4 VV1 0x61  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3002}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x62_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x62  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3019},
/*h(2)=1 VV1 0x62  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3017},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x62  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3020},
/*h(3)=4 VV1 0x62  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3018}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x63_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x63  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2503},
/*h(2)=1 VV1 0x63  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2501},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x63  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2504},
/*h(3)=4 VV1 0x63  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2502}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x64_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x64  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3437},
/*h(2)=1 VV1 0x64  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3435},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x64  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3438},
/*h(3)=4 VV1 0x64  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3436}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x65_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x65  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3387},
/*h(2)=1 VV1 0x65  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3385},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x65  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3388},
/*h(3)=4 VV1 0x65  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3386}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x66_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x66  V66 V0F VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3116},
/*h(2)=1 VV1 0x66  V66 V0F VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3114},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x66  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3117},
/*h(3)=4 VV1 0x66  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3115}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x67_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x67  V66 V0F VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2911},
/*h(2)=1 VV1 0x67  V66 V0F VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2909},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x67  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2912},
/*h(3)=4 VV1 0x67  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2910}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x68_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x68  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3582},
/*h(2)=1 VV1 0x68  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3580},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x68  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3583},
/*h(3)=4 VV1 0x68  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3581}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x69_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x69  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2461},
/*h(2)=1 VV1 0x69  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2459},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x69  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2462},
/*h(3)=4 VV1 0x69  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2460}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x6A  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2477},
/*h(2)=1 VV1 0x6A  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2475},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x6A  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2478},
/*h(3)=4 VV1 0x6A  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2476}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x6B  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2823},
/*h(2)=1 VV1 0x6B  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2821},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x6B  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2824},
/*h(3)=4 VV1 0x6B  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2822}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x6C  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3423},
/*h(2)=1 VV1 0x6C  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3421},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x6C  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3424},
/*h(3)=4 VV1 0x6C  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3422}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x6D  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3754},
/*h(2)=1 VV1 0x6D  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3752},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x6D  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3755},
/*h(3)=4 VV1 0x6D  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3753}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(123)=0 VV1 0x6E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 3397},
/*h(115)=1 VV1 0x6E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {115, 3397},
/*h(120)=2 VV1 0x6E  VL128 V66 V0F not64 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {120, 3396},
/*h(112)=3 VV1 0x6E  VL128 V66 V0F not64 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {112, 3396},
/*h(125)=4 VV1 0x6E  VL128 V66 V0F mode64 rexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 3426},
/*h(117)=5 VV1 0x6E  VL128 V66 V0F mode64 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {117, 3401},
/*h(122)=6 VV1 0x6E  VL128 V66 V0F not64 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {122, 3396},
/*h(114)=7 VV1 0x6E  VL128 V66 V0F not64 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {114, 3396},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(124)=10 VV1 0x6E  VL128 V66 V0F mode64 rexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {124, 3425},
/*h(116)=11 VV1 0x6E  VL128 V66 V0F mode64 norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {116, 3400},
/*empty slot1 */ {0,0},
/*h(121)=13 VV1 0x6E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 3397},
/*h(113)=14 VV1 0x6E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {113, 3397},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x6f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(47)=0 VV1 0x6F  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3828},
/*h(31)=1 VV1 0x6F  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3561},
/*h(15)=2 VV1 0x6F  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3824},
/*h(62)=3 VV1 0x6F  VL256 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 3562},
/*h(46)=4 VV1 0x6F  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3827},
/*h(30)=5 VV1 0x6F  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3560},
/*h(14)=6 VV1 0x6F  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3823},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(63)=9 VV1 0x6F  VL256 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 3563}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x70_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(47)=0 VV1 0x70   VL256 V66 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {47, 2617},
/*empty slot1 */ {0,0},
/*h(31)=2 VV1 0x70  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {31, 3197},
/*h(23)=3 VV1 0x70  VL128 VF2 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {23, 2959},
/*h(15)=4 VV1 0x70  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {15, 2615},
/*h(62)=5 VV1 0x70   VL256 VF3 V0F NOVSR   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {62, 3198},
/*h(54)=6 VV1 0x70   VL256 VF2 V0F NOVSR   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {54, 2960},
/*h(46)=7 VV1 0x70   VL256 V66 V0F NOVSR   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {46, 2616},
/*empty slot1 */ {0,0},
/*h(30)=9 VV1 0x70  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {30, 3196},
/*h(22)=10 VV1 0x70  VL128 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {22, 2958},
/*h(14)=11 VV1 0x70  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {14, 2614},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(63)=15 VV1 0x70   VL256 VF3 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {63, 3199},
/*h(55)=16 VV1 0x70   VL256 VF2 V0F NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {55, 2961}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x71_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[6] = {
/*h(21)=0 VV1 0x71  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b010] RM[nnn] UIMM8()*/ {21, 3792},
/*h(85)=1 VV1 0x71   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b010] RM[nnn] UIMM8()*/ {85, 3795},
/*h(29)=2 VV1 0x71  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()*/ {29, 2923},
/*h(93)=3 VV1 0x71   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()*/ {93, 2926},
/*h(25)=4 VV1 0x71  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b100] RM[nnn] UIMM8()*/ {25, 3817},
/*h(89)=5 VV1 0x71   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b100] RM[nnn] UIMM8()*/ {89, 3820}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REG_VEX_PREFIX_VL(d);
hidx = ((5*key % 11) % 6);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x72_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[6] = {
/*h(21)=0 VV1 0x72  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b010] RM[nnn] UIMM8()*/ {21, 2448},
/*h(85)=1 VV1 0x72   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b010] RM[nnn] UIMM8()*/ {85, 2451},
/*h(29)=2 VV1 0x72  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()*/ {29, 2583},
/*h(93)=3 VV1 0x72   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()*/ {93, 2586},
/*h(25)=4 VV1 0x72  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b100] RM[nnn] UIMM8()*/ {25, 2732},
/*h(89)=5 VV1 0x72   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b100] RM[nnn] UIMM8()*/ {89, 2735}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REG_VEX_PREFIX_VL(d);
hidx = ((5*key % 11) % 6);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x73_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[14] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(31)=2 VV1 0x73  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b111] RM[nnn] UIMM8()*/ {31, 3125},
/*h(23)=3 VV1 0x73  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b011] RM[nnn] UIMM8()*/ {23, 3179},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(93)=6 VV1 0x73   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()*/ {93, 2548},
/*h(85)=7 VV1 0x73   VL256  V66 V0F MOD[0b11] MOD=3 REG[0b010] RM[nnn] UIMM8()*/ {85, 3504},
/*empty slot1 */ {0,0},
/*h(95)=9 VV1 0x73  VL256 V66 V0F   MOD[0b11] MOD=3 REG[0b111] RM[nnn] UIMM8()*/ {95, 3126},
/*h(87)=10 VV1 0x73  VL256 V66 V0F   MOD[0b11] MOD=3 REG[0b011] RM[nnn] UIMM8()*/ {87, 3180},
/*empty slot1 */ {0,0},
/*h(29)=12 VV1 0x73  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b110] RM[nnn] UIMM8()*/ {29, 2545},
/*h(21)=13 VV1 0x73  VL128 V66 V0F MOD[0b11] MOD=3 REG[0b010] RM[nnn] UIMM8()*/ {21, 3501}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REG_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 14ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x74_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x74  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3350},
/*h(2)=1 VV1 0x74  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3348},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x74  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3351},
/*h(3)=4 VV1 0x74  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3349}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x75_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x75  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3202},
/*h(2)=1 VV1 0x75  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3200},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x75  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3203},
/*h(3)=4 VV1 0x75  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3201}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x76_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x76  V66 V0F VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3497},
/*h(2)=1 VV1 0x76  V66 V0F VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3495},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x76  V66 V0F VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3498},
/*h(3)=4 VV1 0x76  V66 V0F VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3496}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x77_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(19)=2 VV1 0x77 VNP  V0F VL256  NOVSR*/ {19, 3081},
/*h(3)=3 VV1 0x77 VNP  V0F VL128 NOVSR*/ {3, 2696}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-2));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[13] = {
/*h(13)=0 VV1 0x7C  VL256 VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 2806},
/*h(5)=1 VV1 0x7C  VL128 VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2804},
/*h(10)=2 VV1 0x7C  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2827},
/*h(2)=3 VV1 0x7C  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2825},
/*empty slot1 */ {0,0},
/*h(12)=5 VV1 0x7C  VL256 VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2805},
/*h(4)=6 VV1 0x7C  VL128 VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2803},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=10 VV1 0x7C  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2828},
/*h(3)=11 VV1 0x7C  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2826},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 13ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[13] = {
/*h(13)=0 VV1 0x7D  VL256 VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 2749},
/*h(5)=1 VV1 0x7D  VL128 VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2747},
/*h(10)=2 VV1 0x7D  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3834},
/*h(2)=3 VV1 0x7D  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3832},
/*empty slot1 */ {0,0},
/*h(12)=5 VV1 0x7D  VL256 VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2748},
/*h(4)=6 VV1 0x7D  VL128 VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2746},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=10 VV1 0x7D  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3835},
/*h(3)=11 VV1 0x7D  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3833},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 13ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(123)=0 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {123, 3399},
/*empty slot1 */ {0,0},
/*h(115)=2 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {115, 3399},
/*empty slot1 */ {0,0},
/*h(251)=4 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {251, 3430},
/*h(120)=5 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {120, 3398},
/*h(243)=6 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {243, 3430},
/*h(112)=7 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {112, 3398},
/*h(125)=8 VV1 0x7E  VL128 V66 V0F mode64 rexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {125, 3428},
/*h(248)=9 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {248, 3429},
/*h(117)=10 VV1 0x7E  VL128 V66 V0F mode64 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {117, 3403},
/*h(240)=11 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {240, 3429},
/*h(253)=12 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {253, 3430},
/*h(122)=13 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {122, 3398},
/*h(245)=14 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {245, 3430},
/*h(114)=15 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {114, 3398},
/*empty slot1 */ {0,0},
/*h(250)=17 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {250, 3429},
/*empty slot1 */ {0,0},
/*h(242)=19 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {242, 3429},
/*empty slot1 */ {0,0},
/*h(124)=21 VV1 0x7E  VL128 V66 V0F mode64 rexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {124, 3427},
/*empty slot1 */ {0,0},
/*h(116)=23 VV1 0x7E  VL128 V66 V0F mode64 norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {116, 3402},
/*empty slot1 */ {0,0},
/*h(252)=25 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {252, 3429},
/*h(121)=26 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {121, 3399},
/*h(244)=27 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {244, 3429},
/*h(113)=28 VV1 0x7E  VL128 V66 V0F not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {113, 3399},
/*empty slot1 */ {0,0},
/*h(249)=30 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {249, 3430},
/*empty slot1 */ {0,0},
/*h(241)=32 VV1 0x7E  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {241, 3430},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x7f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(47)=0 VV1 0x7F  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3830},
/*h(31)=1 VV1 0x7F  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3565},
/*h(15)=2 VV1 0x7F  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3826},
/*h(62)=3 VV1 0x7F  VL256 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 3566},
/*h(46)=4 VV1 0x7F  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3829},
/*h(30)=5 VV1 0x7F  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3564},
/*h(14)=6 VV1 0x7F  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3825},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(63)=9 VV1 0x7F  VL256 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 3567}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x90_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(13)=0 VV1 0x90 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {13, 3847},
/*h(31)=1 VV1 0x90 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {31, 2870},
/*h(15)=2 VV1 0x90 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {15, 3284},
/*h(28)=3 VV1 0x90 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0  NOVSR*/ {28, 3589},
/*h(12)=4 VV1 0x90 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0  NOVSR*/ {12, 3848},
/*h(30)=5 VV1 0x90 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1  NOVSR*/ {30, 2871},
/*h(14)=6 VV1 0x90 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1  NOVSR*/ {14, 3285},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(29)=9 VV1 0x90 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {29, 3588}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x91_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x91 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0  NOVSR*/ {28, 3590},
/*h(12)=3 VV1 0x91 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0  NOVSR*/ {12, 3849},
/*h(30)=4 VV1 0x91 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1  NOVSR*/ {30, 2872},
/*h(14)=5 VV1 0x91 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1  NOVSR*/ {14, 3286},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x92_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[21] = {
/*empty slot1 */ {0,0},
/*h(115)=1 VV1 0x92 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {115, 3591},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(49)=5 VV1 0x92 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {49, 3850},
/*h(117)=6 VV1 0x92 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {117, 3591},
/*h(185)=7 VV1 0x92 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64 NOVSR*/ {185, 2874},
/*h(177)=8 VV1 0x92 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64 NOVSR*/ {177, 2874},
/*empty slot1 */ {0,0},
/*h(51)=10 VV1 0x92 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {51, 3850},
/*empty slot1 */ {0,0},
/*h(187)=12 VV1 0x92 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64 NOVSR*/ {187, 2874},
/*h(179)=13 VV1 0x92 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64 NOVSR*/ {179, 2874},
/*empty slot1 */ {0,0},
/*h(53)=15 VV1 0x92 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {53, 3850},
/*h(189)=16 VV1 0x92 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  mode64  NOVSR*/ {189, 3287},
/*h(113)=17 VV1 0x92 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {113, 3591},
/*h(181)=18 VV1 0x92 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0 mode64  NOVSR*/ {181, 2873},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 21ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x93_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[21] = {
/*empty slot1 */ {0,0},
/*h(115)=1 VV1 0x93 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {115, 3592},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(49)=5 VV1 0x93 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {49, 3851},
/*h(117)=6 VV1 0x93 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {117, 3592},
/*h(185)=7 VV1 0x93 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64  NOVSR*/ {185, 2876},
/*h(177)=8 VV1 0x93 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64  NOVSR*/ {177, 2876},
/*empty slot1 */ {0,0},
/*h(51)=10 VV1 0x93 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {51, 3851},
/*empty slot1 */ {0,0},
/*h(187)=12 VV1 0x93 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64  NOVSR*/ {187, 2876},
/*h(179)=13 VV1 0x93 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  not64  NOVSR*/ {179, 2876},
/*empty slot1 */ {0,0},
/*h(53)=15 VV1 0x93 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {53, 3851},
/*h(189)=16 VV1 0x93 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  mode64  NOVSR*/ {189, 3288},
/*h(113)=17 VV1 0x93 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {113, 3592},
/*h(181)=18 VV1 0x93 VF2 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  mode64 NOVSR*/ {181, 2875},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 21ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x98_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*h(13)=0 VV1 0x98 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {13, 3261},
/*h(31)=1 VV1 0x98 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {31, 3621},
/*h(15)=2 VV1 0x98 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {15, 3185},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(29)=7 VV1 0x98 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {29, 2458}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0x99_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*h(13)=0 VV1 0x99 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {13, 3874},
/*h(31)=1 VV1 0x99 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {31, 3895},
/*h(15)=2 VV1 0x99 VNP V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR*/ {15, 3016},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(29)=7 VV1 0x99 V66 V0F MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR*/ {29, 2741}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xae_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[3] = {
/*h(52)=0 VV1 0xAE VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {52, 3674},
/*h(54)=1 VV1 0xAE VL128 VNP V0F NOVSR MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {54, 3042},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REG_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 3ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[34] = {
/*h(0)=0 VV1 0xC2  VNP VL128 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {0, 3453},
/*h(13)=1 VV1 0xC2   VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {13, 3033},
/*empty slot1 */ {0,0},
/*h(5)=3 VV1 0xC2   VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {5, 3033},
/*empty slot1 */ {0,0},
/*h(31)=5 VV1 0xC2   VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {31, 3235},
/*h(10)=6 VV1 0xC2  V66 VL256 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 3367},
/*h(23)=7 VV1 0xC2   VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {23, 3235},
/*h(2)=8 VV1 0xC2  V66 VL128 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 3365},
/*h(15)=9 VV1 0xC2   VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {15, 3235},
/*h(28)=10 VV1 0xC2   VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {28, 3032},
/*h(7)=11 VV1 0xC2   VF3 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {7, 3235},
/*h(20)=12 VV1 0xC2   VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {20, 3032},
/*empty slot1 */ {0,0},
/*h(12)=14 VV1 0xC2   VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {12, 3032},
/*empty slot1 */ {0,0},
/*h(4)=16 VV1 0xC2   VF2 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {4, 3032},
/*empty slot1 */ {0,0},
/*h(30)=18 VV1 0xC2   VF3 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {30, 3234},
/*h(9)=19 VV1 0xC2  VNP VL256 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {9, 3456},
/*h(22)=20 VV1 0xC2   VF3 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {22, 3234},
/*h(1)=21 VV1 0xC2  VNP VL128 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {1, 3454},
/*h(14)=22 VV1 0xC2   VF3 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {14, 3234},
/*empty slot1 */ {0,0},
/*h(6)=24 VV1 0xC2   VF3 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {6, 3234},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=27 VV1 0xC2  V66 VL256 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 3368},
/*empty slot1 */ {0,0},
/*h(3)=29 VV1 0xC2  V66 VL128 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 3366},
/*empty slot1 */ {0,0},
/*h(29)=31 VV1 0xC2   VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {29, 3033},
/*h(8)=32 VV1 0xC2  VNP VL256 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {8, 3455},
/*h(21)=33 VV1 0xC2   VF2 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {21, 3033}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 34ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc4_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(2)=0 VV1 0xC4  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3232},
/*h(3)=1 VV1 0xC4  VL128 V66 V0F  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3233}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = key - 2;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc5_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[1] = {
/*h(15)=0 VV1 0xC5  VL128 V66 V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2551}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 15;
if(hidx == 0) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xc6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[10] = {
/*h(0)=0 VV1 0xC6  VL128 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {0, 2758},
/*h(10)=1 VV1 0xC6  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 3607},
/*h(2)=2 VV1 0xC6  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 3605},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(9)=5 VV1 0xC6  VL256 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {9, 2761},
/*h(1)=6 VV1 0xC6  VL128 VNP V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {1, 2759},
/*h(11)=7 VV1 0xC6  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 3608},
/*h(3)=8 VV1 0xC6  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 3606},
/*h(8)=9 VV1 0xC6  VL256 VNP V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {8, 2760}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 10ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd0_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[13] = {
/*h(13)=0 VV1 0xD0  VL256 VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 3227},
/*h(5)=1 VV1 0xD0  VL128 VF2 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3225},
/*h(10)=2 VV1 0xD0  VL256 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3766},
/*h(2)=3 VV1 0xD0  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3764},
/*empty slot1 */ {0,0},
/*h(12)=5 VV1 0xD0  VL256 VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3226},
/*h(4)=6 VV1 0xD0  VL128 VF2 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3224},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(11)=10 VV1 0xD0  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3767},
/*h(3)=11 VV1 0xD0  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3765},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 13ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd1_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD1  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3793},
/*h(2)=1 VV1 0xD1  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3790},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD1  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3794},
/*h(3)=4 VV1 0xD1  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3791}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD2  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2449},
/*h(2)=1 VV1 0xD2  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2446},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD2  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2450},
/*h(3)=4 VV1 0xD2  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2447}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd3_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD3  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3502},
/*h(2)=1 VV1 0xD3  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3499},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD3  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3503},
/*h(3)=4 VV1 0xD3  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3500}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd4_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD4  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2764},
/*h(2)=1 VV1 0xD4  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2762},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD4  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2765},
/*h(3)=4 VV1 0xD4  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2763}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd5_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD5  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3094},
/*h(2)=1 VV1 0xD5  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3092},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD5  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3095},
/*h(3)=4 VV1 0xD5  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3093}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd6_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0xD6  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3431},
/*h(15)=1 VV1 0xD6  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3432}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd7_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(47)=0 VV1 0xD7  VL256 V66 V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3136},
/*h(15)=1 VV1 0xD7  VL128 V66 V0F  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3135},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-2));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD8  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3326},
/*h(2)=1 VV1 0xD8  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3324},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD8  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3327},
/*h(3)=4 VV1 0xD8  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3325}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xd9_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xD9  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2939},
/*h(2)=1 VV1 0xD9  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2937},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xD9  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2940},
/*h(3)=4 VV1 0xD9  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2938}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xda_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDA  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2575},
/*h(2)=1 VV1 0xDA  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2573},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDA  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2576},
/*h(3)=4 VV1 0xDA  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2574}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdb_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDB  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3362},
/*h(2)=1 VV1 0xDB  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3360},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDB   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3363},
/*h(3)=4 VV1 0xDB  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3361}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdc_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDC  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3493},
/*h(2)=1 VV1 0xDC  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3491},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDC  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3494},
/*h(3)=4 VV1 0xDC  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3492}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdd_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDD  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3299},
/*h(2)=1 VV1 0xDD  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3297},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDD  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3300},
/*h(3)=4 VV1 0xDD  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3298}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xde_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDE  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3512},
/*h(2)=1 VV1 0xDE  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3510},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDE  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3513},
/*h(3)=4 VV1 0xDE  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3511}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xdf_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDF  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3578},
/*h(2)=1 VV1 0xDF  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3576},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDF   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3579},
/*h(3)=4 VV1 0xDF  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3577}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe0_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE0  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2515},
/*h(2)=1 VV1 0xE0  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2513},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE0  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2516},
/*h(3)=4 VV1 0xE0  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2514}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe1_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE1  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3818},
/*h(2)=1 VV1 0xE1  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3815},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE1  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3819},
/*h(3)=4 VV1 0xE1  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3816}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE2  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2733},
/*h(2)=1 VV1 0xE2  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2730},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE2  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2734},
/*h(3)=4 VV1 0xE2  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2731}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe3_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE3  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2739},
/*h(2)=1 VV1 0xE3  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2737},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE3  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2740},
/*h(3)=4 VV1 0xE3  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2738}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe4_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE4  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3881},
/*h(2)=1 VV1 0xE4  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3879},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE4  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3882},
/*h(3)=4 VV1 0xE4  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3880}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe5_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE5  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2976},
/*h(2)=1 VV1 0xE5  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2974},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE5  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2977},
/*h(3)=4 VV1 0xE5  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2975}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(47)=0 VV1 0xE6  VL256 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2388},
/*empty slot1 */ {0,0},
/*h(31)=2 VV1 0xE6  VL128 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {31, 3812},
/*h(23)=3 VV1 0xE6  VL128 VF2 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3549},
/*h(15)=4 VV1 0xE6  VL128 V66 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2386},
/*h(62)=5 VV1 0xE6  VL256 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {62, 3813},
/*h(54)=6 VV1 0xE6  VL256 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {54, 3550},
/*h(46)=7 VV1 0xE6  VL256 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2387},
/*empty slot1 */ {0,0},
/*h(30)=9 VV1 0xE6  VL128 VF3 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {30, 3811},
/*h(22)=10 VV1 0xE6  VL128 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3548},
/*h(14)=11 VV1 0xE6  VL128 V66 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2385},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(63)=15 VV1 0xE6  VL256 VF3 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {63, 3814},
/*h(55)=16 VV1 0xE6  VL256 VF2 V0F NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {55, 3551}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe7_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(46)=0 VV1 0xE7  V66 V0F VL256 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3610},
/*h(14)=1 VV1 0xE7  V66 V0F VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3609}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE8  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2988},
/*h(2)=1 VV1 0xE8  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2986},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE8  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2989},
/*h(3)=4 VV1 0xE8  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2987}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xe9_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xE9  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3774},
/*h(2)=1 VV1 0xE9  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3772},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xE9  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3775},
/*h(3)=4 VV1 0xE9  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3773}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xea_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xEA  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2784},
/*h(2)=1 VV1 0xEA  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2782},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xEA  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2785},
/*h(3)=4 VV1 0xEA  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2783}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xeb_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xEB  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3648},
/*h(2)=1 VV1 0xEB  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3646},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xEB   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3649},
/*h(3)=4 VV1 0xEB  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3647}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xec_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xEC  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3660},
/*h(2)=1 VV1 0xEC  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3658},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xEC  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3661},
/*h(3)=4 VV1 0xEC  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3659}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xed_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xED  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3809},
/*h(2)=1 VV1 0xED  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3807},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xED  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3810},
/*h(3)=4 VV1 0xED  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3808}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xee_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xEE  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3872},
/*h(2)=1 VV1 0xEE  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3870},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xEE  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3873},
/*h(3)=4 VV1 0xEE  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3871}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xef_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xEF  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3803},
/*h(2)=1 VV1 0xEF  VL128 V66 V0F MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3801},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xEF   VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3804},
/*h(3)=4 VV1 0xEF  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3802}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf0_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(54)=0 VV1 0xF0  VL256 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {54, 3682},
/*h(22)=1 VV1 0xF0  VL128 VF2 V0F NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3681}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf1_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF1  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2924},
/*h(2)=1 VV1 0xF1  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2921},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF1  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2925},
/*h(3)=4 VV1 0xF1  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2922}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF2  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2584},
/*h(2)=1 VV1 0xF2  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2581},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF2  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2585},
/*h(3)=4 VV1 0xF2  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2582}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf3_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF3  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2546},
/*h(2)=1 VV1 0xF3  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2543},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF3  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2547},
/*h(3)=4 VV1 0xF3  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2544}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf4_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF4  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3027},
/*h(2)=1 VV1 0xF4  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3025},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF4  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3028},
/*h(3)=4 VV1 0xF4  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3026}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf5_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF5  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2868},
/*h(2)=1 VV1 0xF5  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2866},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF5  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2869},
/*h(3)=4 VV1 0xF5  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2867}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF6  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3788},
/*h(2)=1 VV1 0xF6  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3786},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF6  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3789},
/*h(3)=4 VV1 0xF6  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3787}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf7_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[1] = {
/*h(15)=0 VV1 0xF7 V0F V66 VL128  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3831}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 15;
if(hidx == 0) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF8  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2405},
/*h(2)=1 VV1 0xF8  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2403},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF8  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2406},
/*h(3)=4 VV1 0xF8  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2404}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xf9_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xF9  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2523},
/*h(2)=1 VV1 0xF9  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2521},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xF9  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2524},
/*h(3)=4 VV1 0xF9  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2522}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfa_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xFA  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3885},
/*h(2)=1 VV1 0xFA  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3883},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xFA  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3886},
/*h(3)=4 VV1 0xFA  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3884}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfb_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xFB  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2497},
/*h(2)=1 VV1 0xFB  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2495},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xFB  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2498},
/*h(3)=4 VV1 0xFB  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2496}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfc_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xFC  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3595},
/*h(2)=1 VV1 0xFC  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3593},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xFC  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3596},
/*h(3)=4 VV1 0xFC  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3594}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfd_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xFD  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3322},
/*h(2)=1 VV1 0xFD  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3320},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xFD  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3323},
/*h(3)=4 VV1 0xFD  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3321}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F_opcode0xfe_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xFE  VL256 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3264},
/*h(2)=1 VV1 0xFE  VL128 V66 V0F  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3262},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xFE  VL256 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3265},
/*h(3)=4 VV1 0xFE  VL128 V66 V0F MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3263}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x0_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x00  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3722},
/*h(2)=1 VV1 0x00  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3720},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x00  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3723},
/*h(3)=4 VV1 0x00  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3721}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x01  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2421},
/*h(2)=1 VV1 0x01  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2419},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x01  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2422},
/*h(3)=4 VV1 0x01  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2420}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x02  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3071},
/*h(2)=1 VV1 0x02  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3069},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x02  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3072},
/*h(3)=4 VV1 0x02  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3070}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x03  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3330},
/*h(2)=1 VV1 0x03  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3328},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x03  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3331},
/*h(3)=4 VV1 0x03  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3329}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x4_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x04  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2485},
/*h(2)=1 VV1 0x04  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2483},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x04  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2486},
/*h(3)=4 VV1 0x04  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2484}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x5_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x05  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2752},
/*h(2)=1 VV1 0x05  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2750},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x05  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2753},
/*h(3)=4 VV1 0x05  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2751}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x06  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2620},
/*h(2)=1 VV1 0x06  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2618},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x06  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2621},
/*h(3)=4 VV1 0x06  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2619}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x7_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x07  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3122},
/*h(2)=1 VV1 0x07  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3120},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x07  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3123},
/*h(3)=4 VV1 0x07  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3121}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x08  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3063},
/*h(2)=1 VV1 0x08  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3061},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x08  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3064},
/*h(3)=4 VV1 0x08  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3062}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x09  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2897},
/*h(2)=1 VV1 0x09  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2895},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x09  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2898},
/*h(3)=4 VV1 0x09  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2896}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x0A  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3381},
/*h(2)=1 VV1 0x0A  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3379},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x0A  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3382},
/*h(3)=4 VV1 0x0A  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3380}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x0B  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3613},
/*h(2)=1 VV1 0x0B  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3611},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x0B  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3614},
/*h(3)=4 VV1 0x0B  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3612}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xc_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x0C  VL128 V66 V0F38 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2943},
/*h(20)=1 VV1 0x0C  VL256 V66 V0F38  norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2944},
/*h(4)=2 VV1 0x0C VL128 V66 V0F38 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2942},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x0C  VL256 V66 V0F38  norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2945}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xd_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x0D  VL128 V66 V0F38 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3138},
/*h(20)=1 VV1 0x0D  VL256 V66 V0F38 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3139},
/*h(4)=2 VV1 0x0D VL128 V66 V0F38 norexw_prefix  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3137},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x0D  VL256 V66 V0F38 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3140}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xe_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x0E VL128 V66 V0F38 norexw_prefix  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3862},
/*h(93)=3 VV1 0x0E VL256 V66 V0F38 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3865},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x0E VL256 V66 V0F38  norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 3864},
/*h(29)=7 VV1 0x0E  VL128 V66 V0F38 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3863}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x0F  VL128 V66 V0F38 norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2997},
/*h(93)=3 VV1 0x0F VL256 V66 V0F38 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3000},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x0F VL256 V66 V0F38  norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 2999},
/*h(29)=7 VV1 0x0F VL128 V66 V0F38 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2998}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x13_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x13 VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()  W0*/ {28, 3891},
/*h(93)=3 VV1 0x13 VL256 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]  W0*/ {93, 3894},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x13 VL256 V66 V0F38 NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() W0*/ {92, 3893},
/*h(29)=7 VV1 0x13 VL128 V66 V0F38 NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn] W0*/ {29, 3892}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x16_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x16  VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3707},
/*h(21)=1 VV1 0x16  VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3708}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = key - 20;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x17_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x17  VL256 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3747},
/*h(15)=1 VV1 0x17  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3745},
/*h(46)=2 VV1 0x17  VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3746},
/*h(14)=3 VV1 0x17  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3744},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x18_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x18  norexw_prefix VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3208},
/*h(93)=3 VV1 0x18  VL256 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3211},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x18  norexw_prefix VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 3209},
/*h(29)=7 VV1 0x18  VL128 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3210}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x19_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(92)=0 VV1 0x19  norexw_prefix VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3156},
/*h(93)=1 VV1 0x19  VL256 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3157}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 92;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1a_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[1] = {
/*h(92)=0 VV1 0x1A norexw_prefix VL256 V66 V0F38 NOVSR  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3195}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 92;
if(hidx == 0) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x1C   VL256 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2820},
/*h(15)=1 VV1 0x1C  V66 V0F38 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2818},
/*h(46)=2 VV1 0x1C   VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2819},
/*h(14)=3 VV1 0x1C   V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2817},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x1D   VL256 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2532},
/*h(15)=1 VV1 0x1D  V66 V0F38 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2530},
/*h(46)=2 VV1 0x1D   VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2531},
/*h(14)=3 VV1 0x1D   V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2529},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x1e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x1E   VL256 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2590},
/*h(15)=1 VV1 0x1E  V66 V0F38 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2588},
/*h(46)=2 VV1 0x1E   VL256 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2589},
/*h(14)=3 VV1 0x1E   V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2587},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x20_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x20   VL256  V66 V0F38 NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3516},
/*h(15)=1 VV1 0x20  VL128 V66 V0F38 NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3514},
/*h(46)=2 VV1 0x20   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3517},
/*h(14)=3 VV1 0x20  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3515},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x21_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x21   VL256  V66 V0F38 NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3188},
/*h(15)=1 VV1 0x21  VL128 V66 V0F38 NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3186},
/*h(46)=2 VV1 0x21   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3189},
/*h(14)=3 VV1 0x21  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3187},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x22_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x22   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3469},
/*h(15)=1 VV1 0x22  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3467},
/*h(46)=2 VV1 0x22   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3470},
/*h(14)=3 VV1 0x22  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3468},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x23_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x23   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2915},
/*h(15)=1 VV1 0x23  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2913},
/*h(46)=2 VV1 0x23   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2916},
/*h(14)=3 VV1 0x23  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2914},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x24_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x24   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2935},
/*h(15)=1 VV1 0x24  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2933},
/*h(46)=2 VV1 0x24   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2936},
/*h(14)=3 VV1 0x24  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2934},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x25_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x25   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3868},
/*h(15)=1 VV1 0x25  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3866},
/*h(46)=2 VV1 0x25   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3869},
/*h(14)=3 VV1 0x25  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3867},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x28_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x28  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2813},
/*h(2)=1 VV1 0x28  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2811},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x28  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2814},
/*h(3)=4 VV1 0x28  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2812}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x29_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x29  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3151},
/*h(2)=1 VV1 0x29  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3149},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x29  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3152},
/*h(3)=4 VV1 0x29  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3150}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(46)=0 VV1 0x2A  V66 V0F38 VL256 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3155},
/*h(14)=1 VV1 0x2A  V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3154}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x2B  V66 V0F38 VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3586},
/*h(2)=1 VV1 0x2B  V66 V0F38 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3584},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x2B  V66 V0F38 VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3587},
/*h(3)=4 VV1 0x2B  V66 V0F38 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3585}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x2C V66 VL256 V0F38    norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3741},
/*h(4)=1 VV1 0x2C V66 VL128 V0F38 norexw_prefix  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3740}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = ((4*key % 3) % 2);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x2D  V66 VL256 V0F38 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3099},
/*h(4)=1 VV1 0x2D  V66 VL128 V0F38  norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3098}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = ((4*key % 3) % 2);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x2E V66 V0F38 VL256 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3743},
/*h(4)=1 VV1 0x2E V66 V0F38 VL128  norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3742}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = ((4*key % 3) % 2);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x2f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x2F   V66 V0F38 VL256 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3101},
/*h(4)=1 VV1 0x2F   V66 V0F38 VL128 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3100}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = ((4*key % 3) % 2);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x30_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x30   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 2481},
/*h(15)=1 VV1 0x30  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 2479},
/*h(46)=2 VV1 0x30   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 2482},
/*h(14)=3 VV1 0x30  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 2480},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x31_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x31   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3677},
/*h(15)=1 VV1 0x31  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3675},
/*h(46)=2 VV1 0x31   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3678},
/*h(14)=3 VV1 0x31  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3676},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x32_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x32   V66  V0F38 VL256 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3415},
/*h(15)=1 VV1 0x32  V66 V0F38 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3413},
/*h(46)=2 VV1 0x32   V66  V0F38 VL256 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3416},
/*h(14)=3 VV1 0x32  V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3414},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x33_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x33   V66  V0F38 VL256 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3705},
/*h(15)=1 VV1 0x33  V66 V0F38 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3703},
/*h(46)=2 VV1 0x33   V66  V0F38 VL256 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3706},
/*h(14)=3 VV1 0x33  V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3704},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x34_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x34   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3889},
/*h(15)=1 VV1 0x34  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3887},
/*h(46)=2 VV1 0x34   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3890},
/*h(14)=3 VV1 0x34  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3888},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x35_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x35   VL256  V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {47, 3542},
/*h(15)=1 VV1 0x35  VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {15, 3540},
/*h(46)=2 VV1 0x35   VL256  V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {46, 3543},
/*h(14)=3 VV1 0x35  VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {14, 3541},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x36_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x36  VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3856},
/*h(21)=1 VV1 0x36  VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3857}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = key - 20;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x37_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x37  V66 V0F38 VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2686},
/*h(2)=1 VV1 0x37  V66 V0F38 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2684},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x37  V66 V0F38 VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2687},
/*h(3)=4 VV1 0x37  V66 V0F38 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2685}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x38_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x38  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3624},
/*h(2)=1 VV1 0x38  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3622},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x38  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3625},
/*h(3)=4 VV1 0x38  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3623}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x39_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x39  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3218},
/*h(2)=1 VV1 0x39  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3216},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x39  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3219},
/*h(3)=4 VV1 0x39  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3217}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x3A  V66 V0F38 VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2650},
/*h(2)=1 VV1 0x3A  V66 V0F38 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2648},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x3A  V66 V0F38 VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2651},
/*h(3)=4 VV1 0x3A  V66 V0F38 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2649}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x3B  V66 V0F38 VL256  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2391},
/*h(2)=1 VV1 0x3B  V66 V0F38 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2389},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x3B  V66 V0F38 VL256 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2392},
/*h(3)=4 VV1 0x3B  V66 V0F38 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2390}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x3C  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2919},
/*h(2)=1 VV1 0x3C  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2917},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x3C  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2920},
/*h(3)=4 VV1 0x3C  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2918}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x3D  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3147},
/*h(2)=1 VV1 0x3D  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3145},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x3D  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3148},
/*h(3)=4 VV1 0x3D  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3146}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x3E  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3481},
/*h(2)=1 VV1 0x3E  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3479},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x3E  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3482},
/*h(3)=4 VV1 0x3E  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3480}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x3f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x3F  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3451},
/*h(2)=1 VV1 0x3F  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3449},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x3F  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3452},
/*h(3)=4 VV1 0x3F  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3450}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x40_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x40  VL256 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3282},
/*h(2)=1 VV1 0x40  VL128 V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3280},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x40  VL256 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3283},
/*h(3)=4 VV1 0x40  VL128 V66 V0F38 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3281}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x41_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0x41   V66 V0F38 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3619},
/*h(15)=1 VV1 0x41  V66 V0F38 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3620}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x45_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x45  VL128 V0F38 V66 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3460},
/*h(23)=1 VV1 0x45  VL256 V0F38 V66 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3078},
/*h(7)=2 VV1 0x45  VL128 V0F38 V66 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3076},
/*h(20)=3 VV1 0x45  VL256 V0F38 V66  W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3461},
/*h(4)=4 VV1 0x45  VL128 V0F38 V66  W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3459},
/*h(22)=5 VV1 0x45  VL256 V0F38 V66  W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3077},
/*h(6)=6 VV1 0x45  VL128 V0F38 V66  W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3075},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x45  VL256 V0F38 V66 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3462}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x46_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x46  VL128 V0F38 V66 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3876},
/*h(20)=1 VV1 0x46  VL256 V0F38 V66  W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3877},
/*h(4)=2 VV1 0x46  VL128 V0F38 V66  W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3875},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x46  VL256 V0F38 V66 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3878}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x47_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x47  VL128 V0F38 V66 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2578},
/*h(23)=1 VV1 0x47  VL256 V0F38 V66 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3407},
/*h(7)=2 VV1 0x47  VL128 V0F38 V66 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3405},
/*h(20)=3 VV1 0x47  VL256 V0F38 V66  W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2579},
/*h(4)=4 VV1 0x47  VL128 V0F38 V66  W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2577},
/*h(22)=5 VV1 0x47  VL256 V0F38 V66  W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3406},
/*h(6)=6 VV1 0x47  VL128 V0F38 V66  W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3404},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x47  VL256 V0F38 V66 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2580}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x58_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x58 VL128 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3713},
/*h(93)=3 VV1 0x58 VL256 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3716},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x58 VL256 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 3715},
/*h(29)=7 VV1 0x58 VL128 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3714}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x59_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x59 VL128 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3190},
/*h(93)=3 VV1 0x59 VL256 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3193},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x59 VL256 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 3192},
/*h(29)=7 VV1 0x59 VL128 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3191}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x5a_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[1] = {
/*h(92)=0 VV1 0x5A VL256 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2452}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 92;
if(hidx == 0) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x78_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x78 VL128 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 2853},
/*h(93)=3 VV1 0x78 VL256 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 2856},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x78 VL256 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 2855},
/*h(29)=7 VV1 0x78 VL128 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 2854}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x79_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x79 VL128 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3241},
/*h(93)=3 VV1 0x79 VL256 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {93, 3244},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x79 VL256 V66 V0F38 W0 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {92, 3243},
/*h(29)=7 VV1 0x79 VL128 V66 V0F38 W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3242}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x8c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(20)=2 VV1 0x8C  VL256 V66 V0F38 W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3769},
/*h(4)=3 VV1 0x8C  VL128 V66 V0F38 W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3768},
/*h(22)=4 VV1 0x8C  VL256 V66 V0F38 W1  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3897},
/*h(6)=5 VV1 0x8C  VL128 V66 V0F38 W1  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3896},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x8e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(20)=2 VV1 0x8E  VL256 V66 V0F38 W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3771},
/*h(4)=3 VV1 0x8E  VL128 V66 V0F38 W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3770},
/*h(22)=4 VV1 0x8E  VL256 V66 V0F38 W1  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3899},
/*h(6)=5 VV1 0x8E  VL128 V66 V0F38 W1  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3898},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x90_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[15] = {
/*h(178)=0 VV1 0x90   VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {178, 2469},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(59)=6 VV1 0x90   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {59, 2454},
/*h(51)=7 VV1 0x90   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {51, 2470},
/*h(187)=8 VV1 0x90   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {187, 2453},
/*h(179)=9 VV1 0x90   VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {179, 2469},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(58)=12 VV1 0x90   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {58, 2454},
/*h(50)=13 VV1 0x90   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {50, 2470},
/*h(186)=14 VV1 0x90   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {186, 2453}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_ASZ_NONTERM_EASZ_MOD3_REXW_RM4_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 15ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x91_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[15] = {
/*h(178)=0 VV1 0x91   VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {178, 3524},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(59)=6 VV1 0x91   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {59, 3246},
/*h(51)=7 VV1 0x91   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {51, 3525},
/*h(187)=8 VV1 0x91   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {187, 3245},
/*h(179)=9 VV1 0x91   VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {179, 3524},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(58)=12 VV1 0x91   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {58, 3246},
/*h(50)=13 VV1 0x91   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {50, 3525},
/*h(186)=14 VV1 0x91   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {186, 3245}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_ASZ_NONTERM_EASZ_MOD3_REXW_RM4_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 15ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x92_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[15] = {
/*h(178)=0 VV1 0x92   VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {178, 3638},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(59)=6 VV1 0x92   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {59, 2518},
/*h(51)=7 VV1 0x92   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {51, 3639},
/*h(187)=8 VV1 0x92   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {187, 2517},
/*h(179)=9 VV1 0x92   VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {179, 3638},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(58)=12 VV1 0x92   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {58, 2518},
/*h(50)=13 VV1 0x92   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {50, 3639},
/*h(186)=14 VV1 0x92   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {186, 2517}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_ASZ_NONTERM_EASZ_MOD3_REXW_RM4_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 15ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x93_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[15] = {
/*h(178)=0 VV1 0x93   VL256 V66 V0F38   W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {178, 3679},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(59)=6 VV1 0x93   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {59, 2830},
/*h(51)=7 VV1 0x93   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {51, 3680},
/*h(187)=8 VV1 0x93   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {187, 2829},
/*h(179)=9 VV1 0x93   VL256 V66 V0F38   W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {179, 3679},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(58)=12 VV1 0x93   VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {58, 2830},
/*h(50)=13 VV1 0x93   VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_XMM() eanot16*/ {50, 3680},
/*h(186)=14 VV1 0x93   VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] RM=4 VMODRM_YMM() eanot16*/ {186, 2829}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_ASZ_NONTERM_EASZ_MOD3_REXW_RM4_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 15ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x96_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x96 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2718},
/*h(23)=1 VV1 0x96 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3547},
/*h(7)=2 VV1 0x96 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3545},
/*h(20)=3 VV1 0x96 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2719},
/*h(4)=4 VV1 0x96 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2717},
/*h(22)=5 VV1 0x96 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3546},
/*h(6)=6 VV1 0x96 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3544},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x96 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2720}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x97_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x97 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3103},
/*h(23)=1 VV1 0x97 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2864},
/*h(7)=2 VV1 0x97 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2862},
/*h(20)=3 VV1 0x97 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3104},
/*h(4)=4 VV1 0x97 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3102},
/*h(22)=5 VV1 0x97 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2863},
/*h(6)=6 VV1 0x97 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2861},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x97 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3105}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x98_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x98 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3066},
/*h(23)=1 VV1 0x98 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2691},
/*h(7)=2 VV1 0x98 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2689},
/*h(20)=3 VV1 0x98 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3067},
/*h(4)=4 VV1 0x98 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3065},
/*h(22)=5 VV1 0x98 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2690},
/*h(6)=6 VV1 0x98 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2688},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x98 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3068}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x99_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x99  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2455},
/*h(5)=1 VV1 0x99  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2456},
/*h(6)=2 VV1 0x99 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2646},
/*h(7)=3 VV1 0x99 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2647}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x9A VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3484},
/*h(23)=1 VV1 0x9A VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3239},
/*h(7)=2 VV1 0x9A VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3237},
/*h(20)=3 VV1 0x9A VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3485},
/*h(4)=4 VV1 0x9A VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3483},
/*h(22)=5 VV1 0x9A VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3238},
/*h(6)=6 VV1 0x9A VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3236},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x9A VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3486}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9b_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x9B  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3718},
/*h(5)=1 VV1 0x9B  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3719},
/*h(6)=2 VV1 0x9B V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3247},
/*h(7)=3 VV1 0x9B V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3248}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x9C VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2951},
/*h(23)=1 VV1 0x9C VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3165},
/*h(7)=2 VV1 0x9C VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3163},
/*h(20)=3 VV1 0x9C VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2952},
/*h(4)=4 VV1 0x9C VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2950},
/*h(22)=5 VV1 0x9C VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3164},
/*h(6)=6 VV1 0x9C VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3162},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x9C VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2953}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9d_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x9D  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3683},
/*h(5)=1 VV1 0x9D  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3684},
/*h(6)=2 VV1 0x9D V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3805},
/*h(7)=3 VV1 0x9D V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3806}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x9E VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2606},
/*h(23)=1 VV1 0x9E VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3372},
/*h(7)=2 VV1 0x9E VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3370},
/*h(20)=3 VV1 0x9E VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2607},
/*h(4)=4 VV1 0x9E VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2605},
/*h(22)=5 VV1 0x9E VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3371},
/*h(6)=6 VV1 0x9E VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3369},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x9E VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2608}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0x9f_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x9F  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2841},
/*h(5)=1 VV1 0x9F  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2842},
/*h(6)=2 VV1 0x9F V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2622},
/*h(7)=3 VV1 0x9F V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2623}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xA6 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2767},
/*h(23)=1 VV1 0xA6 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2375},
/*h(7)=2 VV1 0xA6 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2373},
/*h(20)=3 VV1 0xA6 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2768},
/*h(4)=4 VV1 0xA6 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2766},
/*h(22)=5 VV1 0xA6 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2374},
/*h(6)=6 VV1 0xA6 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2372},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xA6 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2769}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa7_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xA7 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3710},
/*h(23)=1 VV1 0xA7 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2695},
/*h(7)=2 VV1 0xA7 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2693},
/*h(20)=3 VV1 0xA7 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3711},
/*h(4)=4 VV1 0xA7 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3709},
/*h(22)=5 VV1 0xA7 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2694},
/*h(6)=6 VV1 0xA7 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2692},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xA7 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3712}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xA8 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3629},
/*h(23)=1 VV1 0xA8 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3392},
/*h(7)=2 VV1 0xA8 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3390},
/*h(20)=3 VV1 0xA8 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3630},
/*h(4)=4 VV1 0xA8 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3628},
/*h(22)=5 VV1 0xA8 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3391},
/*h(6)=6 VV1 0xA8 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3389},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xA8 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3631}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xa9_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xA9  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2444},
/*h(5)=1 VV1 0xA9  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2445},
/*h(6)=2 VV1 0xA9  V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2505},
/*h(7)=3 VV1 0xA9  V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2506}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xaa_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xAA VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3277},
/*h(23)=1 VV1 0xAA VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3727},
/*h(7)=2 VV1 0xAA VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3725},
/*h(20)=3 VV1 0xAA VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3278},
/*h(4)=4 VV1 0xAA VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3276},
/*h(22)=5 VV1 0xAA VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3726},
/*h(6)=6 VV1 0xAA VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3724},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xAA VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3279}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xab_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xAB  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3457},
/*h(5)=1 VV1 0xAB  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3458},
/*h(6)=2 VV1 0xAB  V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2463},
/*h(7)=3 VV1 0xAB  V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2464}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xac_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xAC VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2410},
/*h(23)=1 VV1 0xAC VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3359},
/*h(7)=2 VV1 0xAC VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3357},
/*h(20)=3 VV1 0xAC VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2411},
/*h(4)=4 VV1 0xAC VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2409},
/*h(22)=5 VV1 0xAC VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3358},
/*h(6)=6 VV1 0xAC VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3356},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xAC VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2412}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xad_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xAD  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2407},
/*h(5)=1 VV1 0xAD  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2408},
/*h(6)=2 VV1 0xAD  V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2815},
/*h(7)=3 VV1 0xAD  V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2816}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xae_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xAE VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2706},
/*h(23)=1 VV1 0xAE VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3050},
/*h(7)=2 VV1 0xAE VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3048},
/*h(20)=3 VV1 0xAE VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2707},
/*h(4)=4 VV1 0xAE VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2705},
/*h(22)=5 VV1 0xAE VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3049},
/*h(6)=6 VV1 0xAE VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3047},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xAE VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2708}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xaf_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xAF  V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3090},
/*h(5)=1 VV1 0xAF  V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3091},
/*h(6)=2 VV1 0xAF  V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3693},
/*h(7)=3 VV1 0xAF  V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3694}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xB6 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2394},
/*h(23)=1 VV1 0xB6 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2757},
/*h(7)=2 VV1 0xB6 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2755},
/*h(20)=3 VV1 0xB6 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2395},
/*h(4)=4 VV1 0xB6 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2393},
/*h(22)=5 VV1 0xB6 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2756},
/*h(6)=6 VV1 0xB6 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2754},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xB6 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2396}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb7_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xB7 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3651},
/*h(23)=1 VV1 0xB7 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2902},
/*h(7)=2 VV1 0xB7 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2900},
/*h(20)=3 VV1 0xB7 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3652},
/*h(4)=4 VV1 0xB7 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3650},
/*h(22)=5 VV1 0xB7 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2901},
/*h(6)=6 VV1 0xB7 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2899},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xB7 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3653}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xB8 VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3737},
/*h(23)=1 VV1 0xB8 VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3618},
/*h(7)=2 VV1 0xB8 VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3616},
/*h(20)=3 VV1 0xB8 VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3738},
/*h(4)=4 VV1 0xB8 VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3736},
/*h(22)=5 VV1 0xB8 VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3617},
/*h(6)=6 VV1 0xB8 VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3615},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xB8 VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3739}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xb9_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xB9 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2777},
/*h(5)=1 VV1 0xB9 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2778},
/*h(6)=2 VV1 0xB9 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2567},
/*h(7)=3 VV1 0xB9 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2568}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xba_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xBA VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2665},
/*h(23)=1 VV1 0xBA VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3637},
/*h(7)=2 VV1 0xBA VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3635},
/*h(20)=3 VV1 0xBA VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2666},
/*h(4)=4 VV1 0xBA VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2664},
/*h(22)=5 VV1 0xBA VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3636},
/*h(6)=6 VV1 0xBA VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3634},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xBA VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2667}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbb_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xBB V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3023},
/*h(5)=1 VV1 0xBB V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3024},
/*h(6)=2 VV1 0xBB V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3131},
/*h(7)=3 VV1 0xBB V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3132}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbc_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xBC VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3749},
/*h(23)=1 VV1 0xBC VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 2598},
/*h(7)=2 VV1 0xBC VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 2596},
/*h(20)=3 VV1 0xBC VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3750},
/*h(4)=4 VV1 0xBC VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3748},
/*h(22)=5 VV1 0xBC VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 2597},
/*h(6)=6 VV1 0xBC VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 2595},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xBC VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3751}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbd_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xBD V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3821},
/*h(5)=1 VV1 0xBD V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3822},
/*h(6)=2 VV1 0xBD V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2511},
/*h(7)=3 VV1 0xBD V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {2512}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbe_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0xBE VL128 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2439},
/*h(23)=1 VV1 0xBE VL256 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {23, 3478},
/*h(7)=2 VV1 0xBE VL128 V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {7, 3476},
/*h(20)=3 VV1 0xBE VL256 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 2440},
/*h(4)=4 VV1 0xBE VL128 V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2438},
/*h(22)=5 VV1 0xBE VL256 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {22, 3477},
/*h(6)=6 VV1 0xBE VL128 V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {6, 3475},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0xBE VL256 V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 2441}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xbf_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0xBF V66 V0F38 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3313},
/*h(5)=1 VV1 0xBF V66 V0F38 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3314},
/*h(6)=2 VV1 0xBF V66 V0F38 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {3045},
/*h(7)=3 VV1 0xBF V66 V0F38 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3046}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xcf_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0xCF V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0*/ {5, 3642},
/*h(20)=1 VV1 0xCF V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W0*/ {20, 3645},
/*h(4)=2 VV1 0xCF V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W0*/ {4, 3643},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0xCF V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W0*/ {21, 3644}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdb_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0xDB VL128 V66 V0F38 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2985},
/*h(15)=1 VV1 0xDB VL128 V66 V0F38 NOVSR MOD[0b11] MOD=3  REG[rrr] RM[nnn]*/ {2984}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdc_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDC V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256*/ {10, 2745},
/*h(2)=1 VV1 0xDC V66 V0F38  MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() VL128*/ {2, 2743},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDC V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256*/ {11, 2744},
/*h(3)=4 VV1 0xDC V66 V0F38  MOD[0b11] MOD=3  REG[rrr] RM[nnn] VL128*/ {3, 2742}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdd_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDD V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256*/ {10, 3799},
/*h(2)=1 VV1 0xDD  V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() VL128*/ {2, 3797},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDD V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256*/ {11, 3798},
/*h(3)=4 VV1 0xDD V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn] VL128*/ {3, 3796}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xde_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDE V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256*/ {10, 2594},
/*h(2)=1 VV1 0xDE V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() VL128*/ {2, 2592},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDE V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256*/ {11, 2593},
/*h(3)=4 VV1 0xDE V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn] VL128*/ {3, 2591}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xdf_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0xDF V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256*/ {10, 3861},
/*h(2)=1 VV1 0xDF V66 V0F38 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() VL128*/ {2, 3859},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0xDF V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256*/ {11, 3860},
/*h(3)=4 VV1 0xDF V66 V0F38 MOD[0b11] MOD=3  REG[rrr] RM[nnn] VL128*/ {3, 3858}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[12] = {
/*h(0)=0 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 3836},
/*h(8)=1 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 3836},
/*h(5)=2 VV1 0xF2 V0F38 VNP  W0 mode64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 3839},
/*h(13)=3 VV1 0xF2 V0F38 VNP W1 VL128  mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 3841},
/*h(4)=4 VV1 0xF2 V0F38 VNP  W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 3837},
/*h(12)=5 VV1 0xF2 V0F38 VNP W1 VL128  mode64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 3840},
/*h(3)=6 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 3838},
/*h(11)=7 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 3838},
/*h(2)=8 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 3836},
/*h(10)=9 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 3836},
/*h(1)=10 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 3838},
/*h(9)=11 VV1 0xF2 V0F38 VNP  not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 3838}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEX_PREFIX_VL(d);
hidx = ((10*key % 67) % 12);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf3_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[72] = {
/*h(89)=0 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b011] RM[nnn]*/ {89, 3699},
/*h(18)=1 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {18, 3307},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(72)=4 VV1 0xF3 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM()*/ {72, 3249},
/*h(90)=5 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {90, 3697},
/*h(19)=6 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b010] RM[nnn]*/ {19, 3309},
/*empty slot1 */ {0,0},
/*h(16)=8 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {16, 3307},
/*h(73)=9 VV1 0xF3 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[0b001] RM[nnn]*/ {73, 3251},
/*h(91)=10 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b011] RM[nnn]*/ {91, 3699},
/*h(20)=11 VV1 0xF3 V0F38 VNP W0 mode64 VL128 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {20, 3308},
/*h(88)=12 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {88, 3697},
/*h(17)=13 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b010] RM[nnn]*/ {17, 3309},
/*h(74)=14 VV1 0xF3 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM()*/ {74, 3249},
/*h(92)=15 VV1 0xF3 V0F38 VNP W1 VL128 mode64 MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {92, 3701},
/*h(21)=16 VV1 0xF3 V0F38 VNP W0 mode64 VL128 MOD[0b11] MOD=3 REG[0b010] RM[nnn]*/ {21, 3310},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(75)=19 VV1 0xF3 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[0b001] RM[nnn]*/ {75, 3251},
/*h(93)=20 VV1 0xF3 V0F38 VNP W1 VL128 mode64 MOD[0b11] MOD=3 REG[0b011] RM[nnn]*/ {93, 3702},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(76)=24 VV1 0xF3 V0F38 VNP W1 VL128 mode64 MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM()*/ {76, 3253},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(77)=29 VV1 0xF3 V0F38 VNP W1 VL128 mode64 MOD[0b11] MOD=3 REG[0b001] RM[nnn]*/ {77, 3254},
/*empty slot1 */ {0,0},
/*h(24)=31 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {24, 3697},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(25)=36 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b011] RM[nnn]*/ {25, 3699},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(8)=40 VV1 0xF3 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM()*/ {8, 3249},
/*h(26)=41 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {26, 3697},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(80)=44 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {80, 3307},
/*h(9)=45 VV1 0xF3 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[0b001] RM[nnn]*/ {9, 3251},
/*h(27)=46 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b011] RM[nnn]*/ {27, 3699},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(81)=49 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b010] RM[nnn]*/ {81, 3309},
/*h(10)=50 VV1 0xF3 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM()*/ {10, 3249},
/*h(28)=51 VV1 0xF3 V0F38 VNP W0 mode64 VL128 MOD[mm] MOD!=3 REG[0b011] RM[nnn] MODRM()*/ {28, 3698},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(82)=54 VV1 0xF3 V0F38 VNP not64 VL128 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {82, 3307},
/*h(11)=55 VV1 0xF3 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[0b001] RM[nnn]*/ {11, 3251},
/*h(29)=56 VV1 0xF3 V0F38 VNP W0 mode64 VL128 MOD[0b11] MOD=3 REG[0b011] RM[nnn]*/ {29, 3700},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(83)=59 VV1 0xF3 V0F38 VNP not64 VL128 MOD[0b11] MOD=3 REG[0b010] RM[nnn]*/ {83, 3309},
/*h(12)=60 VV1 0xF3 V0F38 VNP W0 mode64 VL128  MOD[mm] MOD!=3 REG[0b001] RM[nnn] MODRM()*/ {12, 3250},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(84)=64 VV1 0xF3 V0F38 VNP W1 VL128 mode64 MOD[mm] MOD!=3 REG[0b010] RM[nnn] MODRM()*/ {84, 3311},
/*h(13)=65 VV1 0xF3 V0F38 VNP W0 mode64 VL128  MOD[0b11] MOD=3 REG[0b001] RM[nnn]*/ {13, 3252},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(85)=69 VV1 0xF3 V0F38 VNP W1 VL128 mode64 MOD[0b11] MOD=3 REG[0b010] RM[nnn]*/ {85, 3312},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REG_REXW_VEX_PREFIX_VL(d);
hidx = ((5*key % 89) % 72);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf5_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[67] = {
/*h(0)=0 VV1 0xF5 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2624},
/*h(45)=1 VV1 0xF5 V0F38 VF2 W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {45, 3347},
/*empty slot1 */ {0,0},
/*h(1)=3 VV1 0xF5 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2626},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(2)=6 VV1 0xF5 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2624},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(3)=9 VV1 0xF5 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2626},
/*h(48)=10 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {48, 3301},
/*empty slot1 */ {0,0},
/*h(4)=12 VV1 0xF5 V0F38 VNP W0 mode64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2625},
/*h(49)=13 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 3303},
/*empty slot1 */ {0,0},
/*h(5)=15 VV1 0xF5 V0F38 VNP W0 mode64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2627},
/*h(50)=16 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {50, 3301},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(51)=19 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 3303},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(52)=22 VV1 0xF5 V0F38 VF3 W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {52, 3302},
/*empty slot1 */ {0,0},
/*h(8)=24 VV1 0xF5 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2624},
/*h(53)=25 VV1 0xF5 V0F38 VF3 W0 mode64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 3304},
/*empty slot1 */ {0,0},
/*h(9)=27 VV1 0xF5 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2626},
/*empty slot1 */ {0,0},
/*h(32)=29 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {32, 3342},
/*h(10)=30 VV1 0xF5 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2624},
/*empty slot1 */ {0,0},
/*h(33)=32 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {33, 3344},
/*h(11)=33 VV1 0xF5 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2626},
/*h(56)=34 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 3301},
/*h(34)=35 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {34, 3342},
/*h(12)=36 VV1 0xF5 V0F38 VNP W1 VL128 mode64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2628},
/*h(57)=37 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 3303},
/*h(35)=38 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {35, 3344},
/*h(13)=39 VV1 0xF5 V0F38 VNP W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 2629},
/*h(58)=40 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 3301},
/*h(36)=41 VV1 0xF5 V0F38 VF2 W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {36, 3343},
/*empty slot1 */ {0,0},
/*h(59)=43 VV1 0xF5 V0F38 VF3 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 3303},
/*h(37)=44 VV1 0xF5 V0F38 VF2 W0 mode64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {37, 3345},
/*empty slot1 */ {0,0},
/*h(60)=46 VV1 0xF5 V0F38 VF3 W1 VL128 mode64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 3305},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(61)=49 VV1 0xF5 V0F38 VF3 W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 3306},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(40)=53 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {40, 3342},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(41)=56 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {41, 3344},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(42)=59 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {42, 3342},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(43)=62 VV1 0xF5 V0F38 VF2 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {43, 3344},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(44)=65 VV1 0xF5 V0F38 VF2 W1 VL128 mode64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {44, 3346},
/*empty slot1 */ {0,0}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEX_PREFIX_VL(d);
hidx = (3*key % 67);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf6_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[18] = {
/*h(34)=0 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {34, 2660},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(44)=3 VV1 0xF6 VF2 V0F38 W1 VL128 mode64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {44, 2663},
/*h(36)=4 VV1 0xF6 VF2 V0F38 W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {36, 2661},
/*empty slot1 */ {0,0},
/*h(41)=6 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {41, 2658},
/*h(33)=7 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {33, 2658},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(43)=10 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {43, 2658},
/*h(35)=11 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {35, 2658},
/*h(40)=12 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {40, 2660},
/*h(32)=13 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {32, 2660},
/*h(45)=14 VV1 0xF6 VF2 V0F38 W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {45, 2662},
/*h(37)=15 VV1 0xF6 VF2 V0F38 W0 mode64 VL128 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {37, 2659},
/*empty slot1 */ {0,0},
/*h(42)=17 VV1 0xF6 VF2 V0F38 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {42, 2660}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 18ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F38_opcode0xf7_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[67] = {
/*h(0)=0 VV1 0xF7 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {0, 2991},
/*h(45)=1 VV1 0xF7 V0F38 VF2  W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {45, 2852},
/*empty slot1 */ {0,0},
/*h(1)=3 VV1 0xF7 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {1, 2993},
/*empty slot1 */ {0,0},
/*h(24)=5 VV1 0xF7 V0F38 V66 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {24, 3530},
/*h(2)=6 VV1 0xF7 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {2, 2991},
/*empty slot1 */ {0,0},
/*h(25)=8 VV1 0xF7 V0F38 V66 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {25, 3532},
/*h(3)=9 VV1 0xF7 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {3, 2993},
/*h(48)=10 VV1 0xF7 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {48, 3518},
/*h(26)=11 VV1 0xF7 V0F38 V66 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {26, 3530},
/*h(4)=12 VV1 0xF7 V0F38 VNP W0 mode64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {4, 2992},
/*h(49)=13 VV1 0xF7 V0F38 VF3 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {49, 3520},
/*h(27)=14 VV1 0xF7 V0F38 V66 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {27, 3532},
/*h(5)=15 VV1 0xF7 V0F38 VNP W0 mode64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {5, 2994},
/*h(50)=16 VV1 0xF7 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {50, 3518},
/*h(28)=17 VV1 0xF7 V0F38 V66  W1 VL128 mode64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {28, 3534},
/*empty slot1 */ {0,0},
/*h(51)=19 VV1 0xF7 V0F38 VF3 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {51, 3520},
/*h(29)=20 VV1 0xF7 V0F38 V66  W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {29, 3535},
/*empty slot1 */ {0,0},
/*h(52)=22 VV1 0xF7 V0F38 VF3 W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {52, 3519},
/*empty slot1 */ {0,0},
/*h(8)=24 VV1 0xF7 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {8, 2991},
/*h(53)=25 VV1 0xF7 V0F38 VF3 W0 mode64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {53, 3521},
/*empty slot1 */ {0,0},
/*h(9)=27 VV1 0xF7 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {9, 2993},
/*empty slot1 */ {0,0},
/*h(32)=29 VV1 0xF7 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {32, 2847},
/*h(10)=30 VV1 0xF7 V0F38 VNP not64 VL128  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {10, 2991},
/*empty slot1 */ {0,0},
/*h(33)=32 VV1 0xF7 V0F38 VF2 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {33, 2849},
/*h(11)=33 VV1 0xF7 V0F38 VNP not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {11, 2993},
/*h(56)=34 VV1 0xF7 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {56, 3518},
/*h(34)=35 VV1 0xF7 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {34, 2847},
/*h(12)=36 VV1 0xF7 V0F38 VNP W1 VL128 mode64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {12, 2995},
/*h(57)=37 VV1 0xF7 V0F38 VF3 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {57, 3520},
/*h(35)=38 VV1 0xF7 V0F38 VF2 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {35, 2849},
/*h(13)=39 VV1 0xF7 V0F38 VNP W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {13, 2996},
/*h(58)=40 VV1 0xF7 V0F38 VF3 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {58, 3518},
/*h(36)=41 VV1 0xF7 V0F38 VF2 W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {36, 2848},
/*empty slot1 */ {0,0},
/*h(59)=43 VV1 0xF7 V0F38 VF3 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {59, 3520},
/*h(37)=44 VV1 0xF7 V0F38 VF2 W0 mode64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {37, 2850},
/*empty slot1 */ {0,0},
/*h(60)=46 VV1 0xF7 V0F38 VF3  W1 VL128 mode64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {60, 3522},
/*empty slot1 */ {0,0},
/*h(16)=48 VV1 0xF7 V0F38 V66 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {16, 3530},
/*h(61)=49 VV1 0xF7 V0F38 VF3  W1 VL128 mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {61, 3523},
/*empty slot1 */ {0,0},
/*h(17)=51 VV1 0xF7 V0F38 V66 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {17, 3532},
/*empty slot1 */ {0,0},
/*h(40)=53 VV1 0xF7 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {40, 2847},
/*h(18)=54 VV1 0xF7 V0F38 V66 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {18, 3530},
/*empty slot1 */ {0,0},
/*h(41)=56 VV1 0xF7 V0F38 VF2 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {41, 2849},
/*h(19)=57 VV1 0xF7 V0F38 V66 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {19, 3532},
/*empty slot1 */ {0,0},
/*h(42)=59 VV1 0xF7 V0F38 VF2 not64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {42, 2847},
/*h(20)=60 VV1 0xF7 V0F38 V66 W0 mode64 VL128 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {20, 3531},
/*empty slot1 */ {0,0},
/*h(43)=62 VV1 0xF7 V0F38 VF2 not64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {43, 2849},
/*h(21)=63 VV1 0xF7 V0F38 V66 W0 mode64 VL128  MOD[0b11] MOD=3 REG[rrr] RM[nnn]*/ {21, 3533},
/*empty slot1 */ {0,0},
/*h(44)=65 VV1 0xF7 V0F38 VF2  W1 VL128 mode64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM()*/ {44, 2851},
/*empty slot1 */ {0,0}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEX_PREFIX_VL(d);
hidx = (3*key % 67);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x0_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(94)=0 VV1 0x00 VL256 V0F3A V66 W1 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2931},
/*h(95)=1 VV1 0x00 VL256 V0F3A V66 W1 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2932}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 94;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x1_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(94)=0 VV1 0x01 VL256 V0F3A V66 W1 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2642},
/*h(95)=1 VV1 0x01 VL256 V0F3A V66 W1 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2643}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 94;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x2_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x02  VL128 V66 V0F3A W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {5, 2787},
/*h(20)=1 VV1 0x02  VL256 V66 V0F3A W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {20, 2788},
/*h(4)=2 VV1 0x02  VL128 V66 V0F3A W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {4, 2786},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x02  VL256 V66 V0F3A W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {21, 2789}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x04 VL128 V66 V0F3A norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {28, 2946},
/*h(93)=3 VV1 0x04 VL256 V66 V0F3A norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {93, 2949},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x04 VL256 V66 V0F3A norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {92, 2948},
/*h(29)=7 VV1 0x04 VL128 V66 V0F3A norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {29, 2947}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x05  VL128 V66 V0F3A norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {28, 3141},
/*h(93)=3 VV1 0x05  VL256 V66 V0F3A norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {93, 3144},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x05  VL256 V66 V0F3A norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {92, 3143},
/*h(29)=7 VV1 0x05  VL128 V66 V0F3A norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {29, 3142}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x06 VL256 V66 V0F3A norexw_prefix  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2644},
/*h(21)=1 VV1 0x06 VL256 V66 V0F3A norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2645}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = key - 20;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x8_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x08  VL256 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {47, 2402},
/*h(15)=1 VV1 0x08  VL128 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {15, 2400},
/*h(46)=2 VV1 0x08  VL256 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {46, 2401},
/*h(14)=3 VV1 0x08  VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {14, 2399},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x9_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(47)=0 VV1 0x09  VL256 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {47, 3260},
/*h(15)=1 VV1 0x09  VL128 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {15, 3258},
/*h(46)=2 VV1 0x09  VL256 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {46, 3259},
/*h(14)=3 VV1 0x09  VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {14, 3257},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xa_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(2)=0 VV1 0x0A  V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2553},
/*h(3)=1 VV1 0x0A  V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2554}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX(d);
hidx = key - 2;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xb_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(2)=0 VV1 0x0B  V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2370},
/*h(3)=1 VV1 0x0B  V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2371}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX(d);
hidx = key - 2;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xc_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x0C  VL256 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 3336},
/*h(2)=1 VV1 0x0C  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 3334},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x0C  VL256 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 3337},
/*h(3)=4 VV1 0x0C  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 3335}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xd_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x0D  VL256 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 3419},
/*h(2)=1 VV1 0x0D  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 3417},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x0D  VL256 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 3420},
/*h(3)=4 VV1 0x0D  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 3418}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xe_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x0E  VL256 V66 V0F3A  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 3036},
/*h(2)=1 VV1 0x0E  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 3034},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x0E  VL256 V66 V0F3A  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 3037},
/*h(3)=4 VV1 0x0E  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 3035}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xf_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x0F  VL256 V66 V0F3A  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 2845},
/*h(2)=1 VV1 0x0F  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 2843},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x0F  VL256 V66 V0F3A  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 2846},
/*h(3)=4 VV1 0x0F  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 2844}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x14_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0x14  VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3626},
/*h(15)=1 VV1 0x14  VL128 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3627}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x15_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0x15  VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2549},
/*h(15)=1 VV1 0x15  VL128 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2550}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x16_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(123)=0 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {123, 2794},
/*h(115)=1 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {115, 2794},
/*h(120)=2 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {120, 2793},
/*h(112)=3 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {112, 2793},
/*h(125)=4 VV1 0x16  VL128 V66 V0F3A mode64 rexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {125, 3374},
/*h(117)=5 VV1 0x16 VL128 V66 V0F3A mode64 norexw_prefix NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {117, 2792},
/*h(122)=6 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {122, 2793},
/*h(114)=7 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {114, 2793},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(124)=10 VV1 0x16  VL128 V66 V0F3A mode64 rexw_prefix  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {124, 3373},
/*h(116)=11 VV1 0x16 VL128 V66 V0F3A mode64 norexw_prefix NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {116, 2791},
/*empty slot1 */ {0,0},
/*h(121)=13 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {121, 2794},
/*h(113)=14 VV1 0x16 VL128 V66 V0F3A not64  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {113, 2794},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x17_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0x17  VL128 V66 V0F3A  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3255},
/*h(15)=1 VV1 0x17  VL128 V66 V0F3A  NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3256}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x18_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x18  norexw_prefix VL256 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3394},
/*h(21)=1 VV1 0x18  norexw_prefix  VL256 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3395}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = key - 20;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x19_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(92)=0 VV1 0x19  norexw_prefix VL256 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3508},
/*h(93)=1 VV1 0x19  norexw_prefix VL256 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3509}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 92;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x1d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=2 VV1 0x1D VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8() W0*/ {28, 2630},
/*h(93)=3 VV1 0x1D VL256 V66 V0F3A NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8() W0*/ {93, 2633},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(92)=6 VV1 0x1D VL256 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8() W0*/ {92, 2632},
/*h(29)=7 VV1 0x1D VL128 V66 V0F3A NOVSR  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8() W0*/ {29, 2631}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x20_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(2)=0 VV1 0x20  VL128 V66 V0F3A  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3603},
/*h(3)=1 VV1 0x20  VL128 V66 V0F3A  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3604}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = key - 2;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x21_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(2)=0 VV1 0x21  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3029},
/*h(3)=1 VV1 0x21  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3030}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = key - 2;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x22_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[18] = {
/*empty slot1 */ {0,0},
/*h(26)=1 VV1 0x22  VL128 V66 V0F3A not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {26, 2489},
/*h(18)=2 VV1 0x22  VL128 V66 V0F3A not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {18, 2489},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(28)=5 VV1 0x22  VL128 V66 V0F3A mode64 rexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {28, 2668},
/*h(20)=6 VV1 0x22  VL128 V66 V0F3A mode64 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {20, 2487},
/*empty slot1 */ {0,0},
/*h(25)=8 VV1 0x22  VL128 V66 V0F3A not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {25, 2490},
/*h(17)=9 VV1 0x22  VL128 V66 V0F3A not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {17, 2490},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(27)=12 VV1 0x22  VL128 V66 V0F3A not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {27, 2490},
/*h(19)=13 VV1 0x22  VL128 V66 V0F3A not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {19, 2490},
/*h(24)=14 VV1 0x22  VL128 V66 V0F3A not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {24, 2489},
/*h(16)=15 VV1 0x22  VL128 V66 V0F3A not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {16, 2489},
/*h(29)=16 VV1 0x22  VL128 V66 V0F3A mode64 rexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {29, 2669},
/*h(21)=17 VV1 0x22  VL128 V66 V0F3A mode64 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {21, 2488}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 18ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x30_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(31)=0 VV1 0x30 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR UIMM8()*/ {31, 3134},
/*h(29)=1 VV1 0x30 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR UIMM8()*/ {29, 2653}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x31_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(31)=0 VV1 0x31 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR UIMM8()*/ {31, 3448},
/*h(29)=1 VV1 0x31 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR UIMM8()*/ {29, 3240}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x32_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(31)=0 VV1 0x32 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR UIMM8()*/ {31, 3194},
/*h(29)=1 VV1 0x32 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR UIMM8()*/ {29, 3133}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x33_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(31)=0 VV1 0x33 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1  NOVSR UIMM8()*/ {31, 2790},
/*h(29)=1 VV1 0x33 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W0  NOVSR UIMM8()*/ {29, 2437}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-1));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x38_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x38  VL256 V66 V0F3A W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3506},
/*h(21)=1 VV1 0x38  VL256 V66 V0F3A W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3507}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = key - 20;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x39_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(92)=0 VV1 0x39  VL256 V66 V0F3A W0  NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3433},
/*h(93)=1 VV1 0x39  VL256 V66 V0F3A W0 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3434}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 92;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x40_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x40  VL256 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 3489},
/*h(2)=1 VV1 0x40  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 3487},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x40  VL256 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 3490},
/*h(3)=4 VV1 0x40  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 3488}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x41_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(2)=0 VV1 0x41  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {3043},
/*h(3)=1 VV1 0x41  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3044}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = key - 2;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x42_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x42  VL256 V66 V0F3A  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {10, 2682},
/*h(2)=1 VV1 0x42  VL128 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2, 2680},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x42  VL256 V66 V0F3A  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {11, 2683},
/*h(3)=4 VV1 0x42  VL128 V66 V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {3, 2681}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x44_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(10)=0 VV1 0x44 V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256     UIMM8()*/ {10, 2700},
/*h(2)=1 VV1 0x44  V66 V0F3A  MOD[mm]  MOD!=3 REG[rrr] RM[nnn] MODRM() VL128 UIMM8()*/ {2, 2698},
/*empty slot1 */ {0,0},
/*h(11)=3 VV1 0x44 V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256     UIMM8()*/ {11, 2699},
/*h(3)=4 VV1 0x44  V66 V0F3A  MOD[0b11]  MOD=3  REG[rrr] RM[nnn] VL128 UIMM8()*/ {3, 2697}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x46_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(20)=0 VV1 0x46  VL256 V66 V0F3A W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2906},
/*h(21)=1 VV1 0x46  VL256 V66 V0F3A W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2907}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = key - 20;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x48_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x48 VL128 V66 V0F3A W0  MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3167},
/*h(23)=1 VV1 0x48 VL256 V66 V0F3A W1   MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3173},
/*h(7)=2 VV1 0x48 VL128 V66 V0F3A W1  MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3171},
/*h(20)=3 VV1 0x48 VL256 V66 V0F3A W0   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3168},
/*h(4)=4 VV1 0x48 VL128 V66 V0F3A W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3166},
/*h(22)=5 VV1 0x48 VL256 V66 V0F3A W1   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3172},
/*h(6)=6 VV1 0x48 VL128 V66 V0F3A W1  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3170},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x48 VL256 V66 V0F3A W0   MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3169}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x49_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x49 VL128 V66 V0F3A W0  MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3290},
/*h(23)=1 VV1 0x49 VL256 V66 V0F3A W1   MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3296},
/*h(7)=2 VV1 0x49 VL128 V66 V0F3A W1  MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3294},
/*h(20)=3 VV1 0x49 VL256 V66 V0F3A W0   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3291},
/*h(4)=4 VV1 0x49 VL128 V66 V0F3A W0  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3289},
/*h(22)=5 VV1 0x49 VL256 V66 V0F3A W1   MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3295},
/*h(6)=6 VV1 0x49 VL128 V66 V0F3A W1  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3293},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x49 VL256 V66 V0F3A W0   MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3292}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4a_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x4A   V66 V0F3A VL128 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3039},
/*h(20)=1 VV1 0x4A   V66 V0F3A VL256 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3040},
/*h(4)=2 VV1 0x4A   V66 V0F3A VL128 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3038},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x4A   V66 V0F3A VL256 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3041}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4b_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x4B   V66 V0F3A VL128 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 2655},
/*h(20)=1 VV1 0x4B   V66 V0F3A VL256 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 2656},
/*h(4)=2 VV1 0x4B   V66 V0F3A VL128 norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 2654},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x4B   V66 V0F3A VL256 norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 2657}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x4c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[5] = {
/*h(5)=0 VV1 0x4C   VL128 V66 V0F3A norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3853},
/*h(20)=1 VV1 0x4C   VL256 V66 V0F3A norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3854},
/*h(4)=2 VV1 0x4C   VL128 V66 V0F3A norexw_prefix MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3852},
/*empty slot1 */ {0,0},
/*h(21)=4 VV1 0x4C   VL256 V66 V0F3A norexw_prefix MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3855}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 5ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x5C V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3083},
/*h(23)=1 VV1 0x5C V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3089},
/*h(7)=2 VV1 0x5C V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3085},
/*h(20)=3 VV1 0x5C V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3086},
/*h(4)=4 VV1 0x5C V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3082},
/*h(22)=5 VV1 0x5C V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3088},
/*h(6)=6 VV1 0x5C V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3084},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x5C V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3087}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x5D V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3107},
/*h(23)=1 VV1 0x5D V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3113},
/*h(7)=2 VV1 0x5D V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3109},
/*h(20)=3 VV1 0x5D V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3110},
/*h(4)=4 VV1 0x5D V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3106},
/*h(22)=5 VV1 0x5D V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3112},
/*h(6)=6 VV1 0x5D V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3108},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x5D V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3111}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5e_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x5E V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 2362},
/*h(23)=1 VV1 0x5E V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 2368},
/*h(7)=2 VV1 0x5E V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 2364},
/*h(20)=3 VV1 0x5E V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 2365},
/*h(4)=4 VV1 0x5E V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 2361},
/*h(22)=5 VV1 0x5E V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 2367},
/*h(6)=6 VV1 0x5E V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 2363},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x5E V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 2366}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x5f_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x5F V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3901},
/*h(23)=1 VV1 0x5F V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3907},
/*h(7)=2 VV1 0x5F V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3903},
/*h(20)=3 VV1 0x5F V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3904},
/*h(4)=4 VV1 0x5F V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3900},
/*h(22)=5 VV1 0x5F V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3906},
/*h(6)=6 VV1 0x5F V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3902},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x5F V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3905}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x60_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(123)=0 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {123, 2808},
/*h(115)=1 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {115, 2808},
/*h(120)=2 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {120, 2807},
/*h(112)=3 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {112, 2807},
/*h(125)=4 VV1 0x60  VL128 V66 V0F3A NOVSR mode64 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {125, 3539},
/*h(117)=5 VV1 0x60  VL128 V66 V0F3A NOVSR mode64 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {117, 2810},
/*h(122)=6 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {122, 2807},
/*h(114)=7 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {114, 2807},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(124)=10 VV1 0x60  VL128 V66 V0F3A NOVSR mode64 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {124, 3538},
/*h(116)=11 VV1 0x60  VL128 V66 V0F3A NOVSR mode64 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {116, 2809},
/*empty slot1 */ {0,0},
/*h(121)=13 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {121, 2808},
/*h(113)=14 VV1 0x60  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {113, 2808},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x61_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(123)=0 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {123, 2882},
/*h(115)=1 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {115, 2882},
/*h(120)=2 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {120, 2881},
/*h(112)=3 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {112, 2881},
/*h(125)=4 VV1 0x61  VL128 V66 V0F3A NOVSR mode64 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {125, 2384},
/*h(117)=5 VV1 0x61  VL128 V66 V0F3A NOVSR mode64 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {117, 2884},
/*h(122)=6 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {122, 2881},
/*h(114)=7 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {114, 2881},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(124)=10 VV1 0x61  VL128 V66 V0F3A NOVSR mode64 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {124, 2383},
/*h(116)=11 VV1 0x61  VL128 V66 V0F3A NOVSR mode64 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {116, 2883},
/*empty slot1 */ {0,0},
/*h(121)=13 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {121, 2882},
/*h(113)=14 VV1 0x61  VL128 V66 V0F3A NOVSR not64 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {113, 2882},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x62_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0x62  VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2770},
/*h(15)=1 VV1 0x62  VL128 V66 V0F3A NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {2771}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x63_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[17] = {
/*h(123)=0 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {123, 3013},
/*h(115)=1 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {115, 3013},
/*h(120)=2 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {120, 3012},
/*h(112)=3 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {112, 3012},
/*h(125)=4 VV1 0x63  VL128 V66 V0F3A NOVSR mode64 W1 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {125, 2886},
/*h(117)=5 VV1 0x63  VL128 V66 V0F3A NOVSR mode64 W0 MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {117, 3015},
/*h(122)=6 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {122, 3012},
/*h(114)=7 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {114, 3012},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(124)=10 VV1 0x63  VL128 V66 V0F3A NOVSR mode64 W1 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {124, 2885},
/*h(116)=11 VV1 0x63  VL128 V66 V0F3A NOVSR mode64 W0 MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {116, 3014},
/*empty slot1 */ {0,0},
/*h(121)=13 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {121, 3013},
/*h(113)=14 VV1 0x63  VL128 V66 V0F3A NOVSR  not64  MOD[0b11] MOD=3 REG[rrr] RM[nnn] UIMM8()*/ {113, 3013},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 17ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x68_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x68 V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 2722},
/*h(23)=1 VV1 0x68 V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 2728},
/*h(7)=2 VV1 0x68 V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 2724},
/*h(20)=3 VV1 0x68 V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 2725},
/*h(4)=4 VV1 0x68 V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 2721},
/*h(22)=5 VV1 0x68 V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 2727},
/*h(6)=6 VV1 0x68 V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 2723},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x68 V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 2726}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x69_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x69 V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3779},
/*h(23)=1 VV1 0x69 V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3785},
/*h(7)=2 VV1 0x69 V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3781},
/*h(20)=3 VV1 0x69 V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3782},
/*h(4)=4 VV1 0x69 V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3778},
/*h(22)=5 VV1 0x69 V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3784},
/*h(6)=6 VV1 0x69 V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3780},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x69 V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3783}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6a_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x6A V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2701},
/*h(5)=1 VV1 0x6A V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2702},
/*h(6)=2 VV1 0x6A V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2703},
/*h(7)=3 VV1 0x6A V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2704}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6b_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x6B V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3127},
/*h(5)=1 VV1 0x6B V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3128},
/*h(6)=2 VV1 0x6B V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3129},
/*h(7)=3 VV1 0x6B V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3130}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x6C V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 2430},
/*h(23)=1 VV1 0x6C V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 2436},
/*h(7)=2 VV1 0x6C V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 2432},
/*h(20)=3 VV1 0x6C V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 2433},
/*h(4)=4 VV1 0x6C V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 2429},
/*h(22)=5 VV1 0x6C V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 2435},
/*h(6)=6 VV1 0x6C V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 2431},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x6C V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 2434}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x6D V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3757},
/*h(23)=1 VV1 0x6D V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3763},
/*h(7)=2 VV1 0x6D V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3759},
/*h(20)=3 VV1 0x6D V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3760},
/*h(4)=4 VV1 0x6D V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3756},
/*h(22)=5 VV1 0x6D V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3762},
/*h(6)=6 VV1 0x6D V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3758},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x6D V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3761}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6e_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x6E V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2966},
/*h(5)=1 VV1 0x6E V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2967},
/*h(6)=2 VV1 0x6E V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2968},
/*h(7)=3 VV1 0x6E V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2969}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x6f_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x6F V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3204},
/*h(5)=1 VV1 0x6F V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3205},
/*h(6)=2 VV1 0x6F V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3206},
/*h(7)=3 VV1 0x6F V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3207}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x78_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x78 V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 2635},
/*h(23)=1 VV1 0x78 V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 2641},
/*h(7)=2 VV1 0x78 V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 2637},
/*h(20)=3 VV1 0x78 V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 2638},
/*h(4)=4 VV1 0x78 V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 2634},
/*h(22)=5 VV1 0x78 V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 2640},
/*h(6)=6 VV1 0x78 V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 2636},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x78 V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 2639}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x79_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x79 V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3663},
/*h(23)=1 VV1 0x79 V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3669},
/*h(7)=2 VV1 0x79 V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3665},
/*h(20)=3 VV1 0x79 V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3666},
/*h(4)=4 VV1 0x79 V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3662},
/*h(22)=5 VV1 0x79 V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3668},
/*h(6)=6 VV1 0x79 V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3664},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x79 V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3667}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7a_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x7A V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2425},
/*h(5)=1 VV1 0x7A V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2426},
/*h(6)=2 VV1 0x7A V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2427},
/*h(7)=3 VV1 0x7A V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2428}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7b_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x7B V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3728},
/*h(5)=1 VV1 0x7B V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3729},
/*h(6)=2 VV1 0x7B V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3730},
/*h(7)=3 VV1 0x7B V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3731}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7c_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x7C V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 2796},
/*h(23)=1 VV1 0x7C V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 2802},
/*h(7)=2 VV1 0x7C V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 2798},
/*h(20)=3 VV1 0x7C V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 2799},
/*h(4)=4 VV1 0x7C V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 2795},
/*h(22)=5 VV1 0x7C V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 2801},
/*h(6)=6 VV1 0x7C V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 2797},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x7C V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 2800}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7d_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[9] = {
/*h(5)=0 VV1 0x7D V66 W0 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {5, 3054},
/*h(23)=1 VV1 0x7D V66 W1 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {23, 3060},
/*h(7)=2 VV1 0x7D V66 W1 VL128  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {7, 3056},
/*h(20)=3 VV1 0x7D V66 W0 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {20, 3057},
/*h(4)=4 VV1 0x7D V66 W0 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {4, 3053},
/*h(22)=5 VV1 0x7D V66 W1 VL256  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {22, 3059},
/*h(6)=6 VV1 0x7D V66 W1 VL128  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {6, 3055},
/*empty slot1 */ {0,0},
/*h(21)=8 VV1 0x7D V66 W0 VL256  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {21, 3058}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 9ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7e_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x7E V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3175},
/*h(5)=1 VV1 0x7E V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3176},
/*h(6)=2 VV1 0x7E V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {3177},
/*h(7)=3 VV1 0x7E V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {3178}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0x7f_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[4] = {
/*h(4)=0 VV1 0x7F V66 W0  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2857},
/*h(5)=1 VV1 0x7F V66 W0  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2858},
/*h(6)=2 VV1 0x7F V66 W1  V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() SE_IMM8()*/ {2859},
/*h(7)=3 VV1 0x7F V66 W1  V0F3A MOD[0b11] MOD=3 REG[rrr] RM[nnn] SE_IMM8()*/ {2860}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX(d);
hidx = key - 4;
if(hidx <= 3) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xce_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0xCE V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1   UIMM8()*/ {23, 3528},
/*h(7)=2 VV1 0xCE V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1   UIMM8()*/ {7, 3526},
/*empty slot1 */ {0,0},
/*h(22)=4 VV1 0xCE V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1   UIMM8()*/ {22, 3529},
/*h(6)=5 VV1 0xCE V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1   UIMM8()*/ {6, 3527},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xcf_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[8] = {
/*empty slot1 */ {0,0},
/*h(23)=1 VV1 0xCF V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL256  W1   UIMM8()*/ {23, 3160},
/*h(7)=2 VV1 0xCF V66 V0F3A MOD[0b11] MOD=3  REG[rrr] RM[nnn]  VL128  W1   UIMM8()*/ {7, 3158},
/*empty slot1 */ {0,0},
/*h(22)=4 VV1 0xCF V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL256  W1   UIMM8()*/ {22, 3161},
/*h(6)=5 VV1 0xCF V66 V0F3A MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM()  VL128  W1   UIMM8()*/ {6, 3159},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0}
};
xed_union64_t t;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_REXW_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key,  t.s.lo32 >> (32-3));
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xdf_vv1(const xed_decoded_inst_t* d)
{
typedef struct { xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[2] = {
/*h(14)=0 VV1 0xDF  VL128 V66 V0F3A NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn] MODRM() UIMM8()*/ {2611},
/*h(15)=1 VV1 0xDF VL128 V66 V0F3A  NOVSR MOD[0b11] MOD=3  REG[rrr] RM[nnn] UIMM8()*/ {2610}
};
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = key - 14;
if(hidx <= 1) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
static xed_uint32_t xed3_phash_find_map0x0F3A_opcode0xf0_vv1(const xed_decoded_inst_t* d)
{
typedef struct {xed_uint32_t key; xed_uint32_t value;} lu_entry_t;
static const lu_entry_t lu_table[18] = {
/*h(178)=0 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() UIMM8()*/ {178, 2980},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(188)=3 VV1 0xF0 VF2 V0F3A W1 VL128 NOVSR mode64 MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() UIMM8()*/ {188, 2983},
/*h(180)=4 VV1 0xF0 VF2 V0F3A W0 mode64 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() UIMM8()*/ {180, 2981},
/*empty slot1 */ {0,0},
/*h(185)=6 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]  UIMM8()*/ {185, 2978},
/*h(177)=7 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]  UIMM8()*/ {177, 2978},
/*empty slot1 */ {0,0},
/*empty slot1 */ {0,0},
/*h(187)=10 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]  UIMM8()*/ {187, 2978},
/*h(179)=11 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]  UIMM8()*/ {179, 2978},
/*h(184)=12 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() UIMM8()*/ {184, 2980},
/*h(176)=13 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() UIMM8()*/ {176, 2980},
/*h(189)=14 VV1 0xF0 VF2 V0F3A W1 VL128 NOVSR mode64 MOD[0b11] MOD=3 REG[rrr] RM[nnn]  UIMM8()*/ {189, 2982},
/*h(181)=15 VV1 0xF0 VF2 V0F3A W0 mode64 VL128 NOVSR MOD[0b11] MOD=3 REG[rrr] RM[nnn]  UIMM8()*/ {181, 2979},
/*empty slot1 */ {0,0},
/*h(186)=17 VV1 0xF0 VF2 V0F3A not64 VL128 NOVSR MOD[mm] MOD!=3 REG[rrr] RM[nnn]  MODRM() UIMM8()*/ {186, 2980}
};
xed_union64_t t, u;
xed_uint64_t key = 0;
xed_uint64_t hidx = 0;
key = xed_dec_lu_MOD3_MODE_REXW_VEXDEST210_7_VEXDEST3_VEX_PREFIX_VL(d);
hidx = (t.u64 = 2654435769  * key, u.u64 = t.s.lo32 * 18ULL, u.s.hi32);
if(lu_table[hidx].key == key) {
    return lu_table[hidx].value;
}
else{
    return 0;
}
}
#endif
