Opening output files
FE:EMIT_FILE obj/xed-operand-ctype-enum.txt
FE:EMIT_FILE obj/xed-operand-ctype-enum.c
FE:EMIT_FILE obj/xed-operand-ctype-enum.h
FE:EMIT_FILE obj/xed-operand-ctype-map.h
FE:EMIT_FILE obj/xed-operand-ctype-map.c
LER: Comparing YMM0 and ZMM0 for XMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for XMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for XMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for XMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for XMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for XMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for XMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for XMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for XMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for XMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for XMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for XMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for XMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for XMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for XMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for XMM15
	taking new wider version
LER: Comparing YMM0 and ZMM0 for YMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for YMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for YMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for YMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for YMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for YMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for YMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for YMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for YMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for YMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for YMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for YMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for YMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for YMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for YMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for YMM15
	taking new wider version
[RGROUPS] ['BNDCFG', 'BNDSTAT', 'BOUND', 'CR', 'DR', 'FLAGS', 'GPR16', 'GPR32', 'GPR64', 'GPR8', 'GPR8h', 'INVALID', 'IP', 'MASK', 'MMX', 'MSR', 'MXCSR', 'PSEUDO', 'PSEUDOX87', 'SR', 'TMP', 'X87', 'XCR', 'XMM', 'YMM', 'ZMM']
FE:EMIT_FILE obj/xed-reg-enum.txt
FE:EMIT_FILE obj/xed-reg-enum.c
FE:EMIT_FILE obj/xed-reg-enum.h
FE:EMIT_FILE obj/xed-reg-class-enum.txt
FE:EMIT_FILE obj/xed-reg-class-enum.c
FE:EMIT_FILE obj/xed-reg-class-enum.h
FE:EMIT_FILE obj/xed-init-reg-class.c
FE:EMIT_FILE obj/xed-operand-width-enum.txt
FE:EMIT_FILE obj/xed-operand-width-enum.c
FE:EMIT_FILE obj/xed-operand-width-enum.h
FE:EMIT_FILE obj/xed-init-width.c
Adding scalable width:  ASZ
Adding scalable width:  SSZ
Adding scalable width:  P
Adding scalable width:  P2
Adding scalable width:  S
Adding scalable width:  V
Adding scalable width:  Y
Adding scalable width:  Z
Adding scalable width:  SPW8
Adding scalable width:  SPW
Adding scalable width:  SPW5
Adding scalable width:  SPW3
Adding scalable width:  SPW2
MAKING ELEMENT BASE TYPE ENUM
FE:EMIT_FILE obj/xed-operand-element-type-enum.c
FE:EMIT_FILE obj/xed-operand-element-type-enum.h
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.txt
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.c
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.h
FE:EMIT_FILE obj/xed-init-operand-type-mappings.c
FE:EMIT_FILE obj/xed-init-pointer-names.h
FE:EMIT_FILE obj/xed-init-pointer-names.c
Reading state bits
Done reading state bits
Reading structured input
Reading Instructions (ISA) input
=============================================
Creating a generator 0
=============================================
ALines (lines before reading input) = 67083
read_input 0
NONTERMINAL: ISA notype
Adding ISA to nonterminal dict
Nonterminal ISA()::
Nonterminal name ISA
read_flat_input 0
Hit a nonterminal, returning at: REMOVE_SEGMENT()::
BLines (lines remaining after reading input) = 67081
=============================================
Creating a generator 1
=============================================
ALines (lines before reading input) = 67081
read_input 1
NONTERMINAL: REMOVE_SEGMENT notype
Adding REMOVE_SEGMENT to nonterminal dict
Nonterminal REMOVE_SEGMENT()::
Nonterminal name REMOVE_SEGMENT
read_flat_input 1
Hit a nonterminal, returning at: PREFIXES()::
BLines (lines remaining after reading input) = 67077
=============================================
Creating a generator 2
=============================================
ALines (lines before reading input) = 67077
read_input 4
NONTERMINAL: PREFIXES notype
Adding PREFIXES to nonterminal dict
Nonterminal PREFIXES()::
Nonterminal name PREFIXES
read_flat_input 4
Hit a nonterminal, returning at: BRANCH_HINT()::
BLines (lines remaining after reading input) = 67029
=============================================
Creating a generator 3
=============================================
ALines (lines before reading input) = 67029
read_input 50
NONTERMINAL: BRANCH_HINT notype
Adding BRANCH_HINT to nonterminal dict
Nonterminal BRANCH_HINT()::
Nonterminal name BRANCH_HINT
read_flat_input 50
Hit a nonterminal, returning at: xed_reg_enum_t ArAX()::
BLines (lines remaining after reading input) = 67025
=============================================
Creating a generator 4
=============================================
ALines (lines before reading input) = 67025
read_input 53
NONTERMINAL: ArAX type= xed_reg_enum_t
Adding ArAX to nonterminal dict
Nonterminal xed_reg_enum_t ArAX()::
Nonterminal name ArAX
read_flat_input 53
Hit a nonterminal, returning at: xed_reg_enum_t ArBX()::
BLines (lines remaining after reading input) = 67021
=============================================
Creating a generator 5
=============================================
ALines (lines before reading input) = 67021
read_input 56
NONTERMINAL: ArBX type= xed_reg_enum_t
Adding ArBX to nonterminal dict
Nonterminal xed_reg_enum_t ArBX()::
Nonterminal name ArBX
read_flat_input 56
Hit a nonterminal, returning at: xed_reg_enum_t ArCX()::
BLines (lines remaining after reading input) = 67017
=============================================
Creating a generator 6
=============================================
ALines (lines before reading input) = 67017
read_input 59
NONTERMINAL: ArCX type= xed_reg_enum_t
Adding ArCX to nonterminal dict
Nonterminal xed_reg_enum_t ArCX()::
Nonterminal name ArCX
read_flat_input 59
Hit a nonterminal, returning at: xed_reg_enum_t ArDX()::
BLines (lines remaining after reading input) = 67013
=============================================
Creating a generator 7
=============================================
ALines (lines before reading input) = 67013
read_input 62
NONTERMINAL: ArDX type= xed_reg_enum_t
Adding ArDX to nonterminal dict
Nonterminal xed_reg_enum_t ArDX()::
Nonterminal name ArDX
read_flat_input 62
Hit a nonterminal, returning at: xed_reg_enum_t ArSI()::
BLines (lines remaining after reading input) = 67009
=============================================
Creating a generator 8
=============================================
ALines (lines before reading input) = 67009
read_input 65
NONTERMINAL: ArSI type= xed_reg_enum_t
Adding ArSI to nonterminal dict
Nonterminal xed_reg_enum_t ArSI()::
Nonterminal name ArSI
read_flat_input 65
Hit a nonterminal, returning at: xed_reg_enum_t ArDI()::
BLines (lines remaining after reading input) = 67005
=============================================
Creating a generator 9
=============================================
ALines (lines before reading input) = 67005
read_input 68
NONTERMINAL: ArDI type= xed_reg_enum_t
Adding ArDI to nonterminal dict
Nonterminal xed_reg_enum_t ArDI()::
Nonterminal name ArDI
read_flat_input 68
Hit a nonterminal, returning at: xed_reg_enum_t ArSP()::
BLines (lines remaining after reading input) = 67001
=============================================
Creating a generator 10
=============================================
ALines (lines before reading input) = 67001
read_input 71
NONTERMINAL: ArSP type= xed_reg_enum_t
Adding ArSP to nonterminal dict
Nonterminal xed_reg_enum_t ArSP()::
Nonterminal name ArSP
read_flat_input 71
Hit a nonterminal, returning at: xed_reg_enum_t ArBP()::
BLines (lines remaining after reading input) = 66997
=============================================
Creating a generator 11
=============================================
ALines (lines before reading input) = 66997
read_input 74
NONTERMINAL: ArBP type= xed_reg_enum_t
Adding ArBP to nonterminal dict
Nonterminal xed_reg_enum_t ArBP()::
Nonterminal name ArBP
read_flat_input 74
Hit a nonterminal, returning at: xed_reg_enum_t SrSP()::
BLines (lines remaining after reading input) = 66993
=============================================
Creating a generator 12
=============================================
ALines (lines before reading input) = 66993
read_input 77
NONTERMINAL: SrSP type= xed_reg_enum_t
Adding SrSP to nonterminal dict
Nonterminal xed_reg_enum_t SrSP()::
Nonterminal name SrSP
read_flat_input 77
Hit a nonterminal, returning at: xed_reg_enum_t SrBP()::
BLines (lines remaining after reading input) = 66989
=============================================
Creating a generator 13
=============================================
ALines (lines before reading input) = 66989
read_input 80
NONTERMINAL: SrBP type= xed_reg_enum_t
Adding SrBP to nonterminal dict
Nonterminal xed_reg_enum_t SrBP()::
Nonterminal name SrBP
read_flat_input 80
Hit a nonterminal, returning at: xed_reg_enum_t Ar8()::
BLines (lines remaining after reading input) = 66985
=============================================
Creating a generator 14
=============================================
ALines (lines before reading input) = 66985
read_input 83
NONTERMINAL: Ar8 type= xed_reg_enum_t
Adding Ar8 to nonterminal dict
Nonterminal xed_reg_enum_t Ar8()::
Nonterminal name Ar8
read_flat_input 83
Hit a nonterminal, returning at: xed_reg_enum_t Ar9()::
BLines (lines remaining after reading input) = 66981
=============================================
Creating a generator 15
=============================================
ALines (lines before reading input) = 66981
read_input 86
NONTERMINAL: Ar9 type= xed_reg_enum_t
Adding Ar9 to nonterminal dict
Nonterminal xed_reg_enum_t Ar9()::
Nonterminal name Ar9
read_flat_input 86
Hit a nonterminal, returning at: xed_reg_enum_t Ar10()::
BLines (lines remaining after reading input) = 66977
=============================================
Creating a generator 16
=============================================
ALines (lines before reading input) = 66977
read_input 89
NONTERMINAL: Ar10 type= xed_reg_enum_t
Adding Ar10 to nonterminal dict
Nonterminal xed_reg_enum_t Ar10()::
Nonterminal name Ar10
read_flat_input 89
Hit a nonterminal, returning at: xed_reg_enum_t Ar11()::
BLines (lines remaining after reading input) = 66973
=============================================
Creating a generator 17
=============================================
ALines (lines before reading input) = 66973
read_input 92
NONTERMINAL: Ar11 type= xed_reg_enum_t
Adding Ar11 to nonterminal dict
Nonterminal xed_reg_enum_t Ar11()::
Nonterminal name Ar11
read_flat_input 92
Hit a nonterminal, returning at: xed_reg_enum_t Ar12()::
BLines (lines remaining after reading input) = 66969
=============================================
Creating a generator 18
=============================================
ALines (lines before reading input) = 66969
read_input 95
NONTERMINAL: Ar12 type= xed_reg_enum_t
Adding Ar12 to nonterminal dict
Nonterminal xed_reg_enum_t Ar12()::
Nonterminal name Ar12
read_flat_input 95
Hit a nonterminal, returning at: xed_reg_enum_t Ar13()::
BLines (lines remaining after reading input) = 66965
=============================================
Creating a generator 19
=============================================
ALines (lines before reading input) = 66965
read_input 98
NONTERMINAL: Ar13 type= xed_reg_enum_t
Adding Ar13 to nonterminal dict
Nonterminal xed_reg_enum_t Ar13()::
Nonterminal name Ar13
read_flat_input 98
Hit a nonterminal, returning at: xed_reg_enum_t Ar14()::
BLines (lines remaining after reading input) = 66961
=============================================
Creating a generator 20
=============================================
ALines (lines before reading input) = 66961
read_input 101
NONTERMINAL: Ar14 type= xed_reg_enum_t
Adding Ar14 to nonterminal dict
Nonterminal xed_reg_enum_t Ar14()::
Nonterminal name Ar14
read_flat_input 101
Hit a nonterminal, returning at: xed_reg_enum_t Ar15()::
BLines (lines remaining after reading input) = 66957
=============================================
Creating a generator 21
=============================================
ALines (lines before reading input) = 66957
read_input 104
NONTERMINAL: Ar15 type= xed_reg_enum_t
Adding Ar15 to nonterminal dict
Nonterminal xed_reg_enum_t Ar15()::
Nonterminal name Ar15
read_flat_input 104
Hit a nonterminal, returning at: xed_reg_enum_t rIP()::
BLines (lines remaining after reading input) = 66953
=============================================
Creating a generator 22
=============================================
ALines (lines before reading input) = 66953
read_input 107
NONTERMINAL: rIP type= xed_reg_enum_t
Adding rIP to nonterminal dict
Nonterminal xed_reg_enum_t rIP()::
Nonterminal name rIP
read_flat_input 107
Hit a nonterminal, returning at: xed_reg_enum_t rIPa()::
BLines (lines remaining after reading input) = 66949
=============================================
Creating a generator 23
=============================================
ALines (lines before reading input) = 66949
read_input 110
NONTERMINAL: rIPa type= xed_reg_enum_t
Adding rIPa to nonterminal dict
Nonterminal xed_reg_enum_t rIPa()::
Nonterminal name rIPa
read_flat_input 110
Hit a nonterminal, returning at: xed_reg_enum_t OeAX()::
BLines (lines remaining after reading input) = 66946
=============================================
Creating a generator 24
=============================================
ALines (lines before reading input) = 66946
read_input 112
NONTERMINAL: OeAX type= xed_reg_enum_t
Adding OeAX to nonterminal dict
Nonterminal xed_reg_enum_t OeAX()::
Nonterminal name OeAX
read_flat_input 112
Hit a nonterminal, returning at: xed_reg_enum_t OrAX()::
BLines (lines remaining after reading input) = 66942
=============================================
Creating a generator 25
=============================================
ALines (lines before reading input) = 66942
read_input 115
NONTERMINAL: OrAX type= xed_reg_enum_t
Adding OrAX to nonterminal dict
Nonterminal xed_reg_enum_t OrAX()::
Nonterminal name OrAX
read_flat_input 115
Hit a nonterminal, returning at: xed_reg_enum_t OrDX()::
BLines (lines remaining after reading input) = 66938
=============================================
Creating a generator 26
=============================================
ALines (lines before reading input) = 66938
read_input 118
NONTERMINAL: OrDX type= xed_reg_enum_t
Adding OrDX to nonterminal dict
Nonterminal xed_reg_enum_t OrDX()::
Nonterminal name OrDX
read_flat_input 118
Hit a nonterminal, returning at: xed_reg_enum_t OrCX()::
BLines (lines remaining after reading input) = 66934
=============================================
Creating a generator 27
=============================================
ALines (lines before reading input) = 66934
read_input 121
NONTERMINAL: OrCX type= xed_reg_enum_t
Adding OrCX to nonterminal dict
Nonterminal xed_reg_enum_t OrCX()::
Nonterminal name OrCX
read_flat_input 121
Hit a nonterminal, returning at: xed_reg_enum_t OrBX()::
BLines (lines remaining after reading input) = 66930
=============================================
Creating a generator 28
=============================================
ALines (lines before reading input) = 66930
read_input 124
NONTERMINAL: OrBX type= xed_reg_enum_t
Adding OrBX to nonterminal dict
Nonterminal xed_reg_enum_t OrBX()::
Nonterminal name OrBX
read_flat_input 124
Hit a nonterminal, returning at: xed_reg_enum_t OrSP()::
BLines (lines remaining after reading input) = 66926
=============================================
Creating a generator 29
=============================================
ALines (lines before reading input) = 66926
read_input 127
NONTERMINAL: OrSP type= xed_reg_enum_t
Adding OrSP to nonterminal dict
Nonterminal xed_reg_enum_t OrSP()::
Nonterminal name OrSP
read_flat_input 127
Hit a nonterminal, returning at: xed_reg_enum_t OrBP()::
BLines (lines remaining after reading input) = 66922
=============================================
Creating a generator 30
=============================================
ALines (lines before reading input) = 66922
read_input 130
NONTERMINAL: OrBP type= xed_reg_enum_t
Adding OrBP to nonterminal dict
Nonterminal xed_reg_enum_t OrBP()::
Nonterminal name OrBP
read_flat_input 130
Hit a nonterminal, returning at: xed_reg_enum_t rFLAGS()::
BLines (lines remaining after reading input) = 66918
=============================================
Creating a generator 31
=============================================
ALines (lines before reading input) = 66918
read_input 133
NONTERMINAL: rFLAGS type= xed_reg_enum_t
Adding rFLAGS to nonterminal dict
Nonterminal xed_reg_enum_t rFLAGS()::
Nonterminal name rFLAGS
read_flat_input 133
Hit a nonterminal, returning at: xed_reg_enum_t MMX_R()::
BLines (lines remaining after reading input) = 66914
=============================================
Creating a generator 32
=============================================
ALines (lines before reading input) = 66914
read_input 136
NONTERMINAL: MMX_R type= xed_reg_enum_t
Adding MMX_R to nonterminal dict
Nonterminal xed_reg_enum_t MMX_R()::
Nonterminal name MMX_R
read_flat_input 136
Hit a nonterminal, returning at: xed_reg_enum_t MMX_B()::
BLines (lines remaining after reading input) = 66905
=============================================
Creating a generator 33
=============================================
ALines (lines before reading input) = 66905
read_input 144
NONTERMINAL: MMX_B type= xed_reg_enum_t
Adding MMX_B to nonterminal dict
Nonterminal xed_reg_enum_t MMX_B()::
Nonterminal name MMX_B
read_flat_input 144
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_R()::
BLines (lines remaining after reading input) = 66896
=============================================
Creating a generator 34
=============================================
ALines (lines before reading input) = 66896
read_input 152
NONTERMINAL: GPRv_R type= xed_reg_enum_t
Adding GPRv_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_R()::
Nonterminal name GPRv_R
read_flat_input 152
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_SB()::
BLines (lines remaining after reading input) = 66892
=============================================
Creating a generator 35
=============================================
ALines (lines before reading input) = 66892
read_input 155
NONTERMINAL: GPRv_SB type= xed_reg_enum_t
Adding GPRv_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_SB()::
Nonterminal name GPRv_SB
read_flat_input 155
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_R()::
BLines (lines remaining after reading input) = 66888
=============================================
Creating a generator 36
=============================================
ALines (lines before reading input) = 66888
read_input 158
NONTERMINAL: GPRz_R type= xed_reg_enum_t
Adding GPRz_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_R()::
Nonterminal name GPRz_R
read_flat_input 158
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_B()::
BLines (lines remaining after reading input) = 66884
=============================================
Creating a generator 37
=============================================
ALines (lines before reading input) = 66884
read_input 161
NONTERMINAL: GPRv_B type= xed_reg_enum_t
Adding GPRv_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_B()::
Nonterminal name GPRv_B
read_flat_input 161
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_B()::
BLines (lines remaining after reading input) = 66880
=============================================
Creating a generator 38
=============================================
ALines (lines before reading input) = 66880
read_input 164
NONTERMINAL: GPRz_B type= xed_reg_enum_t
Adding GPRz_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_B()::
Nonterminal name GPRz_B
read_flat_input 164
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_B()::
BLines (lines remaining after reading input) = 66876
=============================================
Creating a generator 39
=============================================
ALines (lines before reading input) = 66876
read_input 167
NONTERMINAL: GPRy_B type= xed_reg_enum_t
Adding GPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_B()::
Nonterminal name GPRy_B
read_flat_input 167
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_R()::
BLines (lines remaining after reading input) = 66872
=============================================
Creating a generator 40
=============================================
ALines (lines before reading input) = 66872
read_input 170
NONTERMINAL: GPRy_R type= xed_reg_enum_t
Adding GPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_R()::
Nonterminal name GPRy_R
read_flat_input 170
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_R()::
BLines (lines remaining after reading input) = 66868
=============================================
Creating a generator 41
=============================================
ALines (lines before reading input) = 66868
read_input 173
NONTERMINAL: GPR64_R type= xed_reg_enum_t
Adding GPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_R()::
Nonterminal name GPR64_R
read_flat_input 173
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_B()::
BLines (lines remaining after reading input) = 66851
=============================================
Creating a generator 42
=============================================
ALines (lines before reading input) = 66851
read_input 189
NONTERMINAL: GPR64_B type= xed_reg_enum_t
Adding GPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_B()::
Nonterminal name GPR64_B
read_flat_input 189
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_SB()::
BLines (lines remaining after reading input) = 66834
=============================================
Creating a generator 43
=============================================
ALines (lines before reading input) = 66834
read_input 205
NONTERMINAL: GPR64_SB type= xed_reg_enum_t
Adding GPR64_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_SB()::
Nonterminal name GPR64_SB
read_flat_input 205
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_X()::
BLines (lines remaining after reading input) = 66817
=============================================
Creating a generator 44
=============================================
ALines (lines before reading input) = 66817
read_input 221
NONTERMINAL: GPR64_X type= xed_reg_enum_t
Adding GPR64_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_X()::
Nonterminal name GPR64_X
read_flat_input 221
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_R()::
BLines (lines remaining after reading input) = 66800
=============================================
Creating a generator 45
=============================================
ALines (lines before reading input) = 66800
read_input 237
NONTERMINAL: GPR32_R type= xed_reg_enum_t
Adding GPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_R()::
Nonterminal name GPR32_R
read_flat_input 237
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_B()::
BLines (lines remaining after reading input) = 66783
=============================================
Creating a generator 46
=============================================
ALines (lines before reading input) = 66783
read_input 253
NONTERMINAL: GPR32_B type= xed_reg_enum_t
Adding GPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_B()::
Nonterminal name GPR32_B
read_flat_input 253
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_SB()::
BLines (lines remaining after reading input) = 66766
=============================================
Creating a generator 47
=============================================
ALines (lines before reading input) = 66766
read_input 269
NONTERMINAL: GPR32_SB type= xed_reg_enum_t
Adding GPR32_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_SB()::
Nonterminal name GPR32_SB
read_flat_input 269
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_X()::
BLines (lines remaining after reading input) = 66749
=============================================
Creating a generator 48
=============================================
ALines (lines before reading input) = 66749
read_input 285
NONTERMINAL: GPR32_X type= xed_reg_enum_t
Adding GPR32_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_X()::
Nonterminal name GPR32_X
read_flat_input 285
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_R()::
BLines (lines remaining after reading input) = 66732
=============================================
Creating a generator 49
=============================================
ALines (lines before reading input) = 66732
read_input 301
NONTERMINAL: GPR16_R type= xed_reg_enum_t
Adding GPR16_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_R()::
Nonterminal name GPR16_R
read_flat_input 301
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_B()::
BLines (lines remaining after reading input) = 66715
=============================================
Creating a generator 50
=============================================
ALines (lines before reading input) = 66715
read_input 317
NONTERMINAL: GPR16_B type= xed_reg_enum_t
Adding GPR16_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_B()::
Nonterminal name GPR16_B
read_flat_input 317
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_SB()::
BLines (lines remaining after reading input) = 66698
=============================================
Creating a generator 51
=============================================
ALines (lines before reading input) = 66698
read_input 333
NONTERMINAL: GPR16_SB type= xed_reg_enum_t
Adding GPR16_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_SB()::
Nonterminal name GPR16_SB
read_flat_input 333
Hit a nonterminal, returning at: xed_reg_enum_t CR_R()::
BLines (lines remaining after reading input) = 66681
=============================================
Creating a generator 52
=============================================
ALines (lines before reading input) = 66681
read_input 349
NONTERMINAL: CR_R type= xed_reg_enum_t
Adding CR_R to nonterminal dict
Nonterminal xed_reg_enum_t CR_R()::
Nonterminal name CR_R
read_flat_input 349
Hit a nonterminal, returning at: xed_reg_enum_t CR_B()::
BLines (lines remaining after reading input) = 66664
=============================================
Creating a generator 53
=============================================
ALines (lines before reading input) = 66664
read_input 365
NONTERMINAL: CR_B type= xed_reg_enum_t
Adding CR_B to nonterminal dict
Nonterminal xed_reg_enum_t CR_B()::
Nonterminal name CR_B
read_flat_input 365
Hit a nonterminal, returning at: xed_reg_enum_t DR_R()::
BLines (lines remaining after reading input) = 66647
=============================================
Creating a generator 54
=============================================
ALines (lines before reading input) = 66647
read_input 381
NONTERMINAL: DR_R type= xed_reg_enum_t
Adding DR_R to nonterminal dict
Nonterminal xed_reg_enum_t DR_R()::
Nonterminal name DR_R
read_flat_input 381
Hit a nonterminal, returning at: xed_reg_enum_t X87()::
BLines (lines remaining after reading input) = 66630
=============================================
Creating a generator 55
=============================================
ALines (lines before reading input) = 66630
read_input 397
NONTERMINAL: X87 type= xed_reg_enum_t
Adding X87 to nonterminal dict
Nonterminal xed_reg_enum_t X87()::
Nonterminal name X87
read_flat_input 397
Hit a nonterminal, returning at: xed_reg_enum_t SEG()::
BLines (lines remaining after reading input) = 66621
=============================================
Creating a generator 56
=============================================
ALines (lines before reading input) = 66621
read_input 405
NONTERMINAL: SEG type= xed_reg_enum_t
Adding SEG to nonterminal dict
Nonterminal xed_reg_enum_t SEG()::
Nonterminal name SEG
read_flat_input 405
Hit a nonterminal, returning at: xed_reg_enum_t SEG_MOV()::
BLines (lines remaining after reading input) = 66612
=============================================
Creating a generator 57
=============================================
ALines (lines before reading input) = 66612
read_input 413
NONTERMINAL: SEG_MOV type= xed_reg_enum_t
Adding SEG_MOV to nonterminal dict
Nonterminal xed_reg_enum_t SEG_MOV()::
Nonterminal name SEG_MOV
read_flat_input 413
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG()::
BLines (lines remaining after reading input) = 66603
=============================================
Creating a generator 58
=============================================
ALines (lines before reading input) = 66603
read_input 421
NONTERMINAL: FINAL_DSEG type= xed_reg_enum_t
Adding FINAL_DSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG()::
Nonterminal name FINAL_DSEG
read_flat_input 421
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_NOT64()::
BLines (lines remaining after reading input) = 66599
=============================================
Creating a generator 59
=============================================
ALines (lines before reading input) = 66599
read_input 424
NONTERMINAL: FINAL_DSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_NOT64()::
Nonterminal name FINAL_DSEG_NOT64
read_flat_input 424
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_MODE64()::
BLines (lines remaining after reading input) = 66591
=============================================
Creating a generator 60
=============================================
ALines (lines before reading input) = 66591
read_input 431
NONTERMINAL: FINAL_DSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_MODE64()::
Nonterminal name FINAL_DSEG_MODE64
read_flat_input 431
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1()::
BLines (lines remaining after reading input) = 66583
=============================================
Creating a generator 61
=============================================
ALines (lines before reading input) = 66583
read_input 438
NONTERMINAL: FINAL_DSEG1 type= xed_reg_enum_t
Adding FINAL_DSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1()::
Nonterminal name FINAL_DSEG1
read_flat_input 438
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_NOT64()::
BLines (lines remaining after reading input) = 66579
=============================================
Creating a generator 62
=============================================
ALines (lines before reading input) = 66579
read_input 441
NONTERMINAL: FINAL_DSEG1_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG1_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_NOT64()::
Nonterminal name FINAL_DSEG1_NOT64
read_flat_input 441
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_MODE64()::
BLines (lines remaining after reading input) = 66571
=============================================
Creating a generator 63
=============================================
ALines (lines before reading input) = 66571
read_input 448
NONTERMINAL: FINAL_DSEG1_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG1_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_MODE64()::
Nonterminal name FINAL_DSEG1_MODE64
read_flat_input 448
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG()::
BLines (lines remaining after reading input) = 66563
=============================================
Creating a generator 64
=============================================
ALines (lines before reading input) = 66563
read_input 455
NONTERMINAL: FINAL_ESEG type= xed_reg_enum_t
Adding FINAL_ESEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG()::
Nonterminal name FINAL_ESEG
read_flat_input 455
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG1()::
BLines (lines remaining after reading input) = 66559
=============================================
Creating a generator 65
=============================================
ALines (lines before reading input) = 66559
read_input 458
NONTERMINAL: FINAL_ESEG1 type= xed_reg_enum_t
Adding FINAL_ESEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG1()::
Nonterminal name FINAL_ESEG1
read_flat_input 458
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG1()::
BLines (lines remaining after reading input) = 66555
=============================================
Creating a generator 66
=============================================
ALines (lines before reading input) = 66555
read_input 461
NONTERMINAL: FINAL_SSEG1 type= xed_reg_enum_t
Adding FINAL_SSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG1()::
Nonterminal name FINAL_SSEG1
read_flat_input 461
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG0()::
BLines (lines remaining after reading input) = 66551
=============================================
Creating a generator 67
=============================================
ALines (lines before reading input) = 66551
read_input 464
NONTERMINAL: FINAL_SSEG0 type= xed_reg_enum_t
Adding FINAL_SSEG0 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG0()::
Nonterminal name FINAL_SSEG0
read_flat_input 464
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG()::
BLines (lines remaining after reading input) = 66547
=============================================
Creating a generator 68
=============================================
ALines (lines before reading input) = 66547
read_input 467
NONTERMINAL: FINAL_SSEG type= xed_reg_enum_t
Adding FINAL_SSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG()::
Nonterminal name FINAL_SSEG
read_flat_input 467
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_NOT64()::
BLines (lines remaining after reading input) = 66543
=============================================
Creating a generator 69
=============================================
ALines (lines before reading input) = 66543
read_input 470
NONTERMINAL: FINAL_SSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_SSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_NOT64()::
Nonterminal name FINAL_SSEG_NOT64
read_flat_input 470
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_MODE64()::
BLines (lines remaining after reading input) = 66535
=============================================
Creating a generator 70
=============================================
ALines (lines before reading input) = 66535
read_input 477
NONTERMINAL: FINAL_SSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_SSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_MODE64()::
Nonterminal name FINAL_SSEG_MODE64
read_flat_input 477
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_R()::
BLines (lines remaining after reading input) = 66527
=============================================
Creating a generator 71
=============================================
ALines (lines before reading input) = 66527
read_input 484
NONTERMINAL: GPR8_R type= xed_reg_enum_t
Adding GPR8_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_R()::
Nonterminal name GPR8_R
read_flat_input 484
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_B()::
BLines (lines remaining after reading input) = 66506
=============================================
Creating a generator 72
=============================================
ALines (lines before reading input) = 66506
read_input 504
NONTERMINAL: GPR8_B type= xed_reg_enum_t
Adding GPR8_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_B()::
Nonterminal name GPR8_B
read_flat_input 504
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_SB()::
BLines (lines remaining after reading input) = 66485
=============================================
Creating a generator 73
=============================================
ALines (lines before reading input) = 66485
read_input 524
NONTERMINAL: GPR8_SB type= xed_reg_enum_t
Adding GPR8_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_SB()::
Nonterminal name GPR8_SB
read_flat_input 524
Hit a nonterminal, returning at: OSZ_NONTERM()::
BLines (lines remaining after reading input) = 66464
=============================================
Creating a generator 74
=============================================
ALines (lines before reading input) = 66464
read_input 544
NONTERMINAL: OSZ_NONTERM notype
Adding OSZ_NONTERM to nonterminal dict
Nonterminal OSZ_NONTERM()::
Nonterminal name OSZ_NONTERM
read_flat_input 544
Hit a nonterminal, returning at: DF64()::
BLines (lines remaining after reading input) = 66455
=============================================
Creating a generator 75
=============================================
ALines (lines before reading input) = 66455
read_input 552
NONTERMINAL: DF64 notype
Adding DF64 to nonterminal dict
Nonterminal DF64()::
Nonterminal name DF64
read_flat_input 552
Hit a nonterminal, returning at: REFINING66()::
BLines (lines remaining after reading input) = 66448
=============================================
Creating a generator 76
=============================================
ALines (lines before reading input) = 66448
read_input 558
NONTERMINAL: REFINING66 notype
Adding REFINING66 to nonterminal dict
Nonterminal REFINING66()::
Nonterminal name REFINING66
read_flat_input 558
Hit a nonterminal, returning at: IGNORE66()::
BLines (lines remaining after reading input) = 66443
=============================================
Creating a generator 77
=============================================
ALines (lines before reading input) = 66443
read_input 562
NONTERMINAL: IGNORE66 notype
Adding IGNORE66 to nonterminal dict
Nonterminal IGNORE66()::
Nonterminal name IGNORE66
read_flat_input 562
Hit a nonterminal, returning at: IMMUNE66()::
BLines (lines remaining after reading input) = 66438
=============================================
Creating a generator 78
=============================================
ALines (lines before reading input) = 66438
read_input 566
NONTERMINAL: IMMUNE66 notype
Adding IMMUNE66 to nonterminal dict
Nonterminal IMMUNE66()::
Nonterminal name IMMUNE66
read_flat_input 566
Hit a nonterminal, returning at: CR_WIDTH()::
BLines (lines remaining after reading input) = 66433
=============================================
Creating a generator 79
=============================================
ALines (lines before reading input) = 66433
read_input 570
NONTERMINAL: CR_WIDTH notype
Adding CR_WIDTH to nonterminal dict
Nonterminal CR_WIDTH()::
Nonterminal name CR_WIDTH
read_flat_input 570
Hit a nonterminal, returning at: IMMUNE66_LOOP64()::
BLines (lines remaining after reading input) = 66429
=============================================
Creating a generator 80
=============================================
ALines (lines before reading input) = 66429
read_input 573
NONTERMINAL: IMMUNE66_LOOP64 notype
Adding IMMUNE66_LOOP64 to nonterminal dict
Nonterminal IMMUNE66_LOOP64()::
Nonterminal name IMMUNE66_LOOP64
read_flat_input 573
Hit a nonterminal, returning at: IMMUNE_REXW()::
BLines (lines remaining after reading input) = 66425
=============================================
Creating a generator 81
=============================================
ALines (lines before reading input) = 66425
read_input 576
NONTERMINAL: IMMUNE_REXW notype
Adding IMMUNE_REXW to nonterminal dict
Nonterminal IMMUNE_REXW()::
Nonterminal name IMMUNE_REXW
read_flat_input 576
Hit a nonterminal, returning at: FORCE64()::
BLines (lines remaining after reading input) = 66419
=============================================
Creating a generator 82
=============================================
ALines (lines before reading input) = 66419
read_input 581
NONTERMINAL: FORCE64 notype
Adding FORCE64 to nonterminal dict
Nonterminal FORCE64()::
Nonterminal name FORCE64
read_flat_input 581
Hit a nonterminal, returning at: ASZ_NONTERM()::
BLines (lines remaining after reading input) = 66416
=============================================
Creating a generator 83
=============================================
ALines (lines before reading input) = 66416
read_input 582
NONTERMINAL: ASZ_NONTERM notype
Adding ASZ_NONTERM to nonterminal dict
Nonterminal ASZ_NONTERM()::
Nonterminal name ASZ_NONTERM
read_flat_input 582
Hit a nonterminal, returning at: ONE()::
BLines (lines remaining after reading input) = 66409
=============================================
Creating a generator 84
=============================================
ALines (lines before reading input) = 66409
read_input 588
NONTERMINAL: ONE notype
Adding ONE to nonterminal dict
Nonterminal ONE()::
Nonterminal name ONE
read_flat_input 588
Hit a nonterminal, returning at: UIMMv()::
BLines (lines remaining after reading input) = 66405
=============================================
Creating a generator 85
=============================================
ALines (lines before reading input) = 66405
read_input 591
NONTERMINAL: UIMMv notype
Adding UIMMv to nonterminal dict
Nonterminal UIMMv()::
Nonterminal name UIMMv
read_flat_input 591
Hit a nonterminal, returning at: SIMMz()::
BLines (lines remaining after reading input) = 66401
=============================================
Creating a generator 86
=============================================
ALines (lines before reading input) = 66401
read_input 594
NONTERMINAL: SIMMz notype
Adding SIMMz to nonterminal dict
Nonterminal SIMMz()::
Nonterminal name SIMMz
read_flat_input 594
Hit a nonterminal, returning at: SIMM8()::
BLines (lines remaining after reading input) = 66397
=============================================
Creating a generator 87
=============================================
ALines (lines before reading input) = 66397
read_input 597
NONTERMINAL: SIMM8 notype
Adding SIMM8 to nonterminal dict
Nonterminal SIMM8()::
Nonterminal name SIMM8
read_flat_input 597
Hit a nonterminal, returning at: UIMM8()::
BLines (lines remaining after reading input) = 66395
=============================================
Creating a generator 88
=============================================
ALines (lines before reading input) = 66395
read_input 598
NONTERMINAL: UIMM8 notype
Adding UIMM8 to nonterminal dict
Nonterminal UIMM8()::
Nonterminal name UIMM8
read_flat_input 598
Hit a nonterminal, returning at: UIMM8_1()::
BLines (lines remaining after reading input) = 66393
=============================================
Creating a generator 89
=============================================
ALines (lines before reading input) = 66393
read_input 599
NONTERMINAL: UIMM8_1 notype
Adding UIMM8_1 to nonterminal dict
Nonterminal UIMM8_1()::
Nonterminal name UIMM8_1
read_flat_input 599
Hit a nonterminal, returning at: UIMM16()::
BLines (lines remaining after reading input) = 66391
=============================================
Creating a generator 90
=============================================
ALines (lines before reading input) = 66391
read_input 600
NONTERMINAL: UIMM16 notype
Adding UIMM16 to nonterminal dict
Nonterminal UIMM16()::
Nonterminal name UIMM16
read_flat_input 600
Hit a nonterminal, returning at: UIMM32()::
BLines (lines remaining after reading input) = 66389
=============================================
Creating a generator 91
=============================================
ALines (lines before reading input) = 66389
read_input 601
NONTERMINAL: UIMM32 notype
Adding UIMM32 to nonterminal dict
Nonterminal UIMM32()::
Nonterminal name UIMM32
read_flat_input 601
Hit a nonterminal, returning at: BRDISP8()::
BLines (lines remaining after reading input) = 66387
=============================================
Creating a generator 92
=============================================
ALines (lines before reading input) = 66387
read_input 602
NONTERMINAL: BRDISP8 notype
Adding BRDISP8 to nonterminal dict
Nonterminal BRDISP8()::
Nonterminal name BRDISP8
read_flat_input 602
Hit a nonterminal, returning at: BRDISP32()::
BLines (lines remaining after reading input) = 66385
=============================================
Creating a generator 93
=============================================
ALines (lines before reading input) = 66385
read_input 603
NONTERMINAL: BRDISP32 notype
Adding BRDISP32 to nonterminal dict
Nonterminal BRDISP32()::
Nonterminal name BRDISP32
read_flat_input 603
Hit a nonterminal, returning at: BRDISPz()::
BLines (lines remaining after reading input) = 66383
=============================================
Creating a generator 94
=============================================
ALines (lines before reading input) = 66383
read_input 604
NONTERMINAL: BRDISPz notype
Adding BRDISPz to nonterminal dict
Nonterminal BRDISPz()::
Nonterminal name BRDISPz
read_flat_input 604
Hit a nonterminal, returning at: MEMDISPv()::
BLines (lines remaining after reading input) = 66379
=============================================
Creating a generator 95
=============================================
ALines (lines before reading input) = 66379
read_input 607
NONTERMINAL: MEMDISPv notype
Adding MEMDISPv to nonterminal dict
Nonterminal MEMDISPv()::
Nonterminal name MEMDISPv
read_flat_input 607
Hit a nonterminal, returning at: MEMDISP32()::
BLines (lines remaining after reading input) = 66375
=============================================
Creating a generator 96
=============================================
ALines (lines before reading input) = 66375
read_input 610
NONTERMINAL: MEMDISP32 notype
Adding MEMDISP32 to nonterminal dict
Nonterminal MEMDISP32()::
Nonterminal name MEMDISP32
read_flat_input 610
Hit a nonterminal, returning at: MEMDISP16()::
BLines (lines remaining after reading input) = 66373
=============================================
Creating a generator 97
=============================================
ALines (lines before reading input) = 66373
read_input 611
NONTERMINAL: MEMDISP16 notype
Adding MEMDISP16 to nonterminal dict
Nonterminal MEMDISP16()::
Nonterminal name MEMDISP16
read_flat_input 611
Hit a nonterminal, returning at: MEMDISP8()::
BLines (lines remaining after reading input) = 66371
=============================================
Creating a generator 98
=============================================
ALines (lines before reading input) = 66371
read_input 612
NONTERMINAL: MEMDISP8 notype
Adding MEMDISP8 to nonterminal dict
Nonterminal MEMDISP8()::
Nonterminal name MEMDISP8
read_flat_input 612
Hit a nonterminal, returning at: MEMDISP()::
BLines (lines remaining after reading input) = 66369
=============================================
Creating a generator 99
=============================================
ALines (lines before reading input) = 66369
read_input 613
NONTERMINAL: MEMDISP notype
Adding MEMDISP to nonterminal dict
Nonterminal MEMDISP()::
Nonterminal name MEMDISP
read_flat_input 613
Hit a nonterminal, returning at: MODRM()::
BLines (lines remaining after reading input) = 66364
=============================================
Creating a generator 100
=============================================
ALines (lines before reading input) = 66364
read_input 617
NONTERMINAL: MODRM notype
Adding MODRM to nonterminal dict
Nonterminal MODRM()::
Nonterminal name MODRM
read_flat_input 617
Hit a nonterminal, returning at: MODRM64alt32()::
BLines (lines remaining after reading input) = 66357
=============================================
Creating a generator 101
=============================================
ALines (lines before reading input) = 66357
read_input 623
NONTERMINAL: MODRM64alt32 notype
Adding MODRM64alt32 to nonterminal dict
Nonterminal MODRM64alt32()::
Nonterminal name MODRM64alt32
read_flat_input 623
Hit a nonterminal, returning at: MODRM32()::
BLines (lines remaining after reading input) = 66308
=============================================
Creating a generator 102
=============================================
ALines (lines before reading input) = 66308
read_input 671
NONTERMINAL: MODRM32 notype
Adding MODRM32 to nonterminal dict
Nonterminal MODRM32()::
Nonterminal name MODRM32
read_flat_input 671
Hit a nonterminal, returning at: MODRM16()::
BLines (lines remaining after reading input) = 66283
=============================================
Creating a generator 103
=============================================
ALines (lines before reading input) = 66283
read_input 695
NONTERMINAL: MODRM16 notype
Adding MODRM16 to nonterminal dict
Nonterminal MODRM16()::
Nonterminal name MODRM16
read_flat_input 695
Hit a nonterminal, returning at: SIB()::
BLines (lines remaining after reading input) = 66258
=============================================
Creating a generator 104
=============================================
ALines (lines before reading input) = 66258
read_input 719
NONTERMINAL: SIB notype
Adding SIB to nonterminal dict
Nonterminal SIB()::
Nonterminal name SIB
read_flat_input 719
Hit a nonterminal, returning at: SIB_BASE0()::
BLines (lines remaining after reading input) = 66193
=============================================
Creating a generator 105
=============================================
ALines (lines before reading input) = 66193
read_input 783
NONTERMINAL: SIB_BASE0 notype
Adding SIB_BASE0 to nonterminal dict
Nonterminal SIB_BASE0()::
Nonterminal name SIB_BASE0
read_flat_input 783
Hit a nonterminal, returning at: OVERRIDE_SEG0()::
BLines (lines remaining after reading input) = 66172
=============================================
Creating a generator 106
=============================================
ALines (lines before reading input) = 66172
read_input 803
NONTERMINAL: OVERRIDE_SEG0 notype
Adding OVERRIDE_SEG0 to nonterminal dict
Nonterminal OVERRIDE_SEG0()::
Nonterminal name OVERRIDE_SEG0
read_flat_input 803
Hit a nonterminal, returning at: OVERRIDE_SEG1()::
BLines (lines remaining after reading input) = 66168
=============================================
Creating a generator 107
=============================================
ALines (lines before reading input) = 66168
read_input 806
NONTERMINAL: OVERRIDE_SEG1 notype
Adding OVERRIDE_SEG1 to nonterminal dict
Nonterminal OVERRIDE_SEG1()::
Nonterminal name OVERRIDE_SEG1
read_flat_input 806
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R()::
BLines (lines remaining after reading input) = 66164
=============================================
Creating a generator 108
=============================================
ALines (lines before reading input) = 66164
read_input 809
NONTERMINAL: XMM_R type= xed_reg_enum_t
Adding XMM_R to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R()::
Nonterminal name XMM_R
read_flat_input 809
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_32()::
BLines (lines remaining after reading input) = 66160
=============================================
Creating a generator 109
=============================================
ALines (lines before reading input) = 66160
read_input 812
NONTERMINAL: XMM_R_32 type= xed_reg_enum_t
Adding XMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_32()::
Nonterminal name XMM_R_32
read_flat_input 812
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_64()::
BLines (lines remaining after reading input) = 66151
=============================================
Creating a generator 110
=============================================
ALines (lines before reading input) = 66151
read_input 820
NONTERMINAL: XMM_R_64 type= xed_reg_enum_t
Adding XMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_64()::
Nonterminal name XMM_R_64
read_flat_input 820
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B()::
BLines (lines remaining after reading input) = 66134
=============================================
Creating a generator 111
=============================================
ALines (lines before reading input) = 66134
read_input 836
NONTERMINAL: XMM_B type= xed_reg_enum_t
Adding XMM_B to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B()::
Nonterminal name XMM_B
read_flat_input 836
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_32()::
BLines (lines remaining after reading input) = 66130
=============================================
Creating a generator 112
=============================================
ALines (lines before reading input) = 66130
read_input 839
NONTERMINAL: XMM_B_32 type= xed_reg_enum_t
Adding XMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_32()::
Nonterminal name XMM_B_32
read_flat_input 839
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_64()::
BLines (lines remaining after reading input) = 66121
=============================================
Creating a generator 113
=============================================
ALines (lines before reading input) = 66121
read_input 847
NONTERMINAL: XMM_B_64 type= xed_reg_enum_t
Adding XMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_64()::
Nonterminal name XMM_B_64
read_flat_input 847
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 66104
=============================================
Creating a generator 114
=============================================
ALines (lines before reading input) = 66104
read_input 863
NONTERMINAL: AVX_SPLITTER notype
Adding AVX_SPLITTER to nonterminal dict
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 863
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 66102
=============================================
Creating a generator 115
=============================================
ALines (lines before reading input) = 66102
read_input 864
NONTERMINAL: EVEX_SPLITTER notype
Adding EVEX_SPLITTER to nonterminal dict
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 864
Hit a nonterminal, returning at: BND_R_CHECK()::
BLines (lines remaining after reading input) = 66100
=============================================
Creating a generator 116
=============================================
ALines (lines before reading input) = 66100
read_input 865
NONTERMINAL: BND_R_CHECK notype
Adding BND_R_CHECK to nonterminal dict
Nonterminal BND_R_CHECK()::
Nonterminal name BND_R_CHECK
read_flat_input 865
Hit a nonterminal, returning at: BND_B_CHECK()::
BLines (lines remaining after reading input) = 66083
=============================================
Creating a generator 117
=============================================
ALines (lines before reading input) = 66083
read_input 881
NONTERMINAL: BND_B_CHECK notype
Adding BND_B_CHECK to nonterminal dict
Nonterminal BND_B_CHECK()::
Nonterminal name BND_B_CHECK
read_flat_input 881
Hit a nonterminal, returning at: xed_reg_enum_t BND_R()::
BLines (lines remaining after reading input) = 66066
=============================================
Creating a generator 118
=============================================
ALines (lines before reading input) = 66066
read_input 897
NONTERMINAL: BND_R type= xed_reg_enum_t
Adding BND_R to nonterminal dict
Nonterminal xed_reg_enum_t BND_R()::
Nonterminal name BND_R
read_flat_input 897
Hit a nonterminal, returning at: xed_reg_enum_t BND_B()::
BLines (lines remaining after reading input) = 66049
=============================================
Creating a generator 119
=============================================
ALines (lines before reading input) = 66049
read_input 913
NONTERMINAL: BND_B type= xed_reg_enum_t
Adding BND_B to nonterminal dict
Nonterminal xed_reg_enum_t BND_B()::
Nonterminal name BND_B
read_flat_input 913
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_R()::
BLines (lines remaining after reading input) = 66032
=============================================
Creating a generator 120
=============================================
ALines (lines before reading input) = 66032
read_input 929
NONTERMINAL: A_GPR_R type= xed_reg_enum_t
Adding A_GPR_R to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_R()::
Nonterminal name A_GPR_R
read_flat_input 929
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_B()::
BLines (lines remaining after reading input) = 66015
=============================================
Creating a generator 121
=============================================
ALines (lines before reading input) = 66015
read_input 945
NONTERMINAL: A_GPR_B type= xed_reg_enum_t
Adding A_GPR_B to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_B()::
Nonterminal name A_GPR_B
read_flat_input 945
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE()::
BLines (lines remaining after reading input) = 65998
=============================================
Creating a generator 122
=============================================
ALines (lines before reading input) = 65998
read_input 961
NONTERMINAL: XMM_SE type= xed_reg_enum_t
Adding XMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE()::
Nonterminal name XMM_SE
read_flat_input 961
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE64()::
BLines (lines remaining after reading input) = 65994
=============================================
Creating a generator 123
=============================================
ALines (lines before reading input) = 65994
read_input 964
NONTERMINAL: XMM_SE64 type= xed_reg_enum_t
Adding XMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE64()::
Nonterminal name XMM_SE64
read_flat_input 964
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE32()::
BLines (lines remaining after reading input) = 65977
=============================================
Creating a generator 124
=============================================
ALines (lines before reading input) = 65977
read_input 980
NONTERMINAL: XMM_SE32 type= xed_reg_enum_t
Adding XMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE32()::
Nonterminal name XMM_SE32
read_flat_input 980
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE()::
BLines (lines remaining after reading input) = 65960
=============================================
Creating a generator 125
=============================================
ALines (lines before reading input) = 65960
read_input 996
NONTERMINAL: YMM_SE type= xed_reg_enum_t
Adding YMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE()::
Nonterminal name YMM_SE
read_flat_input 996
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE64()::
BLines (lines remaining after reading input) = 65956
=============================================
Creating a generator 126
=============================================
ALines (lines before reading input) = 65956
read_input 999
NONTERMINAL: YMM_SE64 type= xed_reg_enum_t
Adding YMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE64()::
Nonterminal name YMM_SE64
read_flat_input 999
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE32()::
BLines (lines remaining after reading input) = 65939
=============================================
Creating a generator 127
=============================================
ALines (lines before reading input) = 65939
read_input 1015
NONTERMINAL: YMM_SE32 type= xed_reg_enum_t
Adding YMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE32()::
Nonterminal name YMM_SE32
read_flat_input 1015
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N()::
BLines (lines remaining after reading input) = 65922
=============================================
Creating a generator 128
=============================================
ALines (lines before reading input) = 65922
read_input 1031
NONTERMINAL: XMM_N type= xed_reg_enum_t
Adding XMM_N to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N()::
Nonterminal name XMM_N
read_flat_input 1031
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_32()::
BLines (lines remaining after reading input) = 65918
=============================================
Creating a generator 129
=============================================
ALines (lines before reading input) = 65918
read_input 1034
NONTERMINAL: XMM_N_32 type= xed_reg_enum_t
Adding XMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_32()::
Nonterminal name XMM_N_32
read_flat_input 1034
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_64()::
BLines (lines remaining after reading input) = 65909
=============================================
Creating a generator 130
=============================================
ALines (lines before reading input) = 65909
read_input 1042
NONTERMINAL: XMM_N_64 type= xed_reg_enum_t
Adding XMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_64()::
Nonterminal name XMM_N_64
read_flat_input 1042
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N()::
BLines (lines remaining after reading input) = 65892
=============================================
Creating a generator 131
=============================================
ALines (lines before reading input) = 65892
read_input 1058
NONTERMINAL: YMM_N type= xed_reg_enum_t
Adding YMM_N to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N()::
Nonterminal name YMM_N
read_flat_input 1058
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_32()::
BLines (lines remaining after reading input) = 65888
=============================================
Creating a generator 132
=============================================
ALines (lines before reading input) = 65888
read_input 1061
NONTERMINAL: YMM_N_32 type= xed_reg_enum_t
Adding YMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_32()::
Nonterminal name YMM_N_32
read_flat_input 1061
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_64()::
BLines (lines remaining after reading input) = 65879
=============================================
Creating a generator 133
=============================================
ALines (lines before reading input) = 65879
read_input 1069
NONTERMINAL: YMM_N_64 type= xed_reg_enum_t
Adding YMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_64()::
Nonterminal name YMM_N_64
read_flat_input 1069
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R()::
BLines (lines remaining after reading input) = 65862
=============================================
Creating a generator 134
=============================================
ALines (lines before reading input) = 65862
read_input 1085
NONTERMINAL: YMM_R type= xed_reg_enum_t
Adding YMM_R to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R()::
Nonterminal name YMM_R
read_flat_input 1085
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_32()::
BLines (lines remaining after reading input) = 65858
=============================================
Creating a generator 135
=============================================
ALines (lines before reading input) = 65858
read_input 1088
NONTERMINAL: YMM_R_32 type= xed_reg_enum_t
Adding YMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_32()::
Nonterminal name YMM_R_32
read_flat_input 1088
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_64()::
BLines (lines remaining after reading input) = 65849
=============================================
Creating a generator 136
=============================================
ALines (lines before reading input) = 65849
read_input 1096
NONTERMINAL: YMM_R_64 type= xed_reg_enum_t
Adding YMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_64()::
Nonterminal name YMM_R_64
read_flat_input 1096
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B()::
BLines (lines remaining after reading input) = 65832
=============================================
Creating a generator 137
=============================================
ALines (lines before reading input) = 65832
read_input 1112
NONTERMINAL: YMM_B type= xed_reg_enum_t
Adding YMM_B to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B()::
Nonterminal name YMM_B
read_flat_input 1112
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_32()::
BLines (lines remaining after reading input) = 65828
=============================================
Creating a generator 138
=============================================
ALines (lines before reading input) = 65828
read_input 1115
NONTERMINAL: YMM_B_32 type= xed_reg_enum_t
Adding YMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_32()::
Nonterminal name YMM_B_32
read_flat_input 1115
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_64()::
BLines (lines remaining after reading input) = 65819
=============================================
Creating a generator 139
=============================================
ALines (lines before reading input) = 65819
read_input 1123
NONTERMINAL: YMM_B_64 type= xed_reg_enum_t
Adding YMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_64()::
Nonterminal name YMM_B_64
read_flat_input 1123
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 65802
=============================================
Creating a generator 140
=============================================
ALines (lines before reading input) = 65802
read_input 1139
NONTERMINAL: AVX_SPLITTER notype
FOUND OLD PARSER FOR AVX_SPLITTER
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 1139
Hit a nonterminal, returning at: SE_IMM8()::
BLines (lines remaining after reading input) = 65799
=============================================
Creating a generator 140
=============================================
ALines (lines before reading input) = 65799
read_input 1141
NONTERMINAL: SE_IMM8 notype
Adding SE_IMM8 to nonterminal dict
Nonterminal SE_IMM8()::
Nonterminal name SE_IMM8
read_flat_input 1141
Hit a nonterminal, returning at: VMODRM_YMM()::
BLines (lines remaining after reading input) = 65797
=============================================
Creating a generator 141
=============================================
ALines (lines before reading input) = 65797
read_input 1142
NONTERMINAL: VMODRM_YMM notype
Adding VMODRM_YMM to nonterminal dict
Nonterminal VMODRM_YMM()::
Nonterminal name VMODRM_YMM
read_flat_input 1142
Hit a nonterminal, returning at: VMODRM_XMM()::
BLines (lines remaining after reading input) = 65793
=============================================
Creating a generator 142
=============================================
ALines (lines before reading input) = 65793
read_input 1145
NONTERMINAL: VMODRM_XMM notype
Adding VMODRM_XMM to nonterminal dict
Nonterminal VMODRM_XMM()::
Nonterminal name VMODRM_XMM
read_flat_input 1145
Hit a nonterminal, returning at: VSIB_YMM()::
BLines (lines remaining after reading input) = 65789
=============================================
Creating a generator 143
=============================================
ALines (lines before reading input) = 65789
read_input 1148
NONTERMINAL: VSIB_YMM notype
Adding VSIB_YMM to nonterminal dict
Nonterminal VSIB_YMM()::
Nonterminal name VSIB_YMM
read_flat_input 1148
Hit a nonterminal, returning at: VSIB_XMM()::
BLines (lines remaining after reading input) = 65784
=============================================
Creating a generator 144
=============================================
ALines (lines before reading input) = 65784
read_input 1152
NONTERMINAL: VSIB_XMM notype
Adding VSIB_XMM to nonterminal dict
Nonterminal VSIB_XMM()::
Nonterminal name VSIB_XMM
read_flat_input 1152
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 65779
=============================================
Creating a generator 145
=============================================
ALines (lines before reading input) = 65779
read_input 1156
NONTERMINAL: VSIB_INDEX_YMM type= xed_reg_enum_t
Adding VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_YMM()::
Nonterminal name VSIB_INDEX_YMM
read_flat_input 1156
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 65762
=============================================
Creating a generator 146
=============================================
ALines (lines before reading input) = 65762
read_input 1172
NONTERMINAL: VSIB_INDEX_XMM type= xed_reg_enum_t
Adding VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_XMM()::
Nonterminal name VSIB_INDEX_XMM
read_flat_input 1172
Hit a nonterminal, returning at: VSIB_BASE()::
BLines (lines remaining after reading input) = 65745
=============================================
Creating a generator 147
=============================================
ALines (lines before reading input) = 65745
read_input 1188
NONTERMINAL: VSIB_BASE notype
Adding VSIB_BASE to nonterminal dict
Nonterminal VSIB_BASE()::
Nonterminal name VSIB_BASE
read_flat_input 1188
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_N()::
BLines (lines remaining after reading input) = 65726
=============================================
Creating a generator 148
=============================================
ALines (lines before reading input) = 65726
read_input 1206
NONTERMINAL: VGPRy_N type= xed_reg_enum_t
Adding VGPRy_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_N()::
Nonterminal name VGPRy_N
read_flat_input 1206
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N()::
BLines (lines remaining after reading input) = 65722
=============================================
Creating a generator 149
=============================================
ALines (lines before reading input) = 65722
read_input 1209
NONTERMINAL: VGPR32_N type= xed_reg_enum_t
Adding VGPR32_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N()::
Nonterminal name VGPR32_N
read_flat_input 1209
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B()::
BLines (lines remaining after reading input) = 65718
=============================================
Creating a generator 150
=============================================
ALines (lines before reading input) = 65718
read_input 1212
NONTERMINAL: VGPR32_B type= xed_reg_enum_t
Adding VGPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B()::
Nonterminal name VGPR32_B
read_flat_input 1212
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R()::
BLines (lines remaining after reading input) = 65714
=============================================
Creating a generator 151
=============================================
ALines (lines before reading input) = 65714
read_input 1215
NONTERMINAL: VGPR32_R type= xed_reg_enum_t
Adding VGPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R()::
Nonterminal name VGPR32_R
read_flat_input 1215
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_32()::
BLines (lines remaining after reading input) = 65710
=============================================
Creating a generator 152
=============================================
ALines (lines before reading input) = 65710
read_input 1218
NONTERMINAL: VGPR32_N_32 type= xed_reg_enum_t
Adding VGPR32_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_32()::
Nonterminal name VGPR32_N_32
read_flat_input 1218
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_64()::
BLines (lines remaining after reading input) = 65701
=============================================
Creating a generator 153
=============================================
ALines (lines before reading input) = 65701
read_input 1226
NONTERMINAL: VGPR32_N_64 type= xed_reg_enum_t
Adding VGPR32_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_64()::
Nonterminal name VGPR32_N_64
read_flat_input 1226
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_N()::
BLines (lines remaining after reading input) = 65684
=============================================
Creating a generator 154
=============================================
ALines (lines before reading input) = 65684
read_input 1242
NONTERMINAL: VGPR64_N type= xed_reg_enum_t
Adding VGPR64_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_N()::
Nonterminal name VGPR64_N
read_flat_input 1242
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_32()::
BLines (lines remaining after reading input) = 65667
=============================================
Creating a generator 155
=============================================
ALines (lines before reading input) = 65667
read_input 1258
NONTERMINAL: VGPR32_R_32 type= xed_reg_enum_t
Adding VGPR32_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_32()::
Nonterminal name VGPR32_R_32
read_flat_input 1258
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_64()::
BLines (lines remaining after reading input) = 65658
=============================================
Creating a generator 156
=============================================
ALines (lines before reading input) = 65658
read_input 1266
NONTERMINAL: VGPR32_R_64 type= xed_reg_enum_t
Adding VGPR32_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_64()::
Nonterminal name VGPR32_R_64
read_flat_input 1266
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_R()::
BLines (lines remaining after reading input) = 65641
=============================================
Creating a generator 157
=============================================
ALines (lines before reading input) = 65641
read_input 1282
NONTERMINAL: VGPR64_R type= xed_reg_enum_t
Adding VGPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_R()::
Nonterminal name VGPR64_R
read_flat_input 1282
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_32()::
BLines (lines remaining after reading input) = 65624
=============================================
Creating a generator 158
=============================================
ALines (lines before reading input) = 65624
read_input 1298
NONTERMINAL: VGPR32_B_32 type= xed_reg_enum_t
Adding VGPR32_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_32()::
Nonterminal name VGPR32_B_32
read_flat_input 1298
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_64()::
BLines (lines remaining after reading input) = 65615
=============================================
Creating a generator 159
=============================================
ALines (lines before reading input) = 65615
read_input 1306
NONTERMINAL: VGPR32_B_64 type= xed_reg_enum_t
Adding VGPR32_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_64()::
Nonterminal name VGPR32_B_64
read_flat_input 1306
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_B()::
BLines (lines remaining after reading input) = 65598
=============================================
Creating a generator 160
=============================================
ALines (lines before reading input) = 65598
read_input 1322
NONTERMINAL: VGPR64_B type= xed_reg_enum_t
Adding VGPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_B()::
Nonterminal name VGPR64_B
read_flat_input 1322
Hit a nonterminal, returning at: NELEM_TUPLE1_4X()::
BLines (lines remaining after reading input) = 65581
=============================================
Creating a generator 161
=============================================
ALines (lines before reading input) = 65581
read_input 1338
NONTERMINAL: NELEM_TUPLE1_4X notype
Adding NELEM_TUPLE1_4X to nonterminal dict
Nonterminal NELEM_TUPLE1_4X()::
Nonterminal name NELEM_TUPLE1_4X
read_flat_input 1338
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 65577
=============================================
Creating a generator 162
=============================================
ALines (lines before reading input) = 65577
read_input 1341
NONTERMINAL: EVEX_SPLITTER notype
FOUND OLD PARSER FOR EVEX_SPLITTER
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 1341
Hit a nonterminal, returning at: AVX512_ROUND()::
BLines (lines remaining after reading input) = 65573
=============================================
Creating a generator 162
=============================================
ALines (lines before reading input) = 65573
read_input 1344
NONTERMINAL: AVX512_ROUND notype
Adding AVX512_ROUND to nonterminal dict
Nonterminal AVX512_ROUND()::
Nonterminal name AVX512_ROUND
read_flat_input 1344
Hit a nonterminal, returning at: SAE()::
BLines (lines remaining after reading input) = 65568
=============================================
Creating a generator 163
=============================================
ALines (lines before reading input) = 65568
read_input 1348
NONTERMINAL: SAE notype
Adding SAE to nonterminal dict
Nonterminal SAE()::
Nonterminal name SAE
read_flat_input 1348
Hit a nonterminal, returning at: ESIZE_128_BITS()::
BLines (lines remaining after reading input) = 65565
=============================================
Creating a generator 164
=============================================
ALines (lines before reading input) = 65565
read_input 1350
NONTERMINAL: ESIZE_128_BITS notype
Adding ESIZE_128_BITS to nonterminal dict
Nonterminal ESIZE_128_BITS()::
Nonterminal name ESIZE_128_BITS
read_flat_input 1350
Hit a nonterminal, returning at: ESIZE_64_BITS()::
BLines (lines remaining after reading input) = 65563
=============================================
Creating a generator 165
=============================================
ALines (lines before reading input) = 65563
read_input 1351
NONTERMINAL: ESIZE_64_BITS notype
Adding ESIZE_64_BITS to nonterminal dict
Nonterminal ESIZE_64_BITS()::
Nonterminal name ESIZE_64_BITS
read_flat_input 1351
Hit a nonterminal, returning at: ESIZE_32_BITS()::
BLines (lines remaining after reading input) = 65561
=============================================
Creating a generator 166
=============================================
ALines (lines before reading input) = 65561
read_input 1352
NONTERMINAL: ESIZE_32_BITS notype
Adding ESIZE_32_BITS to nonterminal dict
Nonterminal ESIZE_32_BITS()::
Nonterminal name ESIZE_32_BITS
read_flat_input 1352
Hit a nonterminal, returning at: ESIZE_16_BITS()::
BLines (lines remaining after reading input) = 65559
=============================================
Creating a generator 167
=============================================
ALines (lines before reading input) = 65559
read_input 1353
NONTERMINAL: ESIZE_16_BITS notype
Adding ESIZE_16_BITS to nonterminal dict
Nonterminal ESIZE_16_BITS()::
Nonterminal name ESIZE_16_BITS
read_flat_input 1353
Hit a nonterminal, returning at: ESIZE_8_BITS()::
BLines (lines remaining after reading input) = 65557
=============================================
Creating a generator 168
=============================================
ALines (lines before reading input) = 65557
read_input 1354
NONTERMINAL: ESIZE_8_BITS notype
Adding ESIZE_8_BITS to nonterminal dict
Nonterminal ESIZE_8_BITS()::
Nonterminal name ESIZE_8_BITS
read_flat_input 1354
Hit a nonterminal, returning at: ESIZE_4_BITS()::
BLines (lines remaining after reading input) = 65555
=============================================
Creating a generator 169
=============================================
ALines (lines before reading input) = 65555
read_input 1355
NONTERMINAL: ESIZE_4_BITS notype
Adding ESIZE_4_BITS to nonterminal dict
Nonterminal ESIZE_4_BITS()::
Nonterminal name ESIZE_4_BITS
read_flat_input 1355
Hit a nonterminal, returning at: ESIZE_2_BITS()::
BLines (lines remaining after reading input) = 65553
=============================================
Creating a generator 170
=============================================
ALines (lines before reading input) = 65553
read_input 1356
NONTERMINAL: ESIZE_2_BITS notype
Adding ESIZE_2_BITS to nonterminal dict
Nonterminal ESIZE_2_BITS()::
Nonterminal name ESIZE_2_BITS
read_flat_input 1356
Hit a nonterminal, returning at: ESIZE_1_BITS()::
BLines (lines remaining after reading input) = 65551
=============================================
Creating a generator 171
=============================================
ALines (lines before reading input) = 65551
read_input 1357
NONTERMINAL: ESIZE_1_BITS notype
Adding ESIZE_1_BITS to nonterminal dict
Nonterminal ESIZE_1_BITS()::
Nonterminal name ESIZE_1_BITS
read_flat_input 1357
Hit a nonterminal, returning at: NELEM_MOVDDUP()::
BLines (lines remaining after reading input) = 65549
=============================================
Creating a generator 172
=============================================
ALines (lines before reading input) = 65549
read_input 1358
NONTERMINAL: NELEM_MOVDDUP notype
Adding NELEM_MOVDDUP to nonterminal dict
Nonterminal NELEM_MOVDDUP()::
Nonterminal name NELEM_MOVDDUP
read_flat_input 1358
Hit a nonterminal, returning at: NELEM_FULLMEM()::
BLines (lines remaining after reading input) = 65545
=============================================
Creating a generator 173
=============================================
ALines (lines before reading input) = 65545
read_input 1361
NONTERMINAL: NELEM_FULLMEM notype
Adding NELEM_FULLMEM to nonterminal dict
Nonterminal NELEM_FULLMEM()::
Nonterminal name NELEM_FULLMEM
read_flat_input 1361
Hit a nonterminal, returning at: NELEM_HALFMEM()::
BLines (lines remaining after reading input) = 65514
=============================================
Creating a generator 174
=============================================
ALines (lines before reading input) = 65514
read_input 1391
NONTERMINAL: NELEM_HALFMEM notype
Adding NELEM_HALFMEM to nonterminal dict
Nonterminal NELEM_HALFMEM()::
Nonterminal name NELEM_HALFMEM
read_flat_input 1391
Hit a nonterminal, returning at: NELEM_QUARTERMEM()::
BLines (lines remaining after reading input) = 65483
=============================================
Creating a generator 175
=============================================
ALines (lines before reading input) = 65483
read_input 1421
NONTERMINAL: NELEM_QUARTERMEM notype
Adding NELEM_QUARTERMEM to nonterminal dict
Nonterminal NELEM_QUARTERMEM()::
Nonterminal name NELEM_QUARTERMEM
read_flat_input 1421
Hit a nonterminal, returning at: NELEM_EIGHTHMEM()::
BLines (lines remaining after reading input) = 65452
=============================================
Creating a generator 176
=============================================
ALines (lines before reading input) = 65452
read_input 1451
NONTERMINAL: NELEM_EIGHTHMEM notype
Adding NELEM_EIGHTHMEM to nonterminal dict
Nonterminal NELEM_EIGHTHMEM()::
Nonterminal name NELEM_EIGHTHMEM
read_flat_input 1451
Hit a nonterminal, returning at: NELEM_GPR_READER_BYTE()::
BLines (lines remaining after reading input) = 65421
=============================================
Creating a generator 177
=============================================
ALines (lines before reading input) = 65421
read_input 1481
NONTERMINAL: NELEM_GPR_READER_BYTE notype
Adding NELEM_GPR_READER_BYTE to nonterminal dict
Nonterminal NELEM_GPR_READER_BYTE()::
Nonterminal name NELEM_GPR_READER_BYTE
read_flat_input 1481
Hit a nonterminal, returning at: NELEM_GPR_READER_WORD()::
BLines (lines remaining after reading input) = 65417
=============================================
Creating a generator 178
=============================================
ALines (lines before reading input) = 65417
read_input 1484
NONTERMINAL: NELEM_GPR_READER_WORD notype
Adding NELEM_GPR_READER_WORD to nonterminal dict
Nonterminal NELEM_GPR_READER_WORD()::
Nonterminal name NELEM_GPR_READER_WORD
read_flat_input 1484
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_D()::
BLines (lines remaining after reading input) = 65413
=============================================
Creating a generator 179
=============================================
ALines (lines before reading input) = 65413
read_input 1487
NONTERMINAL: NELEM_GPR_WRITER_LDOP_D notype
Adding NELEM_GPR_WRITER_LDOP_D to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_D()::
Nonterminal name NELEM_GPR_WRITER_LDOP_D
read_flat_input 1487
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_Q()::
BLines (lines remaining after reading input) = 65409
=============================================
Creating a generator 180
=============================================
ALines (lines before reading input) = 65409
read_input 1490
NONTERMINAL: NELEM_GPR_WRITER_LDOP_Q notype
Adding NELEM_GPR_WRITER_LDOP_Q to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_Q()::
Nonterminal name NELEM_GPR_WRITER_LDOP_Q
read_flat_input 1490
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_BYTE()::
BLines (lines remaining after reading input) = 65405
=============================================
Creating a generator 181
=============================================
ALines (lines before reading input) = 65405
read_input 1493
NONTERMINAL: NELEM_GPR_WRITER_STORE_BYTE notype
Adding NELEM_GPR_WRITER_STORE_BYTE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_BYTE()::
Nonterminal name NELEM_GPR_WRITER_STORE_BYTE
read_flat_input 1493
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_WORD()::
BLines (lines remaining after reading input) = 65401
=============================================
Creating a generator 182
=============================================
ALines (lines before reading input) = 65401
read_input 1496
NONTERMINAL: NELEM_GPR_WRITER_STORE_WORD notype
Adding NELEM_GPR_WRITER_STORE_WORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_WORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_WORD
read_flat_input 1496
Hit a nonterminal, returning at: NELEM_TUPLE1_BYTE()::
BLines (lines remaining after reading input) = 65397
=============================================
Creating a generator 183
=============================================
ALines (lines before reading input) = 65397
read_input 1499
NONTERMINAL: NELEM_TUPLE1_BYTE notype
Adding NELEM_TUPLE1_BYTE to nonterminal dict
Nonterminal NELEM_TUPLE1_BYTE()::
Nonterminal name NELEM_TUPLE1_BYTE
read_flat_input 1499
Hit a nonterminal, returning at: NELEM_TUPLE1_WORD()::
BLines (lines remaining after reading input) = 65393
=============================================
Creating a generator 184
=============================================
ALines (lines before reading input) = 65393
read_input 1502
NONTERMINAL: NELEM_TUPLE1_WORD notype
Adding NELEM_TUPLE1_WORD to nonterminal dict
Nonterminal NELEM_TUPLE1_WORD()::
Nonterminal name NELEM_TUPLE1_WORD
read_flat_input 1502
Hit a nonterminal, returning at: NELEM_SCALAR()::
BLines (lines remaining after reading input) = 65389
=============================================
Creating a generator 185
=============================================
ALines (lines before reading input) = 65389
read_input 1505
NONTERMINAL: NELEM_SCALAR notype
Adding NELEM_SCALAR to nonterminal dict
Nonterminal NELEM_SCALAR()::
Nonterminal name NELEM_SCALAR
read_flat_input 1505
Hit a nonterminal, returning at: NELEM_TUPLE1_SUBDWORD()::
BLines (lines remaining after reading input) = 65385
=============================================
Creating a generator 186
=============================================
ALines (lines before reading input) = 65385
read_input 1508
NONTERMINAL: NELEM_TUPLE1_SUBDWORD notype
Adding NELEM_TUPLE1_SUBDWORD to nonterminal dict
Nonterminal NELEM_TUPLE1_SUBDWORD()::
Nonterminal name NELEM_TUPLE1_SUBDWORD
read_flat_input 1508
Hit a nonterminal, returning at: NELEM_GPR_READER()::
BLines (lines remaining after reading input) = 65381
=============================================
Creating a generator 187
=============================================
ALines (lines before reading input) = 65381
read_input 1511
NONTERMINAL: NELEM_GPR_READER notype
Adding NELEM_GPR_READER to nonterminal dict
Nonterminal NELEM_GPR_READER()::
Nonterminal name NELEM_GPR_READER
read_flat_input 1511
Hit a nonterminal, returning at: NELEM_GPR_READER_SUBDWORD()::
BLines (lines remaining after reading input) = 65377
=============================================
Creating a generator 188
=============================================
ALines (lines before reading input) = 65377
read_input 1514
NONTERMINAL: NELEM_GPR_READER_SUBDWORD notype
Adding NELEM_GPR_READER_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_READER_SUBDWORD()::
Nonterminal name NELEM_GPR_READER_SUBDWORD
read_flat_input 1514
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP()::
BLines (lines remaining after reading input) = 65373
=============================================
Creating a generator 189
=============================================
ALines (lines before reading input) = 65373
read_input 1517
NONTERMINAL: NELEM_GPR_WRITER_LDOP notype
Adding NELEM_GPR_WRITER_LDOP to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP()::
Nonterminal name NELEM_GPR_WRITER_LDOP
read_flat_input 1517
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE()::
BLines (lines remaining after reading input) = 65369
=============================================
Creating a generator 190
=============================================
ALines (lines before reading input) = 65369
read_input 1520
NONTERMINAL: NELEM_GPR_WRITER_STORE notype
Adding NELEM_GPR_WRITER_STORE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE()::
Nonterminal name NELEM_GPR_WRITER_STORE
read_flat_input 1520
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_SUBDWORD()::
BLines (lines remaining after reading input) = 65365
=============================================
Creating a generator 191
=============================================
ALines (lines before reading input) = 65365
read_input 1523
NONTERMINAL: NELEM_GPR_WRITER_STORE_SUBDWORD notype
Adding NELEM_GPR_WRITER_STORE_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_SUBDWORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_SUBDWORD
read_flat_input 1523
Hit a nonterminal, returning at: NELEM_TUPLE1()::
BLines (lines remaining after reading input) = 65361
=============================================
Creating a generator 192
=============================================
ALines (lines before reading input) = 65361
read_input 1526
NONTERMINAL: NELEM_TUPLE1 notype
Adding NELEM_TUPLE1 to nonterminal dict
Nonterminal NELEM_TUPLE1()::
Nonterminal name NELEM_TUPLE1
read_flat_input 1526
Hit a nonterminal, returning at: NELEM_GSCAT()::
BLines (lines remaining after reading input) = 65357
=============================================
Creating a generator 193
=============================================
ALines (lines before reading input) = 65357
read_input 1529
NONTERMINAL: NELEM_GSCAT notype
Adding NELEM_GSCAT to nonterminal dict
Nonterminal NELEM_GSCAT()::
Nonterminal name NELEM_GSCAT
read_flat_input 1529
Hit a nonterminal, returning at: NELEM_TUPLE2()::
BLines (lines remaining after reading input) = 65353
=============================================
Creating a generator 194
=============================================
ALines (lines before reading input) = 65353
read_input 1532
NONTERMINAL: NELEM_TUPLE2 notype
Adding NELEM_TUPLE2 to nonterminal dict
Nonterminal NELEM_TUPLE2()::
Nonterminal name NELEM_TUPLE2
read_flat_input 1532
Hit a nonterminal, returning at: NELEM_TUPLE4()::
BLines (lines remaining after reading input) = 65349
=============================================
Creating a generator 195
=============================================
ALines (lines before reading input) = 65349
read_input 1535
NONTERMINAL: NELEM_TUPLE4 notype
Adding NELEM_TUPLE4 to nonterminal dict
Nonterminal NELEM_TUPLE4()::
Nonterminal name NELEM_TUPLE4
read_flat_input 1535
Hit a nonterminal, returning at: NELEM_TUPLE8()::
BLines (lines remaining after reading input) = 65345
=============================================
Creating a generator 196
=============================================
ALines (lines before reading input) = 65345
read_input 1538
NONTERMINAL: NELEM_TUPLE8 notype
Adding NELEM_TUPLE8 to nonterminal dict
Nonterminal NELEM_TUPLE8()::
Nonterminal name NELEM_TUPLE8
read_flat_input 1538
Hit a nonterminal, returning at: NELEM_MEM128()::
BLines (lines remaining after reading input) = 65341
=============================================
Creating a generator 197
=============================================
ALines (lines before reading input) = 65341
read_input 1541
NONTERMINAL: NELEM_MEM128 notype
Adding NELEM_MEM128 to nonterminal dict
Nonterminal NELEM_MEM128()::
Nonterminal name NELEM_MEM128
read_flat_input 1541
Hit a nonterminal, returning at: NELEM_FULL()::
BLines (lines remaining after reading input) = 65338
=============================================
Creating a generator 198
=============================================
ALines (lines before reading input) = 65338
read_input 1543
NONTERMINAL: NELEM_FULL notype
Adding NELEM_FULL to nonterminal dict
Nonterminal NELEM_FULL()::
Nonterminal name NELEM_FULL
read_flat_input 1543
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 65319
=============================================
Creating a generator 199
=============================================
ALines (lines before reading input) = 65319
read_input 1561
NONTERMINAL: NELEM_HALF notype
Adding NELEM_HALF to nonterminal dict
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 1561
Hit a nonterminal, returning at: FIX_ROUND_LEN512()::
BLines (lines remaining after reading input) = 65312
=============================================
Creating a generator 200
=============================================
ALines (lines before reading input) = 65312
read_input 1567
NONTERMINAL: FIX_ROUND_LEN512 notype
Adding FIX_ROUND_LEN512 to nonterminal dict
Nonterminal FIX_ROUND_LEN512()::
Nonterminal name FIX_ROUND_LEN512
read_flat_input 1567
Hit a nonterminal, returning at: FIX_ROUND_LEN128()::
BLines (lines remaining after reading input) = 65308
=============================================
Creating a generator 201
=============================================
ALines (lines before reading input) = 65308
read_input 1570
NONTERMINAL: FIX_ROUND_LEN128 notype
Adding FIX_ROUND_LEN128 to nonterminal dict
Nonterminal FIX_ROUND_LEN128()::
Nonterminal name FIX_ROUND_LEN128
read_flat_input 1570
Hit a nonterminal, returning at: UISA_VMODRM_ZMM()::
BLines (lines remaining after reading input) = 65304
=============================================
Creating a generator 202
=============================================
ALines (lines before reading input) = 65304
read_input 1573
NONTERMINAL: UISA_VMODRM_ZMM notype
Adding UISA_VMODRM_ZMM to nonterminal dict
Nonterminal UISA_VMODRM_ZMM()::
Nonterminal name UISA_VMODRM_ZMM
read_flat_input 1573
Hit a nonterminal, returning at: UISA_VMODRM_YMM()::
BLines (lines remaining after reading input) = 65300
=============================================
Creating a generator 203
=============================================
ALines (lines before reading input) = 65300
read_input 1576
NONTERMINAL: UISA_VMODRM_YMM notype
Adding UISA_VMODRM_YMM to nonterminal dict
Nonterminal UISA_VMODRM_YMM()::
Nonterminal name UISA_VMODRM_YMM
read_flat_input 1576
Hit a nonterminal, returning at: UISA_VMODRM_XMM()::
BLines (lines remaining after reading input) = 65296
=============================================
Creating a generator 204
=============================================
ALines (lines before reading input) = 65296
read_input 1579
NONTERMINAL: UISA_VMODRM_XMM notype
Adding UISA_VMODRM_XMM to nonterminal dict
Nonterminal UISA_VMODRM_XMM()::
Nonterminal name UISA_VMODRM_XMM
read_flat_input 1579
Hit a nonterminal, returning at: UISA_VSIB_ZMM()::
BLines (lines remaining after reading input) = 65292
=============================================
Creating a generator 205
=============================================
ALines (lines before reading input) = 65292
read_input 1582
NONTERMINAL: UISA_VSIB_ZMM notype
Adding UISA_VSIB_ZMM to nonterminal dict
Nonterminal UISA_VSIB_ZMM()::
Nonterminal name UISA_VSIB_ZMM
read_flat_input 1582
Hit a nonterminal, returning at: UISA_VSIB_YMM()::
BLines (lines remaining after reading input) = 65287
=============================================
Creating a generator 206
=============================================
ALines (lines before reading input) = 65287
read_input 1586
NONTERMINAL: UISA_VSIB_YMM notype
Adding UISA_VSIB_YMM to nonterminal dict
Nonterminal UISA_VSIB_YMM()::
Nonterminal name UISA_VSIB_YMM
read_flat_input 1586
Hit a nonterminal, returning at: UISA_VSIB_XMM()::
BLines (lines remaining after reading input) = 65282
=============================================
Creating a generator 207
=============================================
ALines (lines before reading input) = 65282
read_input 1590
NONTERMINAL: UISA_VSIB_XMM notype
Adding UISA_VSIB_XMM to nonterminal dict
Nonterminal UISA_VSIB_XMM()::
Nonterminal name UISA_VSIB_XMM
read_flat_input 1590
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
BLines (lines remaining after reading input) = 65277
=============================================
Creating a generator 208
=============================================
ALines (lines before reading input) = 65277
read_input 1594
NONTERMINAL: UISA_VSIB_INDEX_ZMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_ZMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
Nonterminal name UISA_VSIB_INDEX_ZMM
read_flat_input 1594
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 65244
=============================================
Creating a generator 209
=============================================
ALines (lines before reading input) = 65244
read_input 1626
NONTERMINAL: UISA_VSIB_INDEX_YMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
Nonterminal name UISA_VSIB_INDEX_YMM
read_flat_input 1626
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 65211
=============================================
Creating a generator 210
=============================================
ALines (lines before reading input) = 65211
read_input 1658
NONTERMINAL: UISA_VSIB_INDEX_XMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
Nonterminal name UISA_VSIB_INDEX_XMM
read_flat_input 1658
Hit a nonterminal, returning at: UISA_VSIB_BASE()::
BLines (lines remaining after reading input) = 65178
=============================================
Creating a generator 211
=============================================
ALines (lines before reading input) = 65178
read_input 1690
NONTERMINAL: UISA_VSIB_BASE notype
Adding UISA_VSIB_BASE to nonterminal dict
Nonterminal UISA_VSIB_BASE()::
Nonterminal name UISA_VSIB_BASE
read_flat_input 1690
Hit a nonterminal, returning at: xed_reg_enum_t MASK1()::
BLines (lines remaining after reading input) = 65159
=============================================
Creating a generator 212
=============================================
ALines (lines before reading input) = 65159
read_input 1708
NONTERMINAL: MASK1 type= xed_reg_enum_t
Adding MASK1 to nonterminal dict
Nonterminal xed_reg_enum_t MASK1()::
Nonterminal name MASK1
read_flat_input 1708
Hit a nonterminal, returning at: xed_reg_enum_t MASKNOT0()::
BLines (lines remaining after reading input) = 65150
=============================================
Creating a generator 213
=============================================
ALines (lines before reading input) = 65150
read_input 1716
NONTERMINAL: MASKNOT0 type= xed_reg_enum_t
Adding MASKNOT0 to nonterminal dict
Nonterminal xed_reg_enum_t MASKNOT0()::
Nonterminal name MASKNOT0
read_flat_input 1716
Hit a nonterminal, returning at: xed_reg_enum_t MASK_R()::
BLines (lines remaining after reading input) = 65141
=============================================
Creating a generator 214
=============================================
ALines (lines before reading input) = 65141
read_input 1724
NONTERMINAL: MASK_R type= xed_reg_enum_t
Adding MASK_R to nonterminal dict
Nonterminal xed_reg_enum_t MASK_R()::
Nonterminal name MASK_R
read_flat_input 1724
Hit a nonterminal, returning at: xed_reg_enum_t MASK_B()::
BLines (lines remaining after reading input) = 65132
=============================================
Creating a generator 215
=============================================
ALines (lines before reading input) = 65132
read_input 1732
NONTERMINAL: MASK_B type= xed_reg_enum_t
Adding MASK_B to nonterminal dict
Nonterminal xed_reg_enum_t MASK_B()::
Nonterminal name MASK_B
read_flat_input 1732
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N()::
BLines (lines remaining after reading input) = 65123
=============================================
Creating a generator 216
=============================================
ALines (lines before reading input) = 65123
read_input 1740
NONTERMINAL: MASK_N type= xed_reg_enum_t
Adding MASK_N to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N()::
Nonterminal name MASK_N
read_flat_input 1740
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N64()::
BLines (lines remaining after reading input) = 65119
=============================================
Creating a generator 217
=============================================
ALines (lines before reading input) = 65119
read_input 1743
NONTERMINAL: MASK_N64 type= xed_reg_enum_t
Adding MASK_N64 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N64()::
Nonterminal name MASK_N64
read_flat_input 1743
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N32()::
BLines (lines remaining after reading input) = 65110
=============================================
Creating a generator 218
=============================================
ALines (lines before reading input) = 65110
read_input 1751
NONTERMINAL: MASK_N32 type= xed_reg_enum_t
Adding MASK_N32 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N32()::
Nonterminal name MASK_N32
read_flat_input 1751
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3()::
BLines (lines remaining after reading input) = 65101
=============================================
Creating a generator 219
=============================================
ALines (lines before reading input) = 65101
read_input 1759
NONTERMINAL: XMM_R3 type= xed_reg_enum_t
Adding XMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3()::
Nonterminal name XMM_R3
read_flat_input 1759
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_32()::
BLines (lines remaining after reading input) = 65097
=============================================
Creating a generator 220
=============================================
ALines (lines before reading input) = 65097
read_input 1762
NONTERMINAL: XMM_R3_32 type= xed_reg_enum_t
Adding XMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_32()::
Nonterminal name XMM_R3_32
read_flat_input 1762
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_64()::
BLines (lines remaining after reading input) = 65088
=============================================
Creating a generator 221
=============================================
ALines (lines before reading input) = 65088
read_input 1770
NONTERMINAL: XMM_R3_64 type= xed_reg_enum_t
Adding XMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_64()::
Nonterminal name XMM_R3_64
read_flat_input 1770
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3()::
BLines (lines remaining after reading input) = 65055
=============================================
Creating a generator 222
=============================================
ALines (lines before reading input) = 65055
read_input 1802
NONTERMINAL: YMM_R3 type= xed_reg_enum_t
Adding YMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3()::
Nonterminal name YMM_R3
read_flat_input 1802
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_32()::
BLines (lines remaining after reading input) = 65051
=============================================
Creating a generator 223
=============================================
ALines (lines before reading input) = 65051
read_input 1805
NONTERMINAL: YMM_R3_32 type= xed_reg_enum_t
Adding YMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_32()::
Nonterminal name YMM_R3_32
read_flat_input 1805
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_64()::
BLines (lines remaining after reading input) = 65042
=============================================
Creating a generator 224
=============================================
ALines (lines before reading input) = 65042
read_input 1813
NONTERMINAL: YMM_R3_64 type= xed_reg_enum_t
Adding YMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_64()::
Nonterminal name YMM_R3_64
read_flat_input 1813
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3()::
BLines (lines remaining after reading input) = 65009
=============================================
Creating a generator 225
=============================================
ALines (lines before reading input) = 65009
read_input 1845
NONTERMINAL: ZMM_R3 type= xed_reg_enum_t
Adding ZMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3()::
Nonterminal name ZMM_R3
read_flat_input 1845
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_32()::
BLines (lines remaining after reading input) = 65005
=============================================
Creating a generator 226
=============================================
ALines (lines before reading input) = 65005
read_input 1848
NONTERMINAL: ZMM_R3_32 type= xed_reg_enum_t
Adding ZMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_32()::
Nonterminal name ZMM_R3_32
read_flat_input 1848
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_64()::
BLines (lines remaining after reading input) = 64996
=============================================
Creating a generator 227
=============================================
ALines (lines before reading input) = 64996
read_input 1856
NONTERMINAL: ZMM_R3_64 type= xed_reg_enum_t
Adding ZMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_64()::
Nonterminal name ZMM_R3_64
read_flat_input 1856
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3()::
BLines (lines remaining after reading input) = 64963
=============================================
Creating a generator 228
=============================================
ALines (lines before reading input) = 64963
read_input 1888
NONTERMINAL: XMM_B3 type= xed_reg_enum_t
Adding XMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3()::
Nonterminal name XMM_B3
read_flat_input 1888
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_32()::
BLines (lines remaining after reading input) = 64959
=============================================
Creating a generator 229
=============================================
ALines (lines before reading input) = 64959
read_input 1891
NONTERMINAL: XMM_B3_32 type= xed_reg_enum_t
Adding XMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_32()::
Nonterminal name XMM_B3_32
read_flat_input 1891
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_64()::
BLines (lines remaining after reading input) = 64950
=============================================
Creating a generator 230
=============================================
ALines (lines before reading input) = 64950
read_input 1899
NONTERMINAL: XMM_B3_64 type= xed_reg_enum_t
Adding XMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_64()::
Nonterminal name XMM_B3_64
read_flat_input 1899
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3()::
BLines (lines remaining after reading input) = 64917
=============================================
Creating a generator 231
=============================================
ALines (lines before reading input) = 64917
read_input 1931
NONTERMINAL: YMM_B3 type= xed_reg_enum_t
Adding YMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3()::
Nonterminal name YMM_B3
read_flat_input 1931
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_32()::
BLines (lines remaining after reading input) = 64913
=============================================
Creating a generator 232
=============================================
ALines (lines before reading input) = 64913
read_input 1934
NONTERMINAL: YMM_B3_32 type= xed_reg_enum_t
Adding YMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_32()::
Nonterminal name YMM_B3_32
read_flat_input 1934
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_64()::
BLines (lines remaining after reading input) = 64904
=============================================
Creating a generator 233
=============================================
ALines (lines before reading input) = 64904
read_input 1942
NONTERMINAL: YMM_B3_64 type= xed_reg_enum_t
Adding YMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_64()::
Nonterminal name YMM_B3_64
read_flat_input 1942
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3()::
BLines (lines remaining after reading input) = 64871
=============================================
Creating a generator 234
=============================================
ALines (lines before reading input) = 64871
read_input 1974
NONTERMINAL: ZMM_B3 type= xed_reg_enum_t
Adding ZMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3()::
Nonterminal name ZMM_B3
read_flat_input 1974
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_32()::
BLines (lines remaining after reading input) = 64867
=============================================
Creating a generator 235
=============================================
ALines (lines before reading input) = 64867
read_input 1977
NONTERMINAL: ZMM_B3_32 type= xed_reg_enum_t
Adding ZMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_32()::
Nonterminal name ZMM_B3_32
read_flat_input 1977
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_64()::
BLines (lines remaining after reading input) = 64858
=============================================
Creating a generator 236
=============================================
ALines (lines before reading input) = 64858
read_input 1985
NONTERMINAL: ZMM_B3_64 type= xed_reg_enum_t
Adding ZMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_64()::
Nonterminal name ZMM_B3_64
read_flat_input 1985
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3()::
BLines (lines remaining after reading input) = 64825
=============================================
Creating a generator 237
=============================================
ALines (lines before reading input) = 64825
read_input 2017
NONTERMINAL: XMM_N3 type= xed_reg_enum_t
Adding XMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3()::
Nonterminal name XMM_N3
read_flat_input 2017
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_32()::
BLines (lines remaining after reading input) = 64821
=============================================
Creating a generator 238
=============================================
ALines (lines before reading input) = 64821
read_input 2020
NONTERMINAL: XMM_N3_32 type= xed_reg_enum_t
Adding XMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_32()::
Nonterminal name XMM_N3_32
read_flat_input 2020
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_64()::
BLines (lines remaining after reading input) = 64812
=============================================
Creating a generator 239
=============================================
ALines (lines before reading input) = 64812
read_input 2028
NONTERMINAL: XMM_N3_64 type= xed_reg_enum_t
Adding XMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_64()::
Nonterminal name XMM_N3_64
read_flat_input 2028
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3()::
BLines (lines remaining after reading input) = 64779
=============================================
Creating a generator 240
=============================================
ALines (lines before reading input) = 64779
read_input 2060
NONTERMINAL: YMM_N3 type= xed_reg_enum_t
Adding YMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3()::
Nonterminal name YMM_N3
read_flat_input 2060
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_32()::
BLines (lines remaining after reading input) = 64775
=============================================
Creating a generator 241
=============================================
ALines (lines before reading input) = 64775
read_input 2063
NONTERMINAL: YMM_N3_32 type= xed_reg_enum_t
Adding YMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_32()::
Nonterminal name YMM_N3_32
read_flat_input 2063
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_64()::
BLines (lines remaining after reading input) = 64766
=============================================
Creating a generator 242
=============================================
ALines (lines before reading input) = 64766
read_input 2071
NONTERMINAL: YMM_N3_64 type= xed_reg_enum_t
Adding YMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_64()::
Nonterminal name YMM_N3_64
read_flat_input 2071
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3()::
BLines (lines remaining after reading input) = 64733
=============================================
Creating a generator 243
=============================================
ALines (lines before reading input) = 64733
read_input 2103
NONTERMINAL: ZMM_N3 type= xed_reg_enum_t
Adding ZMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3()::
Nonterminal name ZMM_N3
read_flat_input 2103
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_32()::
BLines (lines remaining after reading input) = 64729
=============================================
Creating a generator 244
=============================================
ALines (lines before reading input) = 64729
read_input 2106
NONTERMINAL: ZMM_N3_32 type= xed_reg_enum_t
Adding ZMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_32()::
Nonterminal name ZMM_N3_32
read_flat_input 2106
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_64()::
BLines (lines remaining after reading input) = 64720
=============================================
Creating a generator 245
=============================================
ALines (lines before reading input) = 64720
read_input 2114
NONTERMINAL: ZMM_N3_64 type= xed_reg_enum_t
Adding ZMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_64()::
Nonterminal name ZMM_N3_64
read_flat_input 2114
Hit a nonterminal, returning at: INSTRUCTIONS()::
BLines (lines remaining after reading input) = 64687
=============================================
Creating a generator 246
=============================================
ALines (lines before reading input) = 64687
read_input 2146
NONTERMINAL: INSTRUCTIONS notype
Adding INSTRUCTIONS to nonterminal dict
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 50435 lines remaining.
BLines (lines remaining after reading input) = 50435
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 50435
read_input 4054
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 50241 lines remaining.
BLines (lines remaining after reading input) = 50241
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 50241
read_input 4074
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49799 lines remaining.
BLines (lines remaining after reading input) = 49799
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49799
read_input 4123
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49774 lines remaining.
BLines (lines remaining after reading input) = 49774
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49774
read_input 4125
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49636 lines remaining.
BLines (lines remaining after reading input) = 49636
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49636
read_input 4143
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49588 lines remaining.
BLines (lines remaining after reading input) = 49588
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49588
read_input 4150
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49576 lines remaining.
BLines (lines remaining after reading input) = 49576
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49576
read_input 4151
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: XOP_INSTRUCTIONS()::
parser returning with 49535 lines remaining.
BLines (lines remaining after reading input) = 49535
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49535
read_input 4155
NONTERMINAL: XOP_INSTRUCTIONS notype
Adding XOP_INSTRUCTIONS to nonterminal dict
Nonterminal XOP_INSTRUCTIONS()::
Nonterminal name XOP_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 48562 lines remaining.
BLines (lines remaining after reading input) = 48562
=============================================
Creating a generator 248
=============================================
ALines (lines before reading input) = 48562
read_input 4351
NONTERMINAL: AVX_INSTRUCTIONS notype
Adding AVX_INSTRUCTIONS to nonterminal dict
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 48145 lines remaining.
BLines (lines remaining after reading input) = 48145
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 48145
read_input 4479
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48096 lines remaining.
BLines (lines remaining after reading input) = 48096
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 48096
read_input 4495
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1A
REGISTERING UDELETE NOP0F1B
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47939 lines remaining.
BLines (lines remaining after reading input) = 47939
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47939
read_input 4528
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1E
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47852 lines remaining.
BLines (lines remaining after reading input) = 47852
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47852
read_input 4548
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47697 lines remaining.
BLines (lines remaining after reading input) = 47697
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47697
read_input 4562
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47686 lines remaining.
BLines (lines remaining after reading input) = 47686
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47686
read_input 4563
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47510 lines remaining.
BLines (lines remaining after reading input) = 47510
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47510
read_input 4577
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47489 lines remaining.
BLines (lines remaining after reading input) = 47489
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47489
read_input 4579
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47448 lines remaining.
BLines (lines remaining after reading input) = 47448
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47448
read_input 4583
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47427 lines remaining.
BLines (lines remaining after reading input) = 47427
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47427
read_input 4585
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47416 lines remaining.
BLines (lines remaining after reading input) = 47416
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47416
read_input 4586
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47405 lines remaining.
BLines (lines remaining after reading input) = 47405
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47405
read_input 4587
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47370 lines remaining.
BLines (lines remaining after reading input) = 47370
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47370
read_input 4591
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47351 lines remaining.
BLines (lines remaining after reading input) = 47351
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47351
read_input 4593
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47330 lines remaining.
BLines (lines remaining after reading input) = 47330
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47330
read_input 4595
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47307 lines remaining.
BLines (lines remaining after reading input) = 47307
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47307
read_input 4597
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47296 lines remaining.
BLines (lines remaining after reading input) = 47296
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47296
read_input 4599
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47258 lines remaining.
BLines (lines remaining after reading input) = 47258
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47258
read_input 4603
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47198 lines remaining.
BLines (lines remaining after reading input) = 47198
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47198
read_input 4608
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1C
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47133 lines remaining.
BLines (lines remaining after reading input) = 47133
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47133
read_input 4620
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47121 lines remaining.
BLines (lines remaining after reading input) = 47121
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47121
read_input 4621
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 47109 lines remaining.
BLines (lines remaining after reading input) = 47109
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47109
read_input 4622
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43671 lines remaining.
BLines (lines remaining after reading input) = 43671
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43671
read_input 5345
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43640 lines remaining.
BLines (lines remaining after reading input) = 43640
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43640
read_input 5348
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43573 lines remaining.
BLines (lines remaining after reading input) = 43573
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43573
read_input 5360
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43561 lines remaining.
BLines (lines remaining after reading input) = 43561
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43561
read_input 5362
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43526 lines remaining.
BLines (lines remaining after reading input) = 43526
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43526
read_input 5370
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 42661 lines remaining.
BLines (lines remaining after reading input) = 42661
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 42661
read_input 5562
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 42540 lines remaining.
BLines (lines remaining after reading input) = 42540
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 42540
read_input 5578
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 41060 lines remaining.
BLines (lines remaining after reading input) = 41060
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 41060
read_input 5843
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 40984 lines remaining.
BLines (lines remaining after reading input) = 40984
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40984
read_input 5863
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 40973 lines remaining.
BLines (lines remaining after reading input) = 40973
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40973
read_input 5864
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40732 lines remaining.
BLines (lines remaining after reading input) = 40732
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40732
read_input 5942
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40702 lines remaining.
BLines (lines remaining after reading input) = 40702
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40702
read_input 5948
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40691 lines remaining.
BLines (lines remaining after reading input) = 40691
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40691
read_input 5949
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40677 lines remaining.
BLines (lines remaining after reading input) = 40677
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40677
read_input 5951
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40645 lines remaining.
BLines (lines remaining after reading input) = 40645
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40645
read_input 5957
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40607 lines remaining.
BLines (lines remaining after reading input) = 40607
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40607
read_input 5961
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40574 lines remaining.
BLines (lines remaining after reading input) = 40574
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40574
read_input 5969
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40553 lines remaining.
BLines (lines remaining after reading input) = 40553
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40553
read_input 5971
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 40542 lines remaining.
BLines (lines remaining after reading input) = 40542
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40542
read_input 5972
NONTERMINAL: EVEX_INSTRUCTIONS notype
Adding EVEX_INSTRUCTIONS to nonterminal dict
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 40229 lines remaining.
BLines (lines remaining after reading input) = 40229
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 40229
read_input 5996
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 39994 lines remaining.
BLines (lines remaining after reading input) = 39994
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39994
read_input 6014
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE PREFETCH_RESERVED_0F0Dr2
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39992 lines remaining.
BLines (lines remaining after reading input) = 39992
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39992
read_input 6014
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 39393 lines remaining.
BLines (lines remaining after reading input) = 39393
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39393
read_input 6060
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39380 lines remaining.
BLines (lines remaining after reading input) = 39380
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39380
read_input 6061
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39327 lines remaining.
BLines (lines remaining after reading input) = 39327
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39327
read_input 6065
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39300 lines remaining.
BLines (lines remaining after reading input) = 39300
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39300
read_input 6067
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39247 lines remaining.
BLines (lines remaining after reading input) = 39247
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39247
read_input 6071
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 27656 lines remaining.
BLines (lines remaining after reading input) = 27656
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 27656
read_input 6992
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 27459 lines remaining.
BLines (lines remaining after reading input) = 27459
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 27459
read_input 7007
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 27330 lines remaining.
BLines (lines remaining after reading input) = 27330
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 27330
read_input 7017
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 3958 lines remaining.
BLines (lines remaining after reading input) = 3958
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 3958
read_input 8823
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3266 lines remaining.
BLines (lines remaining after reading input) = 3266
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 3266
read_input 8877
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3109 lines remaining.
BLines (lines remaining after reading input) = 3109
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 3109
read_input 8889
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 2796 lines remaining.
BLines (lines remaining after reading input) = 2796
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2796
read_input 8913
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 2772 lines remaining.
BLines (lines remaining after reading input) = 2772
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2772
read_input 8916
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 2759 lines remaining.
BLines (lines remaining after reading input) = 2759
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2759
read_input 8917
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 2524 lines remaining.
BLines (lines remaining after reading input) = 2524
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2524
read_input 8935
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 1275 lines remaining.
BLines (lines remaining after reading input) = 1275
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 1275
read_input 9031
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 1199 lines remaining.
BLines (lines remaining after reading input) = 1199
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 1199
read_input 9037
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 964 lines remaining.
BLines (lines remaining after reading input) = 964
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 964
read_input 9055
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 819 lines remaining.
BLines (lines remaining after reading input) = 819
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 819
read_input 9067
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 443 lines remaining.
BLines (lines remaining after reading input) = 443
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 443
read_input 9097
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 322 lines remaining.
BLines (lines remaining after reading input) = 322
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 322
read_input 9107
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 217 lines remaining.
BLines (lines remaining after reading input) = 217
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 217
read_input 9115
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 60 lines remaining.
BLines (lines remaining after reading input) = 60
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 60
read_input 9127
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 35 lines remaining.
BLines (lines remaining after reading input) = 35
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 35
read_input 9129
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 12 lines remaining.
BLines (lines remaining after reading input) = 12
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 12
read_input 9131
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
parser returning with 0 lines remaining.
BLines (lines remaining after reading input) = 0
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1E
DROPPING UNAME NOP0F1E
DROPPING UNAME PREFETCH_RESERVED_0F0Dr2
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
Length error: some instructions done and some are not done simultaneously
ilist len = 20


ILIST:
bitpos:26  len-pattern:28
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:29


NODE:
	RDSSPD inum=4553  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	NOP inum=4532  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

	NOP inum=4533  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

	NOP inum=4534  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4535  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

	NOP inum=4536  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4537  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3

	NOP inum=4538  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4539  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4540  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4541  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4542  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4543  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4544  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4545  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4546  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4547  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR64 inum=4550  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	ENDBR32 inum=4549  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	RDSSPQ inum=4554  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 21
back_split_graph: based on 21
BACKSPLIT  fake bitpos: 21 real bitpos: 20


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4532  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4533  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4535  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

   NOP inum=4537  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 20
NEED TO BACKSPLIT AT POSITION 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4532  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4535  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4533  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4537  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 16


ILIST:
bitpos:26  len-pattern:28
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:29


NODE:
	RDSSPD inum=4553  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	NOP inum=4534  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4536  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4538  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4539  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4540  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4541  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4542  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4543  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4544  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4545  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4546  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4547  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR64 inum=4550  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	ENDBR32 inum=4549  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	RDSSPQ inum=4554  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:28
bitpos:26  len-pattern:26
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:29


NODE:
	RDSSPD inum=4553  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	NOP inum=4536  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4546  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4547  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPQ inum=4554  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 11


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4534  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4538  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4539  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4540  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4541  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4542  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4543  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4544  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4545  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR64 inum=4550  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	ENDBR32 inum=4549  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 10


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4538  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4539  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4540  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4541  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4542  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4543  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4544  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4545  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR64 inum=4550  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	ENDBR32 inum=4549  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 24
back_split_graph: based on 24
BACKSPLIT  fake bitpos: 24 real bitpos: 23

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4538  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4540  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4542  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4544  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4550  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4538  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

   NOP inum=4540  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4542  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4544  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4550  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4539  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4541  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4543  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4545  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4549  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4539  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

   NOP inum=4541  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4543  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4545  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4549  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

FUNKY SPOT: bitpos 36
Others: 
MOVDIRI inum=4601  iform_input=MOVDIRI_MEMu32_GPR32u32  isa_set=MOVDIR pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    REXW=0

MOVDIRI inum=4602  iform_input=MOVDIRI_MEMu64_GPR64u64  isa_set=MOVDIR pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING MOVDIRI inum 4601 -- already fine
	REARRANGE needs to juggle: MOVDIRI inum 4602
	REARRANGE one pattern worked for MOVDIRI inum 4602
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 27
Others: 
TPAUSE inum=4603  iform_input=TPAUSE_GPR32u32  isa_set=WAITPKG pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=0 OSZ=1 REXW=0   

TPAUSE inum=4604  iform_input=TPAUSE_GPR64u64  isa_set=WAITPKG pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=0 OSZ=1 MODE=2    REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING TPAUSE inum 4603 -- already fine
	REARRANGE needs to juggle: TPAUSE inum 4604
	REARRANGE one pattern worked for TPAUSE inum 4604
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 27
FUNKY SPOT: bitpos 26
Others: 
UMWAIT inum=4606  iform_input=UMWAIT_GPR32  isa_set=WAITPKG pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=2 REXW=0

UMWAIT inum=4607  iform_input=UMWAIT_GPR64  isa_set=WAITPKG pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=2 MODE=2 REXW=1   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING UMWAIT inum 4606 -- already fine
	REARRANGE needs to juggle: UMWAIT inum 4607
	REARRANGE one pattern worked for UMWAIT inum 4607
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 26
FUNKY SPOT: bitpos 11
Others: 
SLWPCB inum=4346  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=9 1 1    MOD=3 0 0 1    n n n

LLWPCB inum=4345  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=9 1 1    MOD=3 0 0 0    n n n

LWPINS inum=4347  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 0 n n    n MODRM() UIMM32()

LWPINS inum=4348  isa_set=XOP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 0 n n    n UIMM32()

LWPVAL inum=4349  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 1 n n    n MODRM() UIMM32()

LWPVAL inum=4350  isa_set=XOP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 1 n n    n UIMM32()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEXDEST3
	SKIPPING SLWPCB inum 4346 -- already fine
	SKIPPING LLWPCB inum 4345 -- already fine
	REARRANGE needs to juggle: LWPINS inum 4347
	REARRANGE FAILED for VEXDEST3. Trying again...
REARRANGE ATTEMPT  using VEXDEST210
	REARRANGE needs to juggle: SLWPCB inum 4346
	REARRANGE one pattern worked for SLWPCB inum 4346
	REARRANGE needs to juggle: LLWPCB inum 4345
	REARRANGE one pattern worked for LLWPCB inum 4345
	REARRANGE needs to juggle: LWPINS inum 4347
	REARRANGE FAILED for VEXDEST210. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: SLWPCB inum 4346
	REARRANGE one pattern worked for SLWPCB inum 4346
	REARRANGE needs to juggle: LLWPCB inum 4345
	REARRANGE one pattern worked for LLWPCB inum 4345
	SKIPPING LWPINS inum 4347 -- already fine
	SKIPPING LWPINS inum 4348 -- already fine
	SKIPPING LWPVAL inum 4349 -- already fine
	SKIPPING LWPVAL inum 4350 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VPERMQ inum=5811  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMQ inum=5812  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

VPSHUFB inum=5700  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSHUFB inum=5701  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPERMQ inum 5811 -- already fine
	SKIPPING VPERMQ inum 5812 -- already fine
	REARRANGE needs to juggle: VPSHUFB inum 5700
	REARRANGE one pattern worked for VPSHUFB inum 5700
	REARRANGE needs to juggle: VPSHUFB inum 5701
	REARRANGE one pattern worked for VPSHUFB inum 5701
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VPHADDW inum=5644  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPHADDW inum=5645  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMPD inum=5813  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMPD inum=5814  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPHADDW inum 5644 -- already fine
	SKIPPING VPHADDW inum 5645 -- already fine
	REARRANGE needs to juggle: VPERMPD inum 5813
	REARRANGE one pattern worked for VPERMPD inum 5813
	REARRANGE needs to juggle: VPERMPD inum 5814
	REARRANGE one pattern worked for VPERMPD inum 5814
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VROUNDSS inum=5094  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=5095  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

VPSIGND inum=5042  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5043  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5706  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5707  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VROUNDSS inum 5094 -- already fine
	SKIPPING VROUNDSS inum 5095 -- already fine
	REARRANGE needs to juggle: VPSIGND inum 5042
	REARRANGE one pattern worked for VPSIGND inum 5042
	REARRANGE needs to juggle: VPSIGND inum 5043
	REARRANGE one pattern worked for VPSIGND inum 5043
	REARRANGE needs to juggle: VPSIGND inum 5706
	REARRANGE one pattern worked for VPSIGND inum 5706
	REARRANGE needs to juggle: VPSIGND inum 5707
	REARRANGE one pattern worked for VPSIGND inum 5707
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VROUNDSS inum=5094  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=5095  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

VPSIGND inum=5042  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5043  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5706  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5707  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VROUNDSS inum 5094 -- already fine
	SKIPPING VROUNDSS inum 5095 -- already fine
	REARRANGE needs to juggle: VPSIGND inum 5042
	REARRANGE one pattern worked for VPSIGND inum 5042
	REARRANGE needs to juggle: VPSIGND inum 5043
	REARRANGE one pattern worked for VPSIGND inum 5043
	REARRANGE needs to juggle: VPSIGND inum 5706
	REARRANGE one pattern worked for VPSIGND inum 5706
	REARRANGE needs to juggle: VPSIGND inum 5707
	REARRANGE one pattern worked for VPSIGND inum 5707
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VROUNDSD inum=5092  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=5093  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

VPMULHRSW inum=5022  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5023  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5686  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5687  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VROUNDSD inum 5092 -- already fine
	SKIPPING VROUNDSD inum 5093 -- already fine
	REARRANGE needs to juggle: VPMULHRSW inum 5022
	REARRANGE one pattern worked for VPMULHRSW inum 5022
	REARRANGE needs to juggle: VPMULHRSW inum 5023
	REARRANGE one pattern worked for VPMULHRSW inum 5023
	REARRANGE needs to juggle: VPMULHRSW inum 5686
	REARRANGE one pattern worked for VPMULHRSW inum 5686
	REARRANGE needs to juggle: VPMULHRSW inum 5687
	REARRANGE one pattern worked for VPMULHRSW inum 5687
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VROUNDSD inum=5092  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=5093  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

VPMULHRSW inum=5022  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5023  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5686  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5687  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VROUNDSD inum 5092 -- already fine
	SKIPPING VROUNDSD inum 5093 -- already fine
	REARRANGE needs to juggle: VPMULHRSW inum 5022
	REARRANGE one pattern worked for VPMULHRSW inum 5022
	REARRANGE needs to juggle: VPMULHRSW inum 5023
	REARRANGE one pattern worked for VPMULHRSW inum 5023
	REARRANGE needs to juggle: VPMULHRSW inum 5686
	REARRANGE one pattern worked for VPMULHRSW inum 5686
	REARRANGE needs to juggle: VPMULHRSW inum 5687
	REARRANGE one pattern worked for VPMULHRSW inum 5687
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VBROADCASTSS inum=4812  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=0 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=4813  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=5839  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VBROADCASTSS inum=5840  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VINSERTF128 inum=4816  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VINSERTF128 inum=4817  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 1 1 MOD=3    r r r n    n n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VBROADCASTSS inum 4812 -- already fine
	SKIPPING VBROADCASTSS inum 4813 -- already fine
	REARRANGE needs to juggle: VBROADCASTSS inum 5839
	REARRANGE one pattern worked for VBROADCASTSS inum 5839
	REARRANGE needs to juggle: VBROADCASTSS inum 5840
	REARRANGE one pattern worked for VBROADCASTSS inum 5840
	SKIPPING VINSERTF128 inum 4816 -- already fine
	SKIPPING VINSERTF128 inum 4817 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VBROADCASTSD inum=4814  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSD inum=5841  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VEXTRACTF128 inum=4766  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VEXTRACTF128 inum=4767  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VBROADCASTSD inum 4814 -- already fine
	REARRANGE needs to juggle: VBROADCASTSD inum 5841
	REARRANGE one pattern worked for VBROADCASTSD inum 5841
	SKIPPING VEXTRACTF128 inum 4766 -- already fine
	SKIPPING VEXTRACTF128 inum 4767 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPABSB inum=4934  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4935  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5578  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5579  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSB inum 4934 -- already fine
	SKIPPING VPABSB inum 4935 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5578
	REARRANGE one pattern worked for VPABSB inum 5578
	REARRANGE needs to juggle: VPABSB inum 5579
	REARRANGE one pattern worked for VPABSB inum 5579
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSB inum=4934  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4935  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5578  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5579  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSB inum 4934 -- already fine
	SKIPPING VPABSB inum 4935 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5578
	REARRANGE one pattern worked for VPABSB inum 5578
	REARRANGE needs to juggle: VPABSB inum 5579
	REARRANGE one pattern worked for VPABSB inum 5579
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSW inum=4936  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4937  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5580  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5581  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=5366  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5367  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=5368  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5369  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSW inum 4936 -- already fine
	SKIPPING VPABSW inum 4937 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5580
	REARRANGE one pattern worked for VPABSW inum 5580
	REARRANGE needs to juggle: VPABSW inum 5581
	REARRANGE one pattern worked for VPABSW inum 5581
	REARRANGE needs to juggle: VCVTPS2PH inum 5366
	REARRANGE one pattern worked for VCVTPS2PH inum 5366
	REARRANGE needs to juggle: VCVTPS2PH inum 5367
	REARRANGE one pattern worked for VCVTPS2PH inum 5367
	REARRANGE needs to juggle: VCVTPS2PH inum 5368
	REARRANGE one pattern worked for VCVTPS2PH inum 5368
	REARRANGE needs to juggle: VCVTPS2PH inum 5369
	REARRANGE one pattern worked for VCVTPS2PH inum 5369
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSW inum=4936  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4937  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5580  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5581  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=5366  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5367  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=5368  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5369  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSW inum 4936 -- already fine
	SKIPPING VPABSW inum 4937 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5580
	REARRANGE one pattern worked for VPABSW inum 5580
	REARRANGE needs to juggle: VPABSW inum 5581
	REARRANGE one pattern worked for VPABSW inum 5581
	REARRANGE needs to juggle: VCVTPS2PH inum 5366
	REARRANGE one pattern worked for VCVTPS2PH inum 5366
	REARRANGE needs to juggle: VCVTPS2PH inum 5367
	REARRANGE one pattern worked for VCVTPS2PH inum 5367
	REARRANGE needs to juggle: VCVTPS2PH inum 5368
	REARRANGE one pattern worked for VCVTPS2PH inum 5368
	REARRANGE needs to juggle: VCVTPS2PH inum 5369
	REARRANGE one pattern worked for VCVTPS2PH inum 5369
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSD inum=4938  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4939  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5582  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5583  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSD inum 4938 -- already fine
	SKIPPING VPABSD inum 4939 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5582
	REARRANGE one pattern worked for VPABSD inum 5582
	REARRANGE needs to juggle: VPABSD inum 5583
	REARRANGE one pattern worked for VPABSD inum 5583
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSD inum=4938  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4939  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5582  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5583  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSD inum 4938 -- already fine
	SKIPPING VPABSD inum 4939 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5582
	REARRANGE one pattern worked for VPABSD inum 5582
	REARRANGE needs to juggle: VPABSD inum 5583
	REARRANGE one pattern worked for VPABSD inum 5583
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBW inum=5275  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5276  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBW inum=5785  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5786  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRB inum=8862  iform_input=KSHIFTRB_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRW inum=7003  iform_input=KSHIFTRW_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBW inum 5275 -- already fine
	SKIPPING VPMOVZXBW inum 5276 -- already fine
	SKIPPING VPMOVZXBW inum 5785 -- already fine
	SKIPPING VPMOVZXBW inum 5786 -- already fine
	REARRANGE needs to juggle: KSHIFTRB inum 8862
	REARRANGE one pattern worked for KSHIFTRB inum 8862
	REARRANGE needs to juggle: KSHIFTRW inum 7003
	REARRANGE one pattern worked for KSHIFTRW inum 7003
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
KSHIFTRD inum=8863  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRQ inum=8864  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

VPMOVZXBD inum=5277  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5278  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=5787  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5788  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KSHIFTRD inum 8863 -- already fine
	SKIPPING KSHIFTRQ inum 8864 -- already fine
	REARRANGE needs to juggle: VPMOVZXBD inum 5277
	REARRANGE one pattern worked for VPMOVZXBD inum 5277
	REARRANGE needs to juggle: VPMOVZXBD inum 5278
	REARRANGE one pattern worked for VPMOVZXBD inum 5278
	REARRANGE needs to juggle: VPMOVZXBD inum 5787
	REARRANGE one pattern worked for VPMOVZXBD inum 5787
	REARRANGE needs to juggle: VPMOVZXBD inum 5788
	REARRANGE one pattern worked for VPMOVZXBD inum 5788
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KSHIFTRD inum=8863  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRQ inum=8864  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

VPMOVZXBD inum=5277  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5278  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=5787  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5788  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KSHIFTRD inum 8863 -- already fine
	SKIPPING KSHIFTRQ inum 8864 -- already fine
	REARRANGE needs to juggle: VPMOVZXBD inum 5277
	REARRANGE one pattern worked for VPMOVZXBD inum 5277
	REARRANGE needs to juggle: VPMOVZXBD inum 5278
	REARRANGE one pattern worked for VPMOVZXBD inum 5278
	REARRANGE needs to juggle: VPMOVZXBD inum 5787
	REARRANGE one pattern worked for VPMOVZXBD inum 5787
	REARRANGE needs to juggle: VPMOVZXBD inum 5788
	REARRANGE one pattern worked for VPMOVZXBD inum 5788
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KANDD inum=8828  iform_input=KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VDPPD inum=4768  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VDPPD inum=4769  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

KANDW inum=6993  iform_input=KANDW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDQ inum=8832  iform_input=KANDQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPHMINPOSUW inum=4940  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPHMINPOSUW inum=4941  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

KANDB inum=8827  iform_input=KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KANDD inum 8828 -- already fine
	REARRANGE needs to juggle: VDPPD inum 4768
	REARRANGE one pattern worked for VDPPD inum 4768
	REARRANGE needs to juggle: VDPPD inum 4769
	REARRANGE one pattern worked for VDPPD inum 4769
	SKIPPING KANDW inum 6993 -- already fine
	SKIPPING KANDQ inum 8832 -- already fine
	SKIPPING VPHMINPOSUW inum 4940 -- already fine
	SKIPPING VPHMINPOSUW inum 4941 -- already fine
	SKIPPING KANDB inum 8827 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KANDD inum=8828  iform_input=KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VDPPD inum=4768  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VDPPD inum=4769  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VPHMINPOSUW inum=4940  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPHMINPOSUW inum=4941  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

KANDB inum=8827  iform_input=KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KANDD inum 8828 -- already fine
	REARRANGE needs to juggle: VDPPD inum 4768
	REARRANGE one pattern worked for VDPPD inum 4768
	REARRANGE needs to juggle: VDPPD inum 4769
	REARRANGE one pattern worked for VDPPD inum 4769
	SKIPPING VPHMINPOSUW inum 4940 -- already fine
	SKIPPING VPHMINPOSUW inum 4941 -- already fine
	SKIPPING KANDB inum 8827 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KANDNB inum=8829  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=8830  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VMPSADBW inum=5196  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5197  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=5744  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5745  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

KANDNW inum=6992  iform_input=KANDNW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDNQ inum=8831  iform_input=KANDNQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KANDNB inum 8829 -- already fine
	SKIPPING KANDND inum 8830 -- already fine
	REARRANGE needs to juggle: VMPSADBW inum 5196
	REARRANGE one pattern worked for VMPSADBW inum 5196
	REARRANGE needs to juggle: VMPSADBW inum 5197
	REARRANGE one pattern worked for VMPSADBW inum 5197
	REARRANGE needs to juggle: VMPSADBW inum 5744
	REARRANGE one pattern worked for VMPSADBW inum 5744
	REARRANGE needs to juggle: VMPSADBW inum 5745
	REARRANGE one pattern worked for VMPSADBW inum 5745
	SKIPPING KANDNW inum 6992 -- already fine
	SKIPPING KANDNQ inum 8831 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KANDNB inum=8829  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=8830  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VMPSADBW inum=5196  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5197  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=0 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=5744  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5745  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KANDNB inum 8829 -- already fine
	SKIPPING KANDND inum 8830 -- already fine
	REARRANGE needs to juggle: VMPSADBW inum 5196
	REARRANGE one pattern worked for VMPSADBW inum 5196
	REARRANGE needs to juggle: VMPSADBW inum 5197
	REARRANGE one pattern worked for VMPSADBW inum 5197
	REARRANGE needs to juggle: VMPSADBW inum 5744
	REARRANGE one pattern worked for VMPSADBW inum 5744
	REARRANGE needs to juggle: VMPSADBW inum 5745
	REARRANGE one pattern worked for VMPSADBW inum 5745
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KORD inum=8854  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSRLVQ inum=5855  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5856  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5857  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5858  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=7001  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORB inum=8853  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORQ inum=8855  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSRLVD inum=5851  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5852  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5853  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5854  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KORD inum 8854 -- already fine
	REARRANGE needs to juggle: VPSRLVQ inum 5855
	REARRANGE one pattern worked for VPSRLVQ inum 5855
	REARRANGE needs to juggle: VPSRLVQ inum 5856
	REARRANGE one pattern worked for VPSRLVQ inum 5856
	REARRANGE needs to juggle: VPSRLVQ inum 5857
	REARRANGE one pattern worked for VPSRLVQ inum 5857
	REARRANGE needs to juggle: VPSRLVQ inum 5858
	REARRANGE one pattern worked for VPSRLVQ inum 5858
	SKIPPING KORW inum 7001 -- already fine
	SKIPPING KORB inum 8853 -- already fine
	SKIPPING KORQ inum 8855 -- already fine
	REARRANGE needs to juggle: VPSRLVD inum 5851
	REARRANGE one pattern worked for VPSRLVD inum 5851
	REARRANGE needs to juggle: VPSRLVD inum 5852
	REARRANGE one pattern worked for VPSRLVD inum 5852
	REARRANGE needs to juggle: VPSRLVD inum 5853
	REARRANGE one pattern worked for VPSRLVD inum 5853
	REARRANGE needs to juggle: VPSRLVD inum 5854
	REARRANGE one pattern worked for VPSRLVD inum 5854
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KORD inum=8854  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSRLVQ inum=5855  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5856  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5857  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5858  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

KORB inum=8853  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPSRLVD inum=5851  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5852  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5853  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5854  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KORD inum 8854 -- already fine
	REARRANGE needs to juggle: VPSRLVQ inum 5855
	REARRANGE one pattern worked for VPSRLVQ inum 5855
	REARRANGE needs to juggle: VPSRLVQ inum 5856
	REARRANGE one pattern worked for VPSRLVQ inum 5856
	REARRANGE needs to juggle: VPSRLVQ inum 5857
	REARRANGE one pattern worked for VPSRLVQ inum 5857
	REARRANGE needs to juggle: VPSRLVQ inum 5858
	REARRANGE one pattern worked for VPSRLVQ inum 5858
	SKIPPING KORB inum 8853 -- already fine
	REARRANGE needs to juggle: VPSRLVD inum 5851
	REARRANGE one pattern worked for VPSRLVD inum 5851
	REARRANGE needs to juggle: VPSRLVD inum 5852
	REARRANGE one pattern worked for VPSRLVD inum 5852
	REARRANGE needs to juggle: VPSRLVD inum 5853
	REARRANGE one pattern worked for VPSRLVD inum 5853
	REARRANGE needs to juggle: VPSRLVD inum 5854
	REARRANGE one pattern worked for VPSRLVD inum 5854
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KXNORW inum=7005  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORD inum=8872  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPERM2I128 inum=5809  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5810  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

KXNORB inum=8871  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORQ inum=8873  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSRAVD inum=5859  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5860  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRAVD inum=5861  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5862  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KXNORW inum 7005 -- already fine
	SKIPPING KXNORD inum 8872 -- already fine
	REARRANGE needs to juggle: VPERM2I128 inum 5809
	REARRANGE one pattern worked for VPERM2I128 inum 5809
	REARRANGE needs to juggle: VPERM2I128 inum 5810
	REARRANGE one pattern worked for VPERM2I128 inum 5810
	SKIPPING KXNORB inum 8871 -- already fine
	SKIPPING KXNORQ inum 8873 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5859
	REARRANGE one pattern worked for VPSRAVD inum 5859
	REARRANGE needs to juggle: VPSRAVD inum 5860
	REARRANGE one pattern worked for VPSRAVD inum 5860
	REARRANGE needs to juggle: VPSRAVD inum 5861
	REARRANGE one pattern worked for VPSRAVD inum 5861
	REARRANGE needs to juggle: VPSRAVD inum 5862
	REARRANGE one pattern worked for VPSRAVD inum 5862
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KXNORD inum=8872  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPERM2I128 inum=5809  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5810  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

KXNORB inum=8871  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPSRAVD inum=5859  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5860  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VPSRAVD inum=5861  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5862  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KXNORD inum 8872 -- already fine
	REARRANGE needs to juggle: VPERM2I128 inum 5809
	REARRANGE one pattern worked for VPERM2I128 inum 5809
	REARRANGE needs to juggle: VPERM2I128 inum 5810
	REARRANGE one pattern worked for VPERM2I128 inum 5810
	SKIPPING KXNORB inum 8871 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5859
	REARRANGE one pattern worked for VPSRAVD inum 5859
	REARRANGE needs to juggle: VPSRAVD inum 5860
	REARRANGE one pattern worked for VPSRAVD inum 5860
	REARRANGE needs to juggle: VPSRAVD inum 5861
	REARRANGE one pattern worked for VPSRAVD inum 5861
	REARRANGE needs to juggle: VPSRAVD inum 5862
	REARRANGE one pattern worked for VPSRAVD inum 5862
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSLLVD inum=5843  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5844  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVD inum=5845  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5846  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

KXORD inum=8875  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXORQ inum=8876  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXORB inum=8874  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORW inum=7006  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPSLLVQ inum=5847  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5848  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5849  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5850  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLVD inum 5843 -- already fine
	SKIPPING VPSLLVD inum 5844 -- already fine
	SKIPPING VPSLLVD inum 5845 -- already fine
	SKIPPING VPSLLVD inum 5846 -- already fine
	REARRANGE needs to juggle: KXORD inum 8875
	REARRANGE one pattern worked for KXORD inum 8875
	REARRANGE needs to juggle: KXORQ inum 8876
	REARRANGE one pattern worked for KXORQ inum 8876
	REARRANGE needs to juggle: KXORB inum 8874
	REARRANGE one pattern worked for KXORB inum 8874
	REARRANGE needs to juggle: KXORW inum 7006
	REARRANGE one pattern worked for KXORW inum 7006
	SKIPPING VPSLLVQ inum 5847 -- already fine
	SKIPPING VPSLLVQ inum 5848 -- already fine
	SKIPPING VPSLLVQ inum 5849 -- already fine
	SKIPPING VPSLLVQ inum 5850 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLVD inum=5845  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5846  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

KXORD inum=8875  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXORQ inum=8876  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXORB inum=8874  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORW inum=7006  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

VPSLLVQ inum=5849  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5850  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSLLVD inum 5845 -- already fine
	SKIPPING VPSLLVD inum 5846 -- already fine
	REARRANGE needs to juggle: KXORD inum 8875
	REARRANGE one pattern worked for KXORD inum 8875
	REARRANGE needs to juggle: KXORQ inum 8876
	REARRANGE one pattern worked for KXORQ inum 8876
	REARRANGE needs to juggle: KXORB inum 8874
	REARRANGE one pattern worked for KXORB inum 8874
	REARRANGE needs to juggle: KXORW inum 7006
	REARRANGE one pattern worked for KXORW inum 7006
	SKIPPING VPSLLVQ inum 5849 -- already fine
	SKIPPING VPSLLVQ inum 5850 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VSQRTPS inum=5120  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5121  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPS inum=5122  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5123  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTSS inum=5126  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSS inum=5127  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VSQRTPD inum=5116  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5117  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=5118  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5119  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTSD inum=5124  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSD inum=5125  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPS inum 5120 -- already fine
	SKIPPING VSQRTPS inum 5121 -- already fine
	SKIPPING VSQRTPS inum 5122 -- already fine
	SKIPPING VSQRTPS inum 5123 -- already fine
	REARRANGE needs to juggle: VSQRTSS inum 5126
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VSQRTPS inum 5120
	REARRANGE one pattern worked for VSQRTPS inum 5120
	REARRANGE needs to juggle: VSQRTPS inum 5121
	REARRANGE one pattern worked for VSQRTPS inum 5121
	REARRANGE needs to juggle: VSQRTPS inum 5122
	REARRANGE one pattern worked for VSQRTPS inum 5122
	REARRANGE needs to juggle: VSQRTPS inum 5123
	REARRANGE one pattern worked for VSQRTPS inum 5123
	SKIPPING VSQRTSS inum 5126 -- already fine
	SKIPPING VSQRTSS inum 5127 -- already fine
	REARRANGE needs to juggle: VSQRTPD inum 5116
	REARRANGE one pattern worked for VSQRTPD inum 5116
	REARRANGE needs to juggle: VSQRTPD inum 5117
	REARRANGE one pattern worked for VSQRTPD inum 5117
	REARRANGE needs to juggle: VSQRTPD inum 5118
	REARRANGE one pattern worked for VSQRTPD inum 5118
	REARRANGE needs to juggle: VSQRTPD inum 5119
	REARRANGE one pattern worked for VSQRTPD inum 5119
	SKIPPING VSQRTSD inum 5124 -- already fine
	SKIPPING VSQRTSD inum 5125 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VORPD inum=5160  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5161  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPD inum=5162  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5163  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPS inum=5164  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5165  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VORPS inum=5166  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5167  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VORPD inum 5160 -- already fine
	SKIPPING VORPD inum 5161 -- already fine
	SKIPPING VORPD inum 5162 -- already fine
	SKIPPING VORPD inum 5163 -- already fine
	REARRANGE needs to juggle: VORPS inum 5164
	REARRANGE one pattern worked for VORPS inum 5164
	REARRANGE needs to juggle: VORPS inum 5165
	REARRANGE one pattern worked for VORPS inum 5165
	REARRANGE needs to juggle: VORPS inum 5166
	REARRANGE one pattern worked for VORPS inum 5166
	REARRANGE needs to juggle: VORPS inum 5167
	REARRANGE one pattern worked for VORPS inum 5167
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VADDSD inum=4630  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSD inum=4631  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VADDPS inum=4626  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4627  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4628  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4629  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPD inum=4622  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4623  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPD inum=4624  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4625  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDSS inum=4632  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSS inum=4633  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5831  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5832  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5833  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5834  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VADDSD inum 4630 -- already fine
	SKIPPING VADDSD inum 4631 -- already fine
	SKIPPING VADDPS inum 4626 -- already fine
	SKIPPING VADDPS inum 4627 -- already fine
	SKIPPING VADDPS inum 4628 -- already fine
	SKIPPING VADDPS inum 4629 -- already fine
	SKIPPING VADDPD inum 4622 -- already fine
	SKIPPING VADDPD inum 4623 -- already fine
	SKIPPING VADDPD inum 4624 -- already fine
	SKIPPING VADDPD inum 4625 -- already fine
	SKIPPING VADDSS inum 4632 -- already fine
	SKIPPING VADDSS inum 4633 -- already fine
	REARRANGE needs to juggle: VPBROADCASTD inum 5831
	REARRANGE one pattern worked for VPBROADCASTD inum 5831
	REARRANGE needs to juggle: VPBROADCASTD inum 5832
	REARRANGE one pattern worked for VPBROADCASTD inum 5832
	REARRANGE needs to juggle: VPBROADCASTD inum 5833
	REARRANGE one pattern worked for VPBROADCASTD inum 5833
	REARRANGE needs to juggle: VPBROADCASTD inum 5834
	REARRANGE one pattern worked for VPBROADCASTD inum 5834
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMULSS inum=5158  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSS inum=5159  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VMULSD inum=5156  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSD inum=5157  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5835  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5836  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5837  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5838  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMULPD inum=5148  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=5149  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPD inum=5150  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=5151  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5152  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5153  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5154  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5155  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VMULSS inum 5158 -- already fine
	SKIPPING VMULSS inum 5159 -- already fine
	SKIPPING VMULSD inum 5156 -- already fine
	SKIPPING VMULSD inum 5157 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 5835
	REARRANGE one pattern worked for VPBROADCASTQ inum 5835
	REARRANGE needs to juggle: VPBROADCASTQ inum 5836
	REARRANGE one pattern worked for VPBROADCASTQ inum 5836
	REARRANGE needs to juggle: VPBROADCASTQ inum 5837
	REARRANGE one pattern worked for VPBROADCASTQ inum 5837
	REARRANGE needs to juggle: VPBROADCASTQ inum 5838
	REARRANGE one pattern worked for VPBROADCASTQ inum 5838
	REARRANGE needs to juggle: VMULPD inum 5148
	REARRANGE one pattern worked for VMULPD inum 5148
	REARRANGE needs to juggle: VMULPD inum 5149
	REARRANGE one pattern worked for VMULPD inum 5149
	REARRANGE needs to juggle: VMULPD inum 5150
	REARRANGE one pattern worked for VMULPD inum 5150
	REARRANGE needs to juggle: VMULPD inum 5151
	REARRANGE one pattern worked for VMULPD inum 5151
	REARRANGE needs to juggle: VMULPS inum 5152
	REARRANGE one pattern worked for VMULPS inum 5152
	REARRANGE needs to juggle: VMULPS inum 5153
	REARRANGE one pattern worked for VMULPS inum 5153
	REARRANGE needs to juggle: VMULPS inum 5154
	REARRANGE one pattern worked for VMULPS inum 5154
	REARRANGE needs to juggle: VMULPS inum 5155
	REARRANGE one pattern worked for VMULPS inum 5155
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VBROADCASTI128 inum=5842  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSS2SD inum=4752  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSS2SD inum=4753  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VCVTSD2SS inum=4738  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSD2SS inum=4739  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VCVTPD2PS inum=4698  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4699  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2PS inum=4700  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4701  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4710  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4711  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4712  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4713  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VBROADCASTI128 inum 5842 -- already fine
	REARRANGE needs to juggle: VCVTSS2SD inum 4752
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VBROADCASTI128 inum 5842
	REARRANGE one pattern worked for VBROADCASTI128 inum 5842
	SKIPPING VCVTSS2SD inum 4752 -- already fine
	SKIPPING VCVTSS2SD inum 4753 -- already fine
	SKIPPING VCVTSD2SS inum 4738 -- already fine
	SKIPPING VCVTSD2SS inum 4739 -- already fine
	SKIPPING VCVTPD2PS inum 4698 -- already fine
	SKIPPING VCVTPD2PS inum 4699 -- already fine
	SKIPPING VCVTPD2PS inum 4700 -- already fine
	SKIPPING VCVTPD2PS inum 4701 -- already fine
	SKIPPING VCVTPS2PD inum 4710 -- already fine
	SKIPPING VCVTPS2PD inum 4711 -- already fine
	SKIPPING VCVTPS2PD inum 4712 -- already fine
	SKIPPING VCVTPS2PD inum 4713 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VSUBSS inum=5146  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSS inum=5147  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VFMADDSUBPS inum=4351  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4352  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4353  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4354  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4355  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4356  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4357  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4358  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5136  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5137  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=5138  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5139  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VSUBSD inum=5144  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSD inum=5145  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSUBPS inum=5140  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=5141  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=5142  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=5143  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VSUBSS inum 5146 -- already fine
	SKIPPING VSUBSS inum 5147 -- already fine
	SKIPPING VFMADDSUBPS inum 4351 -- already fine
	SKIPPING VFMADDSUBPS inum 4352 -- already fine
	SKIPPING VFMADDSUBPS inum 4353 -- already fine
	SKIPPING VFMADDSUBPS inum 4354 -- already fine
	SKIPPING VFMADDSUBPS inum 4355 -- already fine
	SKIPPING VFMADDSUBPS inum 4356 -- already fine
	SKIPPING VFMADDSUBPS inum 4357 -- already fine
	SKIPPING VFMADDSUBPS inum 4358 -- already fine
	SKIPPING VSUBPD inum 5136 -- already fine
	SKIPPING VSUBPD inum 5137 -- already fine
	SKIPPING VSUBPD inum 5138 -- already fine
	SKIPPING VSUBPD inum 5139 -- already fine
	SKIPPING VSUBSD inum 5144 -- already fine
	SKIPPING VSUBSD inum 5145 -- already fine
	REARRANGE needs to juggle: VSUBPS inum 5140
	REARRANGE one pattern worked for VSUBPS inum 5140
	REARRANGE needs to juggle: VSUBPS inum 5141
	REARRANGE one pattern worked for VSUBPS inum 5141
	REARRANGE needs to juggle: VSUBPS inum 5142
	REARRANGE one pattern worked for VSUBPS inum 5142
	REARRANGE needs to juggle: VSUBPS inum 5143
	REARRANGE one pattern worked for VSUBPS inum 5143
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPS inum=4351  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4352  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4353  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4354  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4355  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4356  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4357  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4358  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5136  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5137  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=5138  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5139  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4351 -- already fine
	SKIPPING VFMADDSUBPS inum 4352 -- already fine
	SKIPPING VFMADDSUBPS inum 4353 -- already fine
	SKIPPING VFMADDSUBPS inum 4354 -- already fine
	SKIPPING VFMADDSUBPS inum 4355 -- already fine
	SKIPPING VFMADDSUBPS inum 4356 -- already fine
	SKIPPING VFMADDSUBPS inum 4357 -- already fine
	SKIPPING VFMADDSUBPS inum 4358 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5136
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPS inum 4351
	REARRANGE one pattern worked for VFMADDSUBPS inum 4351
	REARRANGE needs to juggle: VFMADDSUBPS inum 4352
	REARRANGE one pattern worked for VFMADDSUBPS inum 4352
	REARRANGE needs to juggle: VFMADDSUBPS inum 4353
	REARRANGE one pattern worked for VFMADDSUBPS inum 4353
	REARRANGE needs to juggle: VFMADDSUBPS inum 4354
	REARRANGE one pattern worked for VFMADDSUBPS inum 4354
	REARRANGE needs to juggle: VFMADDSUBPS inum 4355
	REARRANGE one pattern worked for VFMADDSUBPS inum 4355
	REARRANGE needs to juggle: VFMADDSUBPS inum 4356
	REARRANGE one pattern worked for VFMADDSUBPS inum 4356
	REARRANGE needs to juggle: VFMADDSUBPS inum 4357
	REARRANGE one pattern worked for VFMADDSUBPS inum 4357
	REARRANGE needs to juggle: VFMADDSUBPS inum 4358
	REARRANGE one pattern worked for VFMADDSUBPS inum 4358
	REARRANGE needs to juggle: VSUBPD inum 5136
	REARRANGE one pattern worked for VSUBPD inum 5136
	REARRANGE needs to juggle: VSUBPD inum 5137
	REARRANGE one pattern worked for VSUBPD inum 5137
	REARRANGE needs to juggle: VSUBPD inum 5138
	REARRANGE one pattern worked for VSUBPD inum 5138
	REARRANGE needs to juggle: VSUBPD inum 5139
	REARRANGE one pattern worked for VSUBPD inum 5139
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=4351  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4352  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4353  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4354  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5136  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5137  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4351 -- already fine
	SKIPPING VFMADDSUBPS inum 4352 -- already fine
	SKIPPING VFMADDSUBPS inum 4353 -- already fine
	SKIPPING VFMADDSUBPS inum 4354 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5136
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 4351
	REARRANGE one pattern worked for VFMADDSUBPS inum 4351
	REARRANGE needs to juggle: VFMADDSUBPS inum 4352
	REARRANGE one pattern worked for VFMADDSUBPS inum 4352
	REARRANGE needs to juggle: VFMADDSUBPS inum 4353
	REARRANGE one pattern worked for VFMADDSUBPS inum 4353
	REARRANGE needs to juggle: VFMADDSUBPS inum 4354
	REARRANGE one pattern worked for VFMADDSUBPS inum 4354
	SKIPPING VSUBPD inum 5136 -- already fine
	SKIPPING VSUBPD inum 5137 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=4355  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4356  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4357  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4358  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5138  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5139  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4355 -- already fine
	SKIPPING VFMADDSUBPS inum 4356 -- already fine
	SKIPPING VFMADDSUBPS inum 4357 -- already fine
	SKIPPING VFMADDSUBPS inum 4358 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5138
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 4355
	REARRANGE one pattern worked for VFMADDSUBPS inum 4355
	REARRANGE needs to juggle: VFMADDSUBPS inum 4356
	REARRANGE one pattern worked for VFMADDSUBPS inum 4356
	REARRANGE needs to juggle: VFMADDSUBPS inum 4357
	REARRANGE one pattern worked for VFMADDSUBPS inum 4357
	REARRANGE needs to juggle: VFMADDSUBPS inum 4358
	REARRANGE one pattern worked for VFMADDSUBPS inum 4358
	SKIPPING VSUBPD inum 5138 -- already fine
	SKIPPING VSUBPD inum 5139 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPD inum=4359  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4360  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4361  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4362  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4363  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4364  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4365  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4366  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4854  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4855  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMINPD inum=4856  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4857  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4359 -- already fine
	SKIPPING VFMADDSUBPD inum 4360 -- already fine
	SKIPPING VFMADDSUBPD inum 4361 -- already fine
	SKIPPING VFMADDSUBPD inum 4362 -- already fine
	SKIPPING VFMADDSUBPD inum 4363 -- already fine
	SKIPPING VFMADDSUBPD inum 4364 -- already fine
	SKIPPING VFMADDSUBPD inum 4365 -- already fine
	SKIPPING VFMADDSUBPD inum 4366 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4854
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPD inum 4359
	REARRANGE one pattern worked for VFMADDSUBPD inum 4359
	REARRANGE needs to juggle: VFMADDSUBPD inum 4360
	REARRANGE one pattern worked for VFMADDSUBPD inum 4360
	REARRANGE needs to juggle: VFMADDSUBPD inum 4361
	REARRANGE one pattern worked for VFMADDSUBPD inum 4361
	REARRANGE needs to juggle: VFMADDSUBPD inum 4362
	REARRANGE one pattern worked for VFMADDSUBPD inum 4362
	REARRANGE needs to juggle: VFMADDSUBPD inum 4363
	REARRANGE one pattern worked for VFMADDSUBPD inum 4363
	REARRANGE needs to juggle: VFMADDSUBPD inum 4364
	REARRANGE one pattern worked for VFMADDSUBPD inum 4364
	REARRANGE needs to juggle: VFMADDSUBPD inum 4365
	REARRANGE one pattern worked for VFMADDSUBPD inum 4365
	REARRANGE needs to juggle: VFMADDSUBPD inum 4366
	REARRANGE one pattern worked for VFMADDSUBPD inum 4366
	REARRANGE needs to juggle: VMINPD inum 4854
	REARRANGE one pattern worked for VMINPD inum 4854
	REARRANGE needs to juggle: VMINPD inum 4855
	REARRANGE one pattern worked for VMINPD inum 4855
	REARRANGE needs to juggle: VMINPD inum 4856
	REARRANGE one pattern worked for VMINPD inum 4856
	REARRANGE needs to juggle: VMINPD inum 4857
	REARRANGE one pattern worked for VMINPD inum 4857
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=4359  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4360  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4361  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4362  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4854  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4855  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4359 -- already fine
	SKIPPING VFMADDSUBPD inum 4360 -- already fine
	SKIPPING VFMADDSUBPD inum 4361 -- already fine
	SKIPPING VFMADDSUBPD inum 4362 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4854
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 4359
	REARRANGE one pattern worked for VFMADDSUBPD inum 4359
	REARRANGE needs to juggle: VFMADDSUBPD inum 4360
	REARRANGE one pattern worked for VFMADDSUBPD inum 4360
	REARRANGE needs to juggle: VFMADDSUBPD inum 4361
	REARRANGE one pattern worked for VFMADDSUBPD inum 4361
	REARRANGE needs to juggle: VFMADDSUBPD inum 4362
	REARRANGE one pattern worked for VFMADDSUBPD inum 4362
	SKIPPING VMINPD inum 4854 -- already fine
	SKIPPING VMINPD inum 4855 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=4363  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4364  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4365  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4366  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4856  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4857  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4363 -- already fine
	SKIPPING VFMADDSUBPD inum 4364 -- already fine
	SKIPPING VFMADDSUBPD inum 4365 -- already fine
	SKIPPING VFMADDSUBPD inum 4366 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4856
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 4363
	REARRANGE one pattern worked for VFMADDSUBPD inum 4363
	REARRANGE needs to juggle: VFMADDSUBPD inum 4364
	REARRANGE one pattern worked for VFMADDSUBPD inum 4364
	REARRANGE needs to juggle: VFMADDSUBPD inum 4365
	REARRANGE one pattern worked for VFMADDSUBPD inum 4365
	REARRANGE needs to juggle: VFMADDSUBPD inum 4366
	REARRANGE one pattern worked for VFMADDSUBPD inum 4366
	SKIPPING VMINPD inum 4856 -- already fine
	SKIPPING VMINPD inum 4857 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMSUBADDPS inum=4367  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4368  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4369  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4370  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4371  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4372  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4373  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4374  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=4754  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4755  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VDIVPD inum=4756  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4757  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 4367 -- already fine
	SKIPPING VFMSUBADDPS inum 4368 -- already fine
	SKIPPING VFMSUBADDPS inum 4369 -- already fine
	SKIPPING VFMSUBADDPS inum 4370 -- already fine
	SKIPPING VFMSUBADDPS inum 4371 -- already fine
	SKIPPING VFMSUBADDPS inum 4372 -- already fine
	SKIPPING VFMSUBADDPS inum 4373 -- already fine
	SKIPPING VFMSUBADDPS inum 4374 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 4754
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBADDPS inum 4367
	REARRANGE one pattern worked for VFMSUBADDPS inum 4367
	REARRANGE needs to juggle: VFMSUBADDPS inum 4368
	REARRANGE one pattern worked for VFMSUBADDPS inum 4368
	REARRANGE needs to juggle: VFMSUBADDPS inum 4369
	REARRANGE one pattern worked for VFMSUBADDPS inum 4369
	REARRANGE needs to juggle: VFMSUBADDPS inum 4370
	REARRANGE one pattern worked for VFMSUBADDPS inum 4370
	REARRANGE needs to juggle: VFMSUBADDPS inum 4371
	REARRANGE one pattern worked for VFMSUBADDPS inum 4371
	REARRANGE needs to juggle: VFMSUBADDPS inum 4372
	REARRANGE one pattern worked for VFMSUBADDPS inum 4372
	REARRANGE needs to juggle: VFMSUBADDPS inum 4373
	REARRANGE one pattern worked for VFMSUBADDPS inum 4373
	REARRANGE needs to juggle: VFMSUBADDPS inum 4374
	REARRANGE one pattern worked for VFMSUBADDPS inum 4374
	REARRANGE needs to juggle: VDIVPD inum 4754
	REARRANGE one pattern worked for VDIVPD inum 4754
	REARRANGE needs to juggle: VDIVPD inum 4755
	REARRANGE one pattern worked for VDIVPD inum 4755
	REARRANGE needs to juggle: VDIVPD inum 4756
	REARRANGE one pattern worked for VDIVPD inum 4756
	REARRANGE needs to juggle: VDIVPD inum 4757
	REARRANGE one pattern worked for VDIVPD inum 4757
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPS inum=4367  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4368  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4369  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4370  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=4754  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4755  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 4367 -- already fine
	SKIPPING VFMSUBADDPS inum 4368 -- already fine
	SKIPPING VFMSUBADDPS inum 4369 -- already fine
	SKIPPING VFMSUBADDPS inum 4370 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 4754
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPS inum 4367
	REARRANGE one pattern worked for VFMSUBADDPS inum 4367
	REARRANGE needs to juggle: VFMSUBADDPS inum 4368
	REARRANGE one pattern worked for VFMSUBADDPS inum 4368
	REARRANGE needs to juggle: VFMSUBADDPS inum 4369
	REARRANGE one pattern worked for VFMSUBADDPS inum 4369
	REARRANGE needs to juggle: VFMSUBADDPS inum 4370
	REARRANGE one pattern worked for VFMSUBADDPS inum 4370
	SKIPPING VDIVPD inum 4754 -- already fine
	SKIPPING VDIVPD inum 4755 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPS inum=4371  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4372  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4373  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4374  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=4756  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4757  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 4371 -- already fine
	SKIPPING VFMSUBADDPS inum 4372 -- already fine
	SKIPPING VFMSUBADDPS inum 4373 -- already fine
	SKIPPING VFMSUBADDPS inum 4374 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 4756
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPS inum 4371
	REARRANGE one pattern worked for VFMSUBADDPS inum 4371
	REARRANGE needs to juggle: VFMSUBADDPS inum 4372
	REARRANGE one pattern worked for VFMSUBADDPS inum 4372
	REARRANGE needs to juggle: VFMSUBADDPS inum 4373
	REARRANGE one pattern worked for VFMSUBADDPS inum 4373
	REARRANGE needs to juggle: VFMSUBADDPS inum 4374
	REARRANGE one pattern worked for VFMSUBADDPS inum 4374
	SKIPPING VDIVPD inum 4756 -- already fine
	SKIPPING VDIVPD inum 4757 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VMAXPD inum=4842  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4843  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMAXPD inum=4844  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4845  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VFMSUBADDPD inum=4375  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4376  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4377  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4378  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4379  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4380  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4381  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4382  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VMAXPD inum 4842 -- already fine
	SKIPPING VMAXPD inum 4843 -- already fine
	SKIPPING VMAXPD inum 4844 -- already fine
	SKIPPING VMAXPD inum 4845 -- already fine
	REARRANGE needs to juggle: VFMSUBADDPD inum 4375
	REARRANGE one pattern worked for VFMSUBADDPD inum 4375
	REARRANGE needs to juggle: VFMSUBADDPD inum 4376
	REARRANGE one pattern worked for VFMSUBADDPD inum 4376
	REARRANGE needs to juggle: VFMSUBADDPD inum 4377
	REARRANGE one pattern worked for VFMSUBADDPD inum 4377
	REARRANGE needs to juggle: VFMSUBADDPD inum 4378
	REARRANGE one pattern worked for VFMSUBADDPD inum 4378
	REARRANGE needs to juggle: VFMSUBADDPD inum 4379
	REARRANGE one pattern worked for VFMSUBADDPD inum 4379
	REARRANGE needs to juggle: VFMSUBADDPD inum 4380
	REARRANGE one pattern worked for VFMSUBADDPD inum 4380
	REARRANGE needs to juggle: VFMSUBADDPD inum 4381
	REARRANGE one pattern worked for VFMSUBADDPD inum 4381
	REARRANGE needs to juggle: VFMSUBADDPD inum 4382
	REARRANGE one pattern worked for VFMSUBADDPD inum 4382
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMADDPS inum=4383  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4384  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4385  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4386  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4387  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4388  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4389  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4390  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5060  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5061  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=5724  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5725  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPS inum 4383 -- already fine
	SKIPPING VFMADDPS inum 4384 -- already fine
	SKIPPING VFMADDPS inum 4385 -- already fine
	SKIPPING VFMADDPS inum 4386 -- already fine
	SKIPPING VFMADDPS inum 4387 -- already fine
	SKIPPING VFMADDPS inum 4388 -- already fine
	SKIPPING VFMADDPS inum 4389 -- already fine
	SKIPPING VFMADDPS inum 4390 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5060
	REARRANGE one pattern worked for VPUNPCKHBW inum 5060
	REARRANGE needs to juggle: VPUNPCKHBW inum 5061
	REARRANGE one pattern worked for VPUNPCKHBW inum 5061
	REARRANGE needs to juggle: VPUNPCKHBW inum 5724
	REARRANGE one pattern worked for VPUNPCKHBW inum 5724
	REARRANGE needs to juggle: VPUNPCKHBW inum 5725
	REARRANGE one pattern worked for VPUNPCKHBW inum 5725
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPS inum=4383  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4384  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4385  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4386  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4387  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4388  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4389  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4390  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5060  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5061  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=5724  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5725  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4383 -- already fine
	SKIPPING VFMADDPS inum 4384 -- already fine
	SKIPPING VFMADDPS inum 4385 -- already fine
	SKIPPING VFMADDPS inum 4386 -- already fine
	SKIPPING VFMADDPS inum 4387 -- already fine
	SKIPPING VFMADDPS inum 4388 -- already fine
	SKIPPING VFMADDPS inum 4389 -- already fine
	SKIPPING VFMADDPS inum 4390 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5060
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPS inum 4383
	REARRANGE one pattern worked for VFMADDPS inum 4383
	REARRANGE needs to juggle: VFMADDPS inum 4384
	REARRANGE one pattern worked for VFMADDPS inum 4384
	REARRANGE needs to juggle: VFMADDPS inum 4385
	REARRANGE one pattern worked for VFMADDPS inum 4385
	REARRANGE needs to juggle: VFMADDPS inum 4386
	REARRANGE one pattern worked for VFMADDPS inum 4386
	REARRANGE needs to juggle: VFMADDPS inum 4387
	REARRANGE one pattern worked for VFMADDPS inum 4387
	REARRANGE needs to juggle: VFMADDPS inum 4388
	REARRANGE one pattern worked for VFMADDPS inum 4388
	REARRANGE needs to juggle: VFMADDPS inum 4389
	REARRANGE one pattern worked for VFMADDPS inum 4389
	REARRANGE needs to juggle: VFMADDPS inum 4390
	REARRANGE one pattern worked for VFMADDPS inum 4390
	SKIPPING VPUNPCKHBW inum 5060 -- already fine
	SKIPPING VPUNPCKHBW inum 5061 -- already fine
	SKIPPING VPUNPCKHBW inum 5724 -- already fine
	SKIPPING VPUNPCKHBW inum 5725 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=4383  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4384  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4385  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4386  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5060  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5061  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4383 -- already fine
	SKIPPING VFMADDPS inum 4384 -- already fine
	SKIPPING VFMADDPS inum 4385 -- already fine
	SKIPPING VFMADDPS inum 4386 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5060
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 4383
	REARRANGE one pattern worked for VFMADDPS inum 4383
	REARRANGE needs to juggle: VFMADDPS inum 4384
	REARRANGE one pattern worked for VFMADDPS inum 4384
	REARRANGE needs to juggle: VFMADDPS inum 4385
	REARRANGE one pattern worked for VFMADDPS inum 4385
	REARRANGE needs to juggle: VFMADDPS inum 4386
	REARRANGE one pattern worked for VFMADDPS inum 4386
	SKIPPING VPUNPCKHBW inum 5060 -- already fine
	SKIPPING VPUNPCKHBW inum 5061 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=4387  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4388  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4389  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4390  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5724  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5725  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4387 -- already fine
	SKIPPING VFMADDPS inum 4388 -- already fine
	SKIPPING VFMADDPS inum 4389 -- already fine
	SKIPPING VFMADDPS inum 4390 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5724
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 4387
	REARRANGE one pattern worked for VFMADDPS inum 4387
	REARRANGE needs to juggle: VFMADDPS inum 4388
	REARRANGE one pattern worked for VFMADDPS inum 4388
	REARRANGE needs to juggle: VFMADDPS inum 4389
	REARRANGE one pattern worked for VFMADDPS inum 4389
	REARRANGE needs to juggle: VFMADDPS inum 4390
	REARRANGE one pattern worked for VFMADDPS inum 4390
	SKIPPING VPUNPCKHBW inum 5724 -- already fine
	SKIPPING VPUNPCKHBW inum 5725 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPUNPCKHWD inum=5062  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5063  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=5726  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5727  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDPD inum=4391  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4392  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4393  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4394  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4395  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4396  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4397  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4398  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHWD inum 5062 -- already fine
	SKIPPING VPUNPCKHWD inum 5063 -- already fine
	SKIPPING VPUNPCKHWD inum 5726 -- already fine
	SKIPPING VPUNPCKHWD inum 5727 -- already fine
	REARRANGE needs to juggle: VFMADDPD inum 4391
	REARRANGE one pattern worked for VFMADDPD inum 4391
	REARRANGE needs to juggle: VFMADDPD inum 4392
	REARRANGE one pattern worked for VFMADDPD inum 4392
	REARRANGE needs to juggle: VFMADDPD inum 4393
	REARRANGE one pattern worked for VFMADDPD inum 4393
	REARRANGE needs to juggle: VFMADDPD inum 4394
	REARRANGE one pattern worked for VFMADDPD inum 4394
	REARRANGE needs to juggle: VFMADDPD inum 4395
	REARRANGE one pattern worked for VFMADDPD inum 4395
	REARRANGE needs to juggle: VFMADDPD inum 4396
	REARRANGE one pattern worked for VFMADDPD inum 4396
	REARRANGE needs to juggle: VFMADDPD inum 4397
	REARRANGE one pattern worked for VFMADDPD inum 4397
	REARRANGE needs to juggle: VFMADDPD inum 4398
	REARRANGE one pattern worked for VFMADDPD inum 4398
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VPUNPCKHWD inum=5062  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5063  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDPD inum=4391  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4392  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4393  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4394  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPUNPCKHWD inum 5062 -- already fine
	SKIPPING VPUNPCKHWD inum 5063 -- already fine
	REARRANGE needs to juggle: VFMADDPD inum 4391
	REARRANGE one pattern worked for VFMADDPD inum 4391
	REARRANGE needs to juggle: VFMADDPD inum 4392
	REARRANGE one pattern worked for VFMADDPD inum 4392
	REARRANGE needs to juggle: VFMADDPD inum 4393
	REARRANGE one pattern worked for VFMADDPD inum 4393
	REARRANGE needs to juggle: VFMADDPD inum 4394
	REARRANGE one pattern worked for VFMADDPD inum 4394
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VPUNPCKHWD inum=5726  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5727  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDPD inum=4395  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4396  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4397  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4398  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPUNPCKHWD inum 5726 -- already fine
	SKIPPING VPUNPCKHWD inum 5727 -- already fine
	REARRANGE needs to juggle: VFMADDPD inum 4395
	REARRANGE one pattern worked for VFMADDPD inum 4395
	REARRANGE needs to juggle: VFMADDPD inum 4396
	REARRANGE one pattern worked for VFMADDPD inum 4396
	REARRANGE needs to juggle: VFMADDPD inum 4397
	REARRANGE one pattern worked for VFMADDPD inum 4397
	REARRANGE needs to juggle: VFMADDPD inum 4398
	REARRANGE one pattern worked for VFMADDPD inum 4398
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPUNPCKHDQ inum=5064  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5065  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=5728  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5729  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSS inum=4399  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4400  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=4401  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4402  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHDQ inum 5064 -- already fine
	SKIPPING VPUNPCKHDQ inum 5065 -- already fine
	SKIPPING VPUNPCKHDQ inum 5728 -- already fine
	SKIPPING VPUNPCKHDQ inum 5729 -- already fine
	REARRANGE needs to juggle: VFMADDSS inum 4399
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5064
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5064
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5065
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5065
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5728
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5728
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5729
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5729
	SKIPPING VFMADDSS inum 4399 -- already fine
	SKIPPING VFMADDSS inum 4400 -- already fine
	SKIPPING VFMADDSS inum 4401 -- already fine
	SKIPPING VFMADDSS inum 4402 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPUNPCKHDQ inum=5064  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5065  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=5728  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5729  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSS inum=4399  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4400  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=4401  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4402  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHDQ inum 5064 -- already fine
	SKIPPING VPUNPCKHDQ inum 5065 -- already fine
	SKIPPING VPUNPCKHDQ inum 5728 -- already fine
	SKIPPING VPUNPCKHDQ inum 5729 -- already fine
	REARRANGE needs to juggle: VFMADDSS inum 4399
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5064
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5064
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5065
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5065
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5728
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5728
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5729
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5729
	REARRANGE needs to juggle: VFMADDSS inum 4399
	REARRANGE one pattern worked for VFMADDSS inum 4399
	REARRANGE needs to juggle: VFMADDSS inum 4400
	REARRANGE one pattern worked for VFMADDSS inum 4400
	REARRANGE needs to juggle: VFMADDSS inum 4401
	REARRANGE one pattern worked for VFMADDSS inum 4401
	REARRANGE needs to juggle: VFMADDSS inum 4402
	REARRANGE one pattern worked for VFMADDSS inum 4402
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPACKSSDW inum=4950  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=4951  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=5586  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5587  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSD inum=4403  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4404  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=4405  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4406  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPACKSSDW inum 4950 -- already fine
	SKIPPING VPACKSSDW inum 4951 -- already fine
	SKIPPING VPACKSSDW inum 5586 -- already fine
	SKIPPING VPACKSSDW inum 5587 -- already fine
	REARRANGE needs to juggle: VFMADDSD inum 4403
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPACKSSDW inum 4950
	REARRANGE one pattern worked for VPACKSSDW inum 4950
	REARRANGE needs to juggle: VPACKSSDW inum 4951
	REARRANGE one pattern worked for VPACKSSDW inum 4951
	REARRANGE needs to juggle: VPACKSSDW inum 5586
	REARRANGE one pattern worked for VPACKSSDW inum 5586
	REARRANGE needs to juggle: VPACKSSDW inum 5587
	REARRANGE one pattern worked for VPACKSSDW inum 5587
	SKIPPING VFMADDSD inum 4403 -- already fine
	SKIPPING VFMADDSD inum 4404 -- already fine
	SKIPPING VFMADDSD inum 4405 -- already fine
	SKIPPING VFMADDSD inum 4406 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPACKSSDW inum=4950  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=4951  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=5586  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5587  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSD inum=4403  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4404  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=4405  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4406  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPACKSSDW inum 4950 -- already fine
	SKIPPING VPACKSSDW inum 4951 -- already fine
	SKIPPING VPACKSSDW inum 5586 -- already fine
	SKIPPING VPACKSSDW inum 5587 -- already fine
	REARRANGE needs to juggle: VFMADDSD inum 4403
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPACKSSDW inum 4950
	REARRANGE one pattern worked for VPACKSSDW inum 4950
	REARRANGE needs to juggle: VPACKSSDW inum 4951
	REARRANGE one pattern worked for VPACKSSDW inum 4951
	REARRANGE needs to juggle: VPACKSSDW inum 5586
	REARRANGE one pattern worked for VPACKSSDW inum 5586
	REARRANGE needs to juggle: VPACKSSDW inum 5587
	REARRANGE one pattern worked for VPACKSSDW inum 5587
	REARRANGE needs to juggle: VFMADDSD inum 4403
	REARRANGE one pattern worked for VFMADDSD inum 4403
	REARRANGE needs to juggle: VFMADDSD inum 4404
	REARRANGE one pattern worked for VFMADDSD inum 4404
	REARRANGE needs to juggle: VFMADDSD inum 4405
	REARRANGE one pattern worked for VFMADDSD inum 4405
	REARRANGE needs to juggle: VFMADDSD inum 4406
	REARRANGE one pattern worked for VFMADDSD inum 4406
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBPS inum=4407  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4408  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4409  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4410  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4411  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4412  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4413  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4414  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5074  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5075  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=5738  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5739  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBPS inum 4407 -- already fine
	SKIPPING VFMSUBPS inum 4408 -- already fine
	SKIPPING VFMSUBPS inum 4409 -- already fine
	SKIPPING VFMSUBPS inum 4410 -- already fine
	SKIPPING VFMSUBPS inum 4411 -- already fine
	SKIPPING VFMSUBPS inum 4412 -- already fine
	SKIPPING VFMSUBPS inum 4413 -- already fine
	SKIPPING VFMSUBPS inum 4414 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5074
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5074
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5075
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5075
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5738
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5738
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5739
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5739
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBPS inum=4407  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4408  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4409  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4410  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4411  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4412  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4413  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4414  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5074  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5075  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=5738  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5739  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4407 -- already fine
	SKIPPING VFMSUBPS inum 4408 -- already fine
	SKIPPING VFMSUBPS inum 4409 -- already fine
	SKIPPING VFMSUBPS inum 4410 -- already fine
	SKIPPING VFMSUBPS inum 4411 -- already fine
	SKIPPING VFMSUBPS inum 4412 -- already fine
	SKIPPING VFMSUBPS inum 4413 -- already fine
	SKIPPING VFMSUBPS inum 4414 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5074
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBPS inum 4407
	REARRANGE one pattern worked for VFMSUBPS inum 4407
	REARRANGE needs to juggle: VFMSUBPS inum 4408
	REARRANGE one pattern worked for VFMSUBPS inum 4408
	REARRANGE needs to juggle: VFMSUBPS inum 4409
	REARRANGE one pattern worked for VFMSUBPS inum 4409
	REARRANGE needs to juggle: VFMSUBPS inum 4410
	REARRANGE one pattern worked for VFMSUBPS inum 4410
	REARRANGE needs to juggle: VFMSUBPS inum 4411
	REARRANGE one pattern worked for VFMSUBPS inum 4411
	REARRANGE needs to juggle: VFMSUBPS inum 4412
	REARRANGE one pattern worked for VFMSUBPS inum 4412
	REARRANGE needs to juggle: VFMSUBPS inum 4413
	REARRANGE one pattern worked for VFMSUBPS inum 4413
	REARRANGE needs to juggle: VFMSUBPS inum 4414
	REARRANGE one pattern worked for VFMSUBPS inum 4414
	SKIPPING VPUNPCKLQDQ inum 5074 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5075 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5738 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5739 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=4407  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4408  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4409  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4410  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5074  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5075  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4407 -- already fine
	SKIPPING VFMSUBPS inum 4408 -- already fine
	SKIPPING VFMSUBPS inum 4409 -- already fine
	SKIPPING VFMSUBPS inum 4410 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5074
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 4407
	REARRANGE one pattern worked for VFMSUBPS inum 4407
	REARRANGE needs to juggle: VFMSUBPS inum 4408
	REARRANGE one pattern worked for VFMSUBPS inum 4408
	REARRANGE needs to juggle: VFMSUBPS inum 4409
	REARRANGE one pattern worked for VFMSUBPS inum 4409
	REARRANGE needs to juggle: VFMSUBPS inum 4410
	REARRANGE one pattern worked for VFMSUBPS inum 4410
	SKIPPING VPUNPCKLQDQ inum 5074 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5075 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=4411  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4412  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4413  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4414  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5738  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5739  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4411 -- already fine
	SKIPPING VFMSUBPS inum 4412 -- already fine
	SKIPPING VFMSUBPS inum 4413 -- already fine
	SKIPPING VFMSUBPS inum 4414 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5738
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 4411
	REARRANGE one pattern worked for VFMSUBPS inum 4411
	REARRANGE needs to juggle: VFMSUBPS inum 4412
	REARRANGE one pattern worked for VFMSUBPS inum 4412
	REARRANGE needs to juggle: VFMSUBPS inum 4413
	REARRANGE one pattern worked for VFMSUBPS inum 4413
	REARRANGE needs to juggle: VFMSUBPS inum 4414
	REARRANGE one pattern worked for VFMSUBPS inum 4414
	SKIPPING VPUNPCKLQDQ inum 5738 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5739 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPUNPCKHQDQ inum=5066  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5067  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHQDQ inum=5730  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5731  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMSUBPD inum=4415  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4416  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4417  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4418  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4419  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4420  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4421  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4422  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHQDQ inum 5066 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5067 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5730 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5731 -- already fine
	REARRANGE needs to juggle: VFMSUBPD inum 4415
	REARRANGE one pattern worked for VFMSUBPD inum 4415
	REARRANGE needs to juggle: VFMSUBPD inum 4416
	REARRANGE one pattern worked for VFMSUBPD inum 4416
	REARRANGE needs to juggle: VFMSUBPD inum 4417
	REARRANGE one pattern worked for VFMSUBPD inum 4417
	REARRANGE needs to juggle: VFMSUBPD inum 4418
	REARRANGE one pattern worked for VFMSUBPD inum 4418
	REARRANGE needs to juggle: VFMSUBPD inum 4419
	REARRANGE one pattern worked for VFMSUBPD inum 4419
	REARRANGE needs to juggle: VFMSUBPD inum 4420
	REARRANGE one pattern worked for VFMSUBPD inum 4420
	REARRANGE needs to juggle: VFMSUBPD inum 4421
	REARRANGE one pattern worked for VFMSUBPD inum 4421
	REARRANGE needs to juggle: VFMSUBPD inum 4422
	REARRANGE one pattern worked for VFMSUBPD inum 4422
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VPUNPCKHQDQ inum=5066  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5067  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMSUBPD inum=4415  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4416  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4417  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4418  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPUNPCKHQDQ inum 5066 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5067 -- already fine
	REARRANGE needs to juggle: VFMSUBPD inum 4415
	REARRANGE one pattern worked for VFMSUBPD inum 4415
	REARRANGE needs to juggle: VFMSUBPD inum 4416
	REARRANGE one pattern worked for VFMSUBPD inum 4416
	REARRANGE needs to juggle: VFMSUBPD inum 4417
	REARRANGE one pattern worked for VFMSUBPD inum 4417
	REARRANGE needs to juggle: VFMSUBPD inum 4418
	REARRANGE one pattern worked for VFMSUBPD inum 4418
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VPUNPCKHQDQ inum=5730  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5731  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMSUBPD inum=4419  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4420  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4421  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4422  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPUNPCKHQDQ inum 5730 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5731 -- already fine
	REARRANGE needs to juggle: VFMSUBPD inum 4419
	REARRANGE one pattern worked for VFMSUBPD inum 4419
	REARRANGE needs to juggle: VFMSUBPD inum 4420
	REARRANGE one pattern worked for VFMSUBPD inum 4420
	REARRANGE needs to juggle: VFMSUBPD inum 4421
	REARRANGE one pattern worked for VFMSUBPD inum 4421
	REARRANGE needs to juggle: VFMSUBPD inum 4422
	REARRANGE one pattern worked for VFMSUBPD inum 4422
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMSUBSS inum=4423  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4424  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=4425  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4426  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4882  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4883  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4886  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4887  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4890  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4891  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBSS inum 4423 -- already fine
	SKIPPING VFMSUBSS inum 4424 -- already fine
	SKIPPING VFMSUBSS inum 4425 -- already fine
	SKIPPING VFMSUBSS inum 4426 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4882
	REARRANGE one pattern worked for VMOVD inum 4882
	REARRANGE needs to juggle: VMOVD inum 4883
	REARRANGE one pattern worked for VMOVD inum 4883
	REARRANGE needs to juggle: VMOVD inum 4886
	REARRANGE one pattern worked for VMOVD inum 4886
	REARRANGE needs to juggle: VMOVD inum 4887
	REARRANGE one pattern worked for VMOVD inum 4887
	REARRANGE needs to juggle: VMOVQ inum 4890
	REARRANGE one pattern worked for VMOVQ inum 4890
	REARRANGE needs to juggle: VMOVQ inum 4891
	REARRANGE one pattern worked for VMOVQ inum 4891
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBSS inum=4423  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4424  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=4425  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4426  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4882  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4883  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4886  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4887  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4890  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4891  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBSS inum 4423 -- already fine
	SKIPPING VFMSUBSS inum 4424 -- already fine
	SKIPPING VFMSUBSS inum 4425 -- already fine
	SKIPPING VFMSUBSS inum 4426 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4882
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBSS inum 4423
	REARRANGE one pattern worked for VFMSUBSS inum 4423
	REARRANGE needs to juggle: VFMSUBSS inum 4424
	REARRANGE one pattern worked for VFMSUBSS inum 4424
	REARRANGE needs to juggle: VFMSUBSS inum 4425
	REARRANGE one pattern worked for VFMSUBSS inum 4425
	REARRANGE needs to juggle: VFMSUBSS inum 4426
	REARRANGE one pattern worked for VFMSUBSS inum 4426
	REARRANGE needs to juggle: VMOVD inum 4882
	REARRANGE one pattern worked for VMOVD inum 4882
	REARRANGE needs to juggle: VMOVD inum 4883
	REARRANGE one pattern worked for VMOVD inum 4883
	REARRANGE needs to juggle: VMOVD inum 4886
	REARRANGE one pattern worked for VMOVD inum 4886
	REARRANGE needs to juggle: VMOVD inum 4887
	REARRANGE one pattern worked for VMOVD inum 4887
	REARRANGE needs to juggle: VMOVQ inum 4890
	REARRANGE one pattern worked for VMOVQ inum 4890
	REARRANGE needs to juggle: VMOVQ inum 4891
	REARRANGE one pattern worked for VMOVQ inum 4891
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBSD inum=4427  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4428  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=4429  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4430  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQU inum=4910  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4911  iform_input=VMOVDQU_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4912  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4913  iform_input=VMOVDQU_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4902  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4903  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4906  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4907  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBSD inum 4427 -- already fine
	SKIPPING VFMSUBSD inum 4428 -- already fine
	SKIPPING VFMSUBSD inum 4429 -- already fine
	SKIPPING VFMSUBSD inum 4430 -- already fine
	REARRANGE needs to juggle: VMOVDQU inum 4910
	REARRANGE one pattern worked for VMOVDQU inum 4910
	REARRANGE needs to juggle: VMOVDQU inum 4911
	REARRANGE one pattern worked for VMOVDQU inum 4911
	REARRANGE needs to juggle: VMOVDQU inum 4912
	REARRANGE one pattern worked for VMOVDQU inum 4912
	REARRANGE needs to juggle: VMOVDQU inum 4913
	REARRANGE one pattern worked for VMOVDQU inum 4913
	REARRANGE needs to juggle: VMOVDQA inum 4902
	REARRANGE one pattern worked for VMOVDQA inum 4902
	REARRANGE needs to juggle: VMOVDQA inum 4903
	REARRANGE one pattern worked for VMOVDQA inum 4903
	REARRANGE needs to juggle: VMOVDQA inum 4906
	REARRANGE one pattern worked for VMOVDQA inum 4906
	REARRANGE needs to juggle: VMOVDQA inum 4907
	REARRANGE one pattern worked for VMOVDQA inum 4907
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBSD inum=4427  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4428  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=4429  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4430  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=4902  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4903  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4906  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4907  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBSD inum 4427 -- already fine
	SKIPPING VFMSUBSD inum 4428 -- already fine
	SKIPPING VFMSUBSD inum 4429 -- already fine
	SKIPPING VFMSUBSD inum 4430 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 4902
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBSD inum 4427
	REARRANGE one pattern worked for VFMSUBSD inum 4427
	REARRANGE needs to juggle: VFMSUBSD inum 4428
	REARRANGE one pattern worked for VFMSUBSD inum 4428
	REARRANGE needs to juggle: VFMSUBSD inum 4429
	REARRANGE one pattern worked for VFMSUBSD inum 4429
	REARRANGE needs to juggle: VFMSUBSD inum 4430
	REARRANGE one pattern worked for VFMSUBSD inum 4430
	REARRANGE needs to juggle: VMOVDQA inum 4902
	REARRANGE one pattern worked for VMOVDQA inum 4902
	REARRANGE needs to juggle: VMOVDQA inum 4903
	REARRANGE one pattern worked for VMOVDQA inum 4903
	REARRANGE needs to juggle: VMOVDQA inum 4906
	REARRANGE one pattern worked for VMOVDQA inum 4906
	REARRANGE needs to juggle: VMOVDQA inum 4907
	REARRANGE one pattern worked for VMOVDQA inum 4907
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMADDPS inum=4431  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4432  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4433  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4434  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4435  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4436  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4437  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4438  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTB inum=5823  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5824  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=5825  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5826  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMADDPS inum 4431 -- already fine
	SKIPPING VFNMADDPS inum 4432 -- already fine
	SKIPPING VFNMADDPS inum 4433 -- already fine
	SKIPPING VFNMADDPS inum 4434 -- already fine
	SKIPPING VFNMADDPS inum 4435 -- already fine
	SKIPPING VFNMADDPS inum 4436 -- already fine
	SKIPPING VFNMADDPS inum 4437 -- already fine
	SKIPPING VFNMADDPS inum 4438 -- already fine
	REARRANGE needs to juggle: VPBROADCASTB inum 5823
	REARRANGE one pattern worked for VPBROADCASTB inum 5823
	REARRANGE needs to juggle: VPBROADCASTB inum 5824
	REARRANGE one pattern worked for VPBROADCASTB inum 5824
	REARRANGE needs to juggle: VPBROADCASTB inum 5825
	REARRANGE one pattern worked for VPBROADCASTB inum 5825
	REARRANGE needs to juggle: VPBROADCASTB inum 5826
	REARRANGE one pattern worked for VPBROADCASTB inum 5826
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMADDPS inum=4431  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4432  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4433  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4434  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4435  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4436  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4437  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4438  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTB inum=5823  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5824  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=5825  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5826  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMADDPS inum 4431 -- already fine
	SKIPPING VFNMADDPS inum 4432 -- already fine
	SKIPPING VFNMADDPS inum 4433 -- already fine
	SKIPPING VFNMADDPS inum 4434 -- already fine
	SKIPPING VFNMADDPS inum 4435 -- already fine
	SKIPPING VFNMADDPS inum 4436 -- already fine
	SKIPPING VFNMADDPS inum 4437 -- already fine
	SKIPPING VFNMADDPS inum 4438 -- already fine
	REARRANGE needs to juggle: VPBROADCASTB inum 5823
	REARRANGE one pattern worked for VPBROADCASTB inum 5823
	REARRANGE needs to juggle: VPBROADCASTB inum 5824
	REARRANGE one pattern worked for VPBROADCASTB inum 5824
	REARRANGE needs to juggle: VPBROADCASTB inum 5825
	REARRANGE one pattern worked for VPBROADCASTB inum 5825
	REARRANGE needs to juggle: VPBROADCASTB inum 5826
	REARRANGE one pattern worked for VPBROADCASTB inum 5826
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPBROADCASTW inum=5827  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5828  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTW inum=5829  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5830  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPD inum=4439  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4440  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4441  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4442  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4443  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4444  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4445  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4446  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPBROADCASTW inum 5827 -- already fine
	SKIPPING VPBROADCASTW inum 5828 -- already fine
	SKIPPING VPBROADCASTW inum 5829 -- already fine
	SKIPPING VPBROADCASTW inum 5830 -- already fine
	REARRANGE needs to juggle: VFNMADDPD inum 4439
	REARRANGE one pattern worked for VFNMADDPD inum 4439
	REARRANGE needs to juggle: VFNMADDPD inum 4440
	REARRANGE one pattern worked for VFNMADDPD inum 4440
	REARRANGE needs to juggle: VFNMADDPD inum 4441
	REARRANGE one pattern worked for VFNMADDPD inum 4441
	REARRANGE needs to juggle: VFNMADDPD inum 4442
	REARRANGE one pattern worked for VFNMADDPD inum 4442
	REARRANGE needs to juggle: VFNMADDPD inum 4443
	REARRANGE one pattern worked for VFNMADDPD inum 4443
	REARRANGE needs to juggle: VFNMADDPD inum 4444
	REARRANGE one pattern worked for VFNMADDPD inum 4444
	REARRANGE needs to juggle: VFNMADDPD inum 4445
	REARRANGE one pattern worked for VFNMADDPD inum 4445
	REARRANGE needs to juggle: VFNMADDPD inum 4446
	REARRANGE one pattern worked for VFNMADDPD inum 4446
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VPBROADCASTW inum=5827  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5828  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPD inum=4439  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4440  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4441  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4442  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPBROADCASTW inum 5827 -- already fine
	SKIPPING VPBROADCASTW inum 5828 -- already fine
	REARRANGE needs to juggle: VFNMADDPD inum 4439
	REARRANGE one pattern worked for VFNMADDPD inum 4439
	REARRANGE needs to juggle: VFNMADDPD inum 4440
	REARRANGE one pattern worked for VFNMADDPD inum 4440
	REARRANGE needs to juggle: VFNMADDPD inum 4441
	REARRANGE one pattern worked for VFNMADDPD inum 4441
	REARRANGE needs to juggle: VFNMADDPD inum 4442
	REARRANGE one pattern worked for VFNMADDPD inum 4442
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VPBROADCASTW inum=5829  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5830  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPD inum=4443  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4444  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4445  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4446  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPBROADCASTW inum 5829 -- already fine
	SKIPPING VPBROADCASTW inum 5830 -- already fine
	REARRANGE needs to juggle: VFNMADDPD inum 4443
	REARRANGE one pattern worked for VFNMADDPD inum 4443
	REARRANGE needs to juggle: VFNMADDPD inum 4444
	REARRANGE one pattern worked for VFNMADDPD inum 4444
	REARRANGE needs to juggle: VFNMADDPD inum 4445
	REARRANGE one pattern worked for VFNMADDPD inum 4445
	REARRANGE needs to juggle: VFNMADDPD inum 4446
	REARRANGE one pattern worked for VFNMADDPD inum 4446
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBPS inum=4455  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4456  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4457  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4458  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4459  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4460  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4461  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4462  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPS inum=4782  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=4783  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=4784  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=4785  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=4778  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4779  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=4780  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4781  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBPS inum 4455 -- already fine
	SKIPPING VFNMSUBPS inum 4456 -- already fine
	SKIPPING VFNMSUBPS inum 4457 -- already fine
	SKIPPING VFNMSUBPS inum 4458 -- already fine
	SKIPPING VFNMSUBPS inum 4459 -- already fine
	SKIPPING VFNMSUBPS inum 4460 -- already fine
	SKIPPING VFNMSUBPS inum 4461 -- already fine
	SKIPPING VFNMSUBPS inum 4462 -- already fine
	REARRANGE needs to juggle: VHADDPS inum 4782
	REARRANGE one pattern worked for VHADDPS inum 4782
	REARRANGE needs to juggle: VHADDPS inum 4783
	REARRANGE one pattern worked for VHADDPS inum 4783
	REARRANGE needs to juggle: VHADDPS inum 4784
	REARRANGE one pattern worked for VHADDPS inum 4784
	REARRANGE needs to juggle: VHADDPS inum 4785
	REARRANGE one pattern worked for VHADDPS inum 4785
	REARRANGE needs to juggle: VHADDPD inum 4778
	REARRANGE one pattern worked for VHADDPD inum 4778
	REARRANGE needs to juggle: VHADDPD inum 4779
	REARRANGE one pattern worked for VHADDPD inum 4779
	REARRANGE needs to juggle: VHADDPD inum 4780
	REARRANGE one pattern worked for VHADDPD inum 4780
	REARRANGE needs to juggle: VHADDPD inum 4781
	REARRANGE one pattern worked for VHADDPD inum 4781
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBPS inum=4455  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4456  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4457  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4458  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4459  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4460  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4461  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4462  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4778  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4779  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=4780  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4781  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 4455 -- already fine
	SKIPPING VFNMSUBPS inum 4456 -- already fine
	SKIPPING VFNMSUBPS inum 4457 -- already fine
	SKIPPING VFNMSUBPS inum 4458 -- already fine
	SKIPPING VFNMSUBPS inum 4459 -- already fine
	SKIPPING VFNMSUBPS inum 4460 -- already fine
	SKIPPING VFNMSUBPS inum 4461 -- already fine
	SKIPPING VFNMSUBPS inum 4462 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4778
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFNMSUBPS inum 4455
	REARRANGE one pattern worked for VFNMSUBPS inum 4455
	REARRANGE needs to juggle: VFNMSUBPS inum 4456
	REARRANGE one pattern worked for VFNMSUBPS inum 4456
	REARRANGE needs to juggle: VFNMSUBPS inum 4457
	REARRANGE one pattern worked for VFNMSUBPS inum 4457
	REARRANGE needs to juggle: VFNMSUBPS inum 4458
	REARRANGE one pattern worked for VFNMSUBPS inum 4458
	REARRANGE needs to juggle: VFNMSUBPS inum 4459
	REARRANGE one pattern worked for VFNMSUBPS inum 4459
	REARRANGE needs to juggle: VFNMSUBPS inum 4460
	REARRANGE one pattern worked for VFNMSUBPS inum 4460
	REARRANGE needs to juggle: VFNMSUBPS inum 4461
	REARRANGE one pattern worked for VFNMSUBPS inum 4461
	REARRANGE needs to juggle: VFNMSUBPS inum 4462
	REARRANGE one pattern worked for VFNMSUBPS inum 4462
	SKIPPING VHADDPD inum 4778 -- already fine
	SKIPPING VHADDPD inum 4779 -- already fine
	SKIPPING VHADDPD inum 4780 -- already fine
	SKIPPING VHADDPD inum 4781 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPS inum=4455  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4456  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4457  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4458  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4778  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4779  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 4455 -- already fine
	SKIPPING VFNMSUBPS inum 4456 -- already fine
	SKIPPING VFNMSUBPS inum 4457 -- already fine
	SKIPPING VFNMSUBPS inum 4458 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4778
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPS inum 4455
	REARRANGE one pattern worked for VFNMSUBPS inum 4455
	REARRANGE needs to juggle: VFNMSUBPS inum 4456
	REARRANGE one pattern worked for VFNMSUBPS inum 4456
	REARRANGE needs to juggle: VFNMSUBPS inum 4457
	REARRANGE one pattern worked for VFNMSUBPS inum 4457
	REARRANGE needs to juggle: VFNMSUBPS inum 4458
	REARRANGE one pattern worked for VFNMSUBPS inum 4458
	SKIPPING VHADDPD inum 4778 -- already fine
	SKIPPING VHADDPD inum 4779 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPS inum=4459  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4460  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4461  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4462  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4780  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4781  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 4459 -- already fine
	SKIPPING VFNMSUBPS inum 4460 -- already fine
	SKIPPING VFNMSUBPS inum 4461 -- already fine
	SKIPPING VFNMSUBPS inum 4462 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4780
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPS inum 4459
	REARRANGE one pattern worked for VFNMSUBPS inum 4459
	REARRANGE needs to juggle: VFNMSUBPS inum 4460
	REARRANGE one pattern worked for VFNMSUBPS inum 4460
	REARRANGE needs to juggle: VFNMSUBPS inum 4461
	REARRANGE one pattern worked for VFNMSUBPS inum 4461
	REARRANGE needs to juggle: VFNMSUBPS inum 4462
	REARRANGE one pattern worked for VFNMSUBPS inum 4462
	SKIPPING VHADDPD inum 4780 -- already fine
	SKIPPING VHADDPD inum 4781 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VHSUBPS inum=4790  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=4791  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=4792  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=4793  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPD inum=4463  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4464  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4465  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4466  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4467  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4468  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4469  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4470  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4786  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4787  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPD inum=4788  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4789  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VHSUBPS inum 4790 -- already fine
	SKIPPING VHSUBPS inum 4791 -- already fine
	SKIPPING VHSUBPS inum 4792 -- already fine
	SKIPPING VHSUBPS inum 4793 -- already fine
	REARRANGE needs to juggle: VFNMSUBPD inum 4463
	REARRANGE one pattern worked for VFNMSUBPD inum 4463
	REARRANGE needs to juggle: VFNMSUBPD inum 4464
	REARRANGE one pattern worked for VFNMSUBPD inum 4464
	REARRANGE needs to juggle: VFNMSUBPD inum 4465
	REARRANGE one pattern worked for VFNMSUBPD inum 4465
	REARRANGE needs to juggle: VFNMSUBPD inum 4466
	REARRANGE one pattern worked for VFNMSUBPD inum 4466
	REARRANGE needs to juggle: VFNMSUBPD inum 4467
	REARRANGE one pattern worked for VFNMSUBPD inum 4467
	REARRANGE needs to juggle: VFNMSUBPD inum 4468
	REARRANGE one pattern worked for VFNMSUBPD inum 4468
	REARRANGE needs to juggle: VFNMSUBPD inum 4469
	REARRANGE one pattern worked for VFNMSUBPD inum 4469
	REARRANGE needs to juggle: VFNMSUBPD inum 4470
	REARRANGE one pattern worked for VFNMSUBPD inum 4470
	SKIPPING VHSUBPD inum 4786 -- already fine
	SKIPPING VHSUBPD inum 4787 -- already fine
	SKIPPING VHSUBPD inum 4788 -- already fine
	SKIPPING VHSUBPD inum 4789 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPD inum=4463  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4464  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4465  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4466  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4786  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4787  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 4463 -- already fine
	SKIPPING VFNMSUBPD inum 4464 -- already fine
	SKIPPING VFNMSUBPD inum 4465 -- already fine
	SKIPPING VFNMSUBPD inum 4466 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 4786
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPD inum 4463
	REARRANGE one pattern worked for VFNMSUBPD inum 4463
	REARRANGE needs to juggle: VFNMSUBPD inum 4464
	REARRANGE one pattern worked for VFNMSUBPD inum 4464
	REARRANGE needs to juggle: VFNMSUBPD inum 4465
	REARRANGE one pattern worked for VFNMSUBPD inum 4465
	REARRANGE needs to juggle: VFNMSUBPD inum 4466
	REARRANGE one pattern worked for VFNMSUBPD inum 4466
	SKIPPING VHSUBPD inum 4786 -- already fine
	SKIPPING VHSUBPD inum 4787 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPD inum=4467  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4468  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4469  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4470  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4788  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4789  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 4467 -- already fine
	SKIPPING VFNMSUBPD inum 4468 -- already fine
	SKIPPING VFNMSUBPD inum 4469 -- already fine
	SKIPPING VFNMSUBPD inum 4470 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 4788
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPD inum 4467
	REARRANGE one pattern worked for VFNMSUBPD inum 4467
	REARRANGE needs to juggle: VFNMSUBPD inum 4468
	REARRANGE one pattern worked for VFNMSUBPD inum 4468
	REARRANGE needs to juggle: VFNMSUBPD inum 4469
	REARRANGE one pattern worked for VFNMSUBPD inum 4469
	REARRANGE needs to juggle: VFNMSUBPD inum 4470
	REARRANGE one pattern worked for VFNMSUBPD inum 4470
	SKIPPING VHSUBPD inum 4788 -- already fine
	SKIPPING VHSUBPD inum 4789 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBSS inum=4471  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4472  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=4473  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4474  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4884  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4885  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4888  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4889  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4892  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4893  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4894  iform_input=VMOVQ_XMMdq_MEMq_7E  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVQ inum=4895  iform_input=VMOVQ_XMMdq_XMMq_7E  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBSS inum 4471 -- already fine
	SKIPPING VFNMSUBSS inum 4472 -- already fine
	SKIPPING VFNMSUBSS inum 4473 -- already fine
	SKIPPING VFNMSUBSS inum 4474 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4884
	REARRANGE one pattern worked for VMOVD inum 4884
	REARRANGE needs to juggle: VMOVD inum 4885
	REARRANGE one pattern worked for VMOVD inum 4885
	REARRANGE needs to juggle: VMOVD inum 4888
	REARRANGE one pattern worked for VMOVD inum 4888
	REARRANGE needs to juggle: VMOVD inum 4889
	REARRANGE one pattern worked for VMOVD inum 4889
	REARRANGE needs to juggle: VMOVQ inum 4892
	REARRANGE one pattern worked for VMOVQ inum 4892
	REARRANGE needs to juggle: VMOVQ inum 4893
	REARRANGE one pattern worked for VMOVQ inum 4893
	REARRANGE needs to juggle: VMOVQ inum 4894
	REARRANGE one pattern worked for VMOVQ inum 4894
	REARRANGE needs to juggle: VMOVQ inum 4895
	REARRANGE one pattern worked for VMOVQ inum 4895
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBSS inum=4471  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4472  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=4473  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4474  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4884  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4885  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4888  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4889  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4892  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4893  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBSS inum 4471 -- already fine
	SKIPPING VFNMSUBSS inum 4472 -- already fine
	SKIPPING VFNMSUBSS inum 4473 -- already fine
	SKIPPING VFNMSUBSS inum 4474 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4884
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBSS inum 4471
	REARRANGE one pattern worked for VFNMSUBSS inum 4471
	REARRANGE needs to juggle: VFNMSUBSS inum 4472
	REARRANGE one pattern worked for VFNMSUBSS inum 4472
	REARRANGE needs to juggle: VFNMSUBSS inum 4473
	REARRANGE one pattern worked for VFNMSUBSS inum 4473
	REARRANGE needs to juggle: VFNMSUBSS inum 4474
	REARRANGE one pattern worked for VFNMSUBSS inum 4474
	REARRANGE needs to juggle: VMOVD inum 4884
	REARRANGE one pattern worked for VMOVD inum 4884
	REARRANGE needs to juggle: VMOVD inum 4885
	REARRANGE one pattern worked for VMOVD inum 4885
	REARRANGE needs to juggle: VMOVD inum 4888
	REARRANGE one pattern worked for VMOVD inum 4888
	REARRANGE needs to juggle: VMOVD inum 4889
	REARRANGE one pattern worked for VMOVD inum 4889
	REARRANGE needs to juggle: VMOVQ inum 4892
	REARRANGE one pattern worked for VMOVQ inum 4892
	REARRANGE needs to juggle: VMOVQ inum 4893
	REARRANGE one pattern worked for VMOVQ inum 4893
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBSD inum=4475  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4476  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=4477  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4478  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQU inum=4914  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4915  iform_input=VMOVDQU_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4916  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4917  iform_input=VMOVDQU_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4904  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4905  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4908  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4909  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBSD inum 4475 -- already fine
	SKIPPING VFNMSUBSD inum 4476 -- already fine
	SKIPPING VFNMSUBSD inum 4477 -- already fine
	SKIPPING VFNMSUBSD inum 4478 -- already fine
	REARRANGE needs to juggle: VMOVDQU inum 4914
	REARRANGE one pattern worked for VMOVDQU inum 4914
	REARRANGE needs to juggle: VMOVDQU inum 4915
	REARRANGE one pattern worked for VMOVDQU inum 4915
	REARRANGE needs to juggle: VMOVDQU inum 4916
	REARRANGE one pattern worked for VMOVDQU inum 4916
	REARRANGE needs to juggle: VMOVDQU inum 4917
	REARRANGE one pattern worked for VMOVDQU inum 4917
	REARRANGE needs to juggle: VMOVDQA inum 4904
	REARRANGE one pattern worked for VMOVDQA inum 4904
	REARRANGE needs to juggle: VMOVDQA inum 4905
	REARRANGE one pattern worked for VMOVDQA inum 4905
	REARRANGE needs to juggle: VMOVDQA inum 4908
	REARRANGE one pattern worked for VMOVDQA inum 4908
	REARRANGE needs to juggle: VMOVDQA inum 4909
	REARRANGE one pattern worked for VMOVDQA inum 4909
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBSD inum=4475  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4476  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=4477  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4478  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=4904  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4905  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4908  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4909  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBSD inum 4475 -- already fine
	SKIPPING VFNMSUBSD inum 4476 -- already fine
	SKIPPING VFNMSUBSD inum 4477 -- already fine
	SKIPPING VFNMSUBSD inum 4478 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 4904
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBSD inum 4475
	REARRANGE one pattern worked for VFNMSUBSD inum 4475
	REARRANGE needs to juggle: VFNMSUBSD inum 4476
	REARRANGE one pattern worked for VFNMSUBSD inum 4476
	REARRANGE needs to juggle: VFNMSUBSD inum 4477
	REARRANGE one pattern worked for VFNMSUBSD inum 4477
	REARRANGE needs to juggle: VFNMSUBSD inum 4478
	REARRANGE one pattern worked for VFNMSUBSD inum 4478
	REARRANGE needs to juggle: VMOVDQA inum 4904
	REARRANGE one pattern worked for VMOVDQA inum 4904
	REARRANGE needs to juggle: VMOVDQA inum 4905
	REARRANGE one pattern worked for VMOVDQA inum 4905
	REARRANGE needs to juggle: VMOVDQA inum 4908
	REARRANGE one pattern worked for VMOVDQA inum 4908
	REARRANGE needs to juggle: VMOVDQA inum 4909
	REARRANGE one pattern worked for VMOVDQA inum 4909
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPGATHERDQ inum=5570  iform_input=VPGATHERDQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5571  iform_input=VPGATHERDQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDD inum=5572  iform_input=VPGATHERDD_YMMu32_MEMd_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERDD inum=5573  iform_input=VPGATHERDD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVD inum=8838  iform_input=KMOVD_MASKmskw_MASKu32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8839  iform_input=KMOVD_MASKmskw_MEMu32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8845  iform_input=KMOVQ_MASKmskw_MASKu64_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8846  iform_input=KMOVQ_MASKmskw_MEMu64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8833  iform_input=KMOVB_MASKmskw_MASKu8_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8834  iform_input=KMOVB_MASKmskw_MEMu8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVW inum=6994  iform_input=KMOVW_MASKmskw_MASKu16_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVW inum=6995  iform_input=KMOVW_MASKmskw_MEMu16_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERDQ inum 5570 -- already fine
	SKIPPING VPGATHERDQ inum 5571 -- already fine
	SKIPPING VPGATHERDD inum 5572 -- already fine
	SKIPPING VPGATHERDD inum 5573 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8838
	REARRANGE one pattern worked for KMOVD inum 8838
	REARRANGE needs to juggle: KMOVD inum 8839
	REARRANGE one pattern worked for KMOVD inum 8839
	REARRANGE needs to juggle: KMOVQ inum 8845
	REARRANGE one pattern worked for KMOVQ inum 8845
	REARRANGE needs to juggle: KMOVQ inum 8846
	REARRANGE one pattern worked for KMOVQ inum 8846
	REARRANGE needs to juggle: KMOVB inum 8833
	REARRANGE one pattern worked for KMOVB inum 8833
	REARRANGE needs to juggle: KMOVB inum 8834
	REARRANGE one pattern worked for KMOVB inum 8834
	REARRANGE needs to juggle: KMOVW inum 6994
	REARRANGE one pattern worked for KMOVW inum 6994
	REARRANGE needs to juggle: KMOVW inum 6995
	REARRANGE one pattern worked for KMOVW inum 6995
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
KMOVD inum=8840  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERQQ inum=5574  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=5575  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVQ inum=8847  iform_input=KMOVQ_MEMu64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERQD inum=5576  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=5577  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVB inum=8835  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVW inum=6996  iform_input=KMOVW_MEMu16_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KMOVD inum 8840 -- already fine
	REARRANGE needs to juggle: VPGATHERQQ inum 5574
	REARRANGE one pattern worked for VPGATHERQQ inum 5574
	REARRANGE needs to juggle: VPGATHERQQ inum 5575
	REARRANGE one pattern worked for VPGATHERQQ inum 5575
	SKIPPING KMOVQ inum 8847 -- already fine
	REARRANGE needs to juggle: VPGATHERQD inum 5576
	REARRANGE one pattern worked for VPGATHERQD inum 5576
	REARRANGE needs to juggle: VPGATHERQD inum 5577
	REARRANGE one pattern worked for VPGATHERQD inum 5577
	SKIPPING KMOVB inum 8835 -- already fine
	SKIPPING KMOVW inum 6996 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KMOVD inum=8840  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERQQ inum=5574  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=5575  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERQD inum=5576  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=5577  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVB inum=8835  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KMOVD inum 8840 -- already fine
	REARRANGE needs to juggle: VPGATHERQQ inum 5574
	REARRANGE one pattern worked for VPGATHERQQ inum 5574
	REARRANGE needs to juggle: VPGATHERQQ inum 5575
	REARRANGE one pattern worked for VPGATHERQQ inum 5575
	REARRANGE needs to juggle: VPGATHERQD inum 5576
	REARRANGE one pattern worked for VPGATHERQD inum 5576
	REARRANGE needs to juggle: VPGATHERQD inum 5577
	REARRANGE one pattern worked for VPGATHERQD inum 5577
	SKIPPING KMOVB inum 8835 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VGATHERDPD inum=5562  iform_input=VGATHERDPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5563  iform_input=VGATHERDPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVD inum=8841  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8842  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8848  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8836  iform_input=KMOVB_MASKmskw_GPR32u32_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VGATHERDPS inum=5564  iform_input=VGATHERDPS_YMMf32_MEMf32_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERDPS inum=5565  iform_input=VGATHERDPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=6997  iform_input=KMOVW_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERDPD inum 5562 -- already fine
	SKIPPING VGATHERDPD inum 5563 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8841
	REARRANGE one pattern worked for KMOVD inum 8841
	REARRANGE needs to juggle: KMOVD inum 8842
	REARRANGE one pattern worked for KMOVD inum 8842
	REARRANGE needs to juggle: KMOVQ inum 8848
	REARRANGE one pattern worked for KMOVQ inum 8848
	REARRANGE needs to juggle: KMOVB inum 8836
	REARRANGE one pattern worked for KMOVB inum 8836
	SKIPPING VGATHERDPS inum 5564 -- already fine
	SKIPPING VGATHERDPS inum 5565 -- already fine
	REARRANGE needs to juggle: KMOVW inum 6997
	REARRANGE one pattern worked for KMOVW inum 6997
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8841  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8842  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8848  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8841 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8842
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8841
	REARRANGE one pattern worked for KMOVD inum 8841
	SKIPPING KMOVD inum 8842 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8848
	REARRANGE one pattern worked for KMOVQ inum 8848
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VGATHERQPD inum=5566  iform_input=VGATHERQPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPD inum=5567  iform_input=VGATHERQPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVD inum=8843  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8844  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8849  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8837  iform_input=KMOVB_GPR32u32_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VGATHERQPS inum=5568  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPS inum=5569  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=6998  iform_input=KMOVW_GPR32u32_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERQPD inum 5566 -- already fine
	SKIPPING VGATHERQPD inum 5567 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8843
	REARRANGE one pattern worked for KMOVD inum 8843
	REARRANGE needs to juggle: KMOVD inum 8844
	REARRANGE one pattern worked for KMOVD inum 8844
	REARRANGE needs to juggle: KMOVQ inum 8849
	REARRANGE one pattern worked for KMOVQ inum 8849
	REARRANGE needs to juggle: KMOVB inum 8837
	REARRANGE one pattern worked for KMOVB inum 8837
	SKIPPING VGATHERQPS inum 5568 -- already fine
	SKIPPING VGATHERQPS inum 5569 -- already fine
	REARRANGE needs to juggle: KMOVW inum 6998
	REARRANGE one pattern worked for KMOVW inum 6998
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8843  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8844  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8849  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8843 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8844
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8843
	REARRANGE one pattern worked for KMOVD inum 8843
	SKIPPING KMOVD inum 8844 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8849
	REARRANGE one pattern worked for KMOVQ inum 8849
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
KORTESTB inum=8856  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VFMADD132PD inum=5370  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5371  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=5372  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5373  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5374  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5375  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5376  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5377  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

KORTESTQ inum=8858  iform_input=KORTESTQ_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTW inum=7000  iform_input=KORTESTW_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTD inum=8857  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KORTESTB inum 8856 -- already fine
	REARRANGE needs to juggle: VFMADD132PD inum 5370
	REARRANGE one pattern worked for VFMADD132PD inum 5370
	REARRANGE needs to juggle: VFMADD132PD inum 5371
	REARRANGE one pattern worked for VFMADD132PD inum 5371
	REARRANGE needs to juggle: VFMADD132PD inum 5372
	REARRANGE one pattern worked for VFMADD132PD inum 5372
	REARRANGE needs to juggle: VFMADD132PD inum 5373
	REARRANGE one pattern worked for VFMADD132PD inum 5373
	REARRANGE needs to juggle: VFMADD132PS inum 5374
	REARRANGE one pattern worked for VFMADD132PS inum 5374
	REARRANGE needs to juggle: VFMADD132PS inum 5375
	REARRANGE one pattern worked for VFMADD132PS inum 5375
	REARRANGE needs to juggle: VFMADD132PS inum 5376
	REARRANGE one pattern worked for VFMADD132PS inum 5376
	REARRANGE needs to juggle: VFMADD132PS inum 5377
	REARRANGE one pattern worked for VFMADD132PS inum 5377
	SKIPPING KORTESTQ inum 8858 -- already fine
	SKIPPING KORTESTW inum 7000 -- already fine
	SKIPPING KORTESTD inum 8857 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KORTESTB inum=8856  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VFMADD132PD inum=5370  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5371  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=5372  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5373  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5374  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5375  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5376  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5377  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

KORTESTD inum=8857  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KORTESTB inum 8856 -- already fine
	REARRANGE needs to juggle: VFMADD132PD inum 5370
	REARRANGE one pattern worked for VFMADD132PD inum 5370
	REARRANGE needs to juggle: VFMADD132PD inum 5371
	REARRANGE one pattern worked for VFMADD132PD inum 5371
	REARRANGE needs to juggle: VFMADD132PD inum 5372
	REARRANGE one pattern worked for VFMADD132PD inum 5372
	REARRANGE needs to juggle: VFMADD132PD inum 5373
	REARRANGE one pattern worked for VFMADD132PD inum 5373
	REARRANGE needs to juggle: VFMADD132PS inum 5374
	REARRANGE one pattern worked for VFMADD132PS inum 5374
	REARRANGE needs to juggle: VFMADD132PS inum 5375
	REARRANGE one pattern worked for VFMADD132PS inum 5375
	REARRANGE needs to juggle: VFMADD132PS inum 5376
	REARRANGE one pattern worked for VFMADD132PS inum 5376
	REARRANGE needs to juggle: VFMADD132PS inum 5377
	REARRANGE one pattern worked for VFMADD132PS inum 5377
	SKIPPING KORTESTD inum 8857 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VAESENC inum=5350  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=5351  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=9101  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=9102  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPADDUSB inum=4984  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=4985  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=5620  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5621  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VAESENC inum 5350 -- already fine
	SKIPPING VAESENC inum 5351 -- already fine
	SKIPPING VAESENC inum 9101 -- already fine
	SKIPPING VAESENC inum 9102 -- already fine
	REARRANGE needs to juggle: VPADDUSB inum 4984
	REARRANGE one pattern worked for VPADDUSB inum 4984
	REARRANGE needs to juggle: VPADDUSB inum 4985
	REARRANGE one pattern worked for VPADDUSB inum 4985
	REARRANGE needs to juggle: VPADDUSB inum 5620
	REARRANGE one pattern worked for VPADDUSB inum 5620
	REARRANGE needs to juggle: VPADDUSB inum 5621
	REARRANGE one pattern worked for VPADDUSB inum 5621
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VAESENC inum=5350  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=5351  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=9101  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=9102  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPADDUSB inum=4984  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=4985  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=5620  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5621  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VAESENC inum 5350 -- already fine
	SKIPPING VAESENC inum 5351 -- already fine
	SKIPPING VAESENC inum 9101 -- already fine
	SKIPPING VAESENC inum 9102 -- already fine
	REARRANGE needs to juggle: VPADDUSB inum 4984
	REARRANGE one pattern worked for VPADDUSB inum 4984
	REARRANGE needs to juggle: VPADDUSB inum 4985
	REARRANGE one pattern worked for VPADDUSB inum 4985
	REARRANGE needs to juggle: VPADDUSB inum 5620
	REARRANGE one pattern worked for VPADDUSB inum 5620
	REARRANGE needs to juggle: VPADDUSB inum 5621
	REARRANGE one pattern worked for VPADDUSB inum 5621
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPADDUSW inum=4986  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=4987  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSW inum=5622  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5623  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENCLAST inum=5352  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENCLAST inum=5353  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENCLAST inum=9103  iform_input=VAESENCLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENCLAST inum=9104  iform_input=VAESENCLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSW inum 4986 -- already fine
	SKIPPING VPADDUSW inum 4987 -- already fine
	SKIPPING VPADDUSW inum 5622 -- already fine
	SKIPPING VPADDUSW inum 5623 -- already fine
	REARRANGE needs to juggle: VAESENCLAST inum 5352
	REARRANGE one pattern worked for VAESENCLAST inum 5352
	REARRANGE needs to juggle: VAESENCLAST inum 5353
	REARRANGE one pattern worked for VAESENCLAST inum 5353
	REARRANGE needs to juggle: VAESENCLAST inum 9103
	REARRANGE one pattern worked for VAESENCLAST inum 9103
	REARRANGE needs to juggle: VAESENCLAST inum 9104
	REARRANGE one pattern worked for VAESENCLAST inum 9104
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VAESDEC inum=5354  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=5355  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=9097  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=9098  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPMAXUB inum=5174  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5175  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=5666  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5667  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VAESDEC inum 5354 -- already fine
	SKIPPING VAESDEC inum 5355 -- already fine
	SKIPPING VAESDEC inum 9097 -- already fine
	SKIPPING VAESDEC inum 9098 -- already fine
	REARRANGE needs to juggle: VPMAXUB inum 5174
	REARRANGE one pattern worked for VPMAXUB inum 5174
	REARRANGE needs to juggle: VPMAXUB inum 5175
	REARRANGE one pattern worked for VPMAXUB inum 5175
	REARRANGE needs to juggle: VPMAXUB inum 5666
	REARRANGE one pattern worked for VPMAXUB inum 5666
	REARRANGE needs to juggle: VPMAXUB inum 5667
	REARRANGE one pattern worked for VPMAXUB inum 5667
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VAESDEC inum=5354  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=5355  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=9097  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=9098  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPMAXUB inum=5174  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5175  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=5666  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5667  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VAESDEC inum 5354 -- already fine
	SKIPPING VAESDEC inum 5355 -- already fine
	SKIPPING VAESDEC inum 9097 -- already fine
	SKIPPING VAESDEC inum 9098 -- already fine
	REARRANGE needs to juggle: VPMAXUB inum 5174
	REARRANGE one pattern worked for VPMAXUB inum 5174
	REARRANGE needs to juggle: VPMAXUB inum 5175
	REARRANGE one pattern worked for VPMAXUB inum 5175
	REARRANGE needs to juggle: VPMAXUB inum 5666
	REARRANGE one pattern worked for VPMAXUB inum 5666
	REARRANGE needs to juggle: VPMAXUB inum 5667
	REARRANGE one pattern worked for VPMAXUB inum 5667
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VAESKEYGENASSIST inum=5348  isa_set=AVXAES pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()   

VAESKEYGENASSIST inum=5349  isa_set=AVXAES pattern len=25
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8()

VPANDN inum=4930  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=4931  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPANDN inum=5750  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=5751  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESDECLAST inum=5356  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDECLAST inum=5357  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDECLAST inum=9099  iform_input=VAESDECLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDECLAST inum=9100  iform_input=VAESDECLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VAESKEYGENASSIST inum 5348 -- already fine
	SKIPPING VAESKEYGENASSIST inum 5349 -- already fine
	SKIPPING VPANDN inum 4930 -- already fine
	SKIPPING VPANDN inum 4931 -- already fine
	SKIPPING VPANDN inum 5750 -- already fine
	SKIPPING VPANDN inum 5751 -- already fine
	REARRANGE needs to juggle: VAESDECLAST inum 5356
	REARRANGE one pattern worked for VAESDECLAST inum 5356
	REARRANGE needs to juggle: VAESDECLAST inum 5357
	REARRANGE one pattern worked for VAESDECLAST inum 5357
	REARRANGE needs to juggle: VAESDECLAST inum 9099
	REARRANGE one pattern worked for VAESDECLAST inum 9099
	REARRANGE needs to juggle: VAESDECLAST inum 9100
	REARRANGE one pattern worked for VAESDECLAST inum 9100
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
RORX inum=5936  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5937  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5938  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5939  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5940  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5941  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VLDDQU inum=4820  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VLDDQU inum=4821  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING RORX inum 5936 -- already fine
	SKIPPING RORX inum 5937 -- already fine
	SKIPPING RORX inum 5938 -- already fine
	SKIPPING RORX inum 5939 -- already fine
	SKIPPING RORX inum 5940 -- already fine
	SKIPPING RORX inum 5941 -- already fine
	REARRANGE needs to juggle: VLDDQU inum 4820
	REARRANGE one pattern worked for VLDDQU inum 4820
	REARRANGE needs to juggle: VLDDQU inum 4821
	REARRANGE one pattern worked for VLDDQU inum 4821
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
RORX inum=5936  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5937  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5938  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5939  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5940  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5941  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VLDDQU inum=4820  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VLDDQU inum=4821  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING RORX inum 5936 -- already fine
	SKIPPING RORX inum 5937 -- already fine
	SKIPPING RORX inum 5938 -- already fine
	SKIPPING RORX inum 5939 -- already fine
	SKIPPING RORX inum 5940 -- already fine
	SKIPPING RORX inum 5941 -- already fine
	REARRANGE needs to juggle: VLDDQU inum 4820
	REARRANGE one pattern worked for VLDDQU inum 4820
	REARRANGE needs to juggle: VLDDQU inum 4821
	REARRANGE one pattern worked for VLDDQU inum 4821
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
RORX inum=5936  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5937  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5938  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5939  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5940  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5941  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING RORX inum 5936 -- already fine
	REARRANGE needs to juggle: RORX inum 5937
	REARRANGE one pattern worked for RORX inum 5937
	SKIPPING RORX inum 5938 -- already fine
	REARRANGE needs to juggle: RORX inum 5939
	REARRANGE one pattern worked for RORX inum 5939
	REARRANGE needs to juggle: RORX inum 5940
	REARRANGE one pattern worked for RORX inum 5940
	REARRANGE needs to juggle: RORX inum 5941
	REARRANGE one pattern worked for RORX inum 5941
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPSLLD inum=4958  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=4959  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLD inum=5594  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5595  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5876  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5877  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5878  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

ANDN inum=5879  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

ANDN inum=5880  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5881  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLD inum 4958 -- already fine
	SKIPPING VPSLLD inum 4959 -- already fine
	SKIPPING VPSLLD inum 5594 -- already fine
	SKIPPING VPSLLD inum 5595 -- already fine
	REARRANGE needs to juggle: ANDN inum 5876
	REARRANGE one pattern worked for ANDN inum 5876
	REARRANGE needs to juggle: ANDN inum 5877
	REARRANGE one pattern worked for ANDN inum 5877
	REARRANGE needs to juggle: ANDN inum 5878
	REARRANGE one pattern worked for ANDN inum 5878
	REARRANGE needs to juggle: ANDN inum 5879
	REARRANGE one pattern worked for ANDN inum 5879
	REARRANGE needs to juggle: ANDN inum 5880
	REARRANGE one pattern worked for ANDN inum 5880
	REARRANGE needs to juggle: ANDN inum 5881
	REARRANGE one pattern worked for ANDN inum 5881
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLD inum=4958  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=4959  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5876  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5877  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5878  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5879  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5880  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5881  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLD inum 4958 -- already fine
	SKIPPING VPSLLD inum 4959 -- already fine
	REARRANGE needs to juggle: ANDN inum 5876
	REARRANGE one pattern worked for ANDN inum 5876
	REARRANGE needs to juggle: ANDN inum 5877
	REARRANGE one pattern worked for ANDN inum 5877
	REARRANGE needs to juggle: ANDN inum 5878
	REARRANGE one pattern worked for ANDN inum 5878
	REARRANGE needs to juggle: ANDN inum 5879
	REARRANGE one pattern worked for ANDN inum 5879
	REARRANGE needs to juggle: ANDN inum 5880
	REARRANGE one pattern worked for ANDN inum 5880
	REARRANGE needs to juggle: ANDN inum 5881
	REARRANGE one pattern worked for ANDN inum 5881
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
ANDN inum=5876  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5877  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5878  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5879  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5880  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5881  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING ANDN inum 5876 -- already fine
	REARRANGE needs to juggle: ANDN inum 5877
	REARRANGE one pattern worked for ANDN inum 5877
	SKIPPING ANDN inum 5878 -- already fine
	REARRANGE needs to juggle: ANDN inum 5879
	REARRANGE one pattern worked for ANDN inum 5879
	REARRANGE needs to juggle: ANDN inum 5880
	REARRANGE one pattern worked for ANDN inum 5880
	REARRANGE needs to juggle: ANDN inum 5881
	REARRANGE one pattern worked for ANDN inum 5881
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLQ inum=4960  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=4961  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLQ inum=5596  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5597  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=5882  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5883  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5884  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5885  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 0 1    n n n

BLSR inum=5886  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5887  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5888  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5889  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5890  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5891  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5892  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5893  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5894  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5895  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5896  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5897  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 1    n n n

BLSI inum=5898  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5899  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLQ inum 4960 -- already fine
	SKIPPING VPSLLQ inum 4961 -- already fine
	SKIPPING VPSLLQ inum 5596 -- already fine
	SKIPPING VPSLLQ inum 5597 -- already fine
	REARRANGE needs to juggle: BLSR inum 5882
	REARRANGE one pattern worked for BLSR inum 5882
	REARRANGE needs to juggle: BLSR inum 5883
	REARRANGE one pattern worked for BLSR inum 5883
	REARRANGE needs to juggle: BLSR inum 5884
	REARRANGE one pattern worked for BLSR inum 5884
	REARRANGE needs to juggle: BLSR inum 5885
	REARRANGE one pattern worked for BLSR inum 5885
	REARRANGE needs to juggle: BLSR inum 5886
	REARRANGE one pattern worked for BLSR inum 5886
	REARRANGE needs to juggle: BLSR inum 5887
	REARRANGE one pattern worked for BLSR inum 5887
	REARRANGE needs to juggle: BLSMSK inum 5888
	REARRANGE one pattern worked for BLSMSK inum 5888
	REARRANGE needs to juggle: BLSMSK inum 5889
	REARRANGE one pattern worked for BLSMSK inum 5889
	REARRANGE needs to juggle: BLSMSK inum 5890
	REARRANGE one pattern worked for BLSMSK inum 5890
	REARRANGE needs to juggle: BLSMSK inum 5891
	REARRANGE one pattern worked for BLSMSK inum 5891
	REARRANGE needs to juggle: BLSMSK inum 5892
	REARRANGE one pattern worked for BLSMSK inum 5892
	REARRANGE needs to juggle: BLSMSK inum 5893
	REARRANGE one pattern worked for BLSMSK inum 5893
	REARRANGE needs to juggle: BLSI inum 5894
	REARRANGE one pattern worked for BLSI inum 5894
	REARRANGE needs to juggle: BLSI inum 5895
	REARRANGE one pattern worked for BLSI inum 5895
	REARRANGE needs to juggle: BLSI inum 5896
	REARRANGE one pattern worked for BLSI inum 5896
	REARRANGE needs to juggle: BLSI inum 5897
	REARRANGE one pattern worked for BLSI inum 5897
	REARRANGE needs to juggle: BLSI inum 5898
	REARRANGE one pattern worked for BLSI inum 5898
	REARRANGE needs to juggle: BLSI inum 5899
	REARRANGE one pattern worked for BLSI inum 5899
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLQ inum=4960  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=4961  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=5882  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5883  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5884  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5885  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=5886  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5887  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5888  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5889  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5890  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5891  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5892  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5893  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5894  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5895  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5896  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5897  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=5898  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5899  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLQ inum 4960 -- already fine
	SKIPPING VPSLLQ inum 4961 -- already fine
	REARRANGE needs to juggle: BLSR inum 5882
	REARRANGE one pattern worked for BLSR inum 5882
	REARRANGE needs to juggle: BLSR inum 5883
	REARRANGE one pattern worked for BLSR inum 5883
	REARRANGE needs to juggle: BLSR inum 5884
	REARRANGE one pattern worked for BLSR inum 5884
	REARRANGE needs to juggle: BLSR inum 5885
	REARRANGE one pattern worked for BLSR inum 5885
	REARRANGE needs to juggle: BLSR inum 5886
	REARRANGE one pattern worked for BLSR inum 5886
	REARRANGE needs to juggle: BLSR inum 5887
	REARRANGE one pattern worked for BLSR inum 5887
	REARRANGE needs to juggle: BLSMSK inum 5888
	REARRANGE one pattern worked for BLSMSK inum 5888
	REARRANGE needs to juggle: BLSMSK inum 5889
	REARRANGE one pattern worked for BLSMSK inum 5889
	REARRANGE needs to juggle: BLSMSK inum 5890
	REARRANGE one pattern worked for BLSMSK inum 5890
	REARRANGE needs to juggle: BLSMSK inum 5891
	REARRANGE one pattern worked for BLSMSK inum 5891
	REARRANGE needs to juggle: BLSMSK inum 5892
	REARRANGE one pattern worked for BLSMSK inum 5892
	REARRANGE needs to juggle: BLSMSK inum 5893
	REARRANGE one pattern worked for BLSMSK inum 5893
	REARRANGE needs to juggle: BLSI inum 5894
	REARRANGE one pattern worked for BLSI inum 5894
	REARRANGE needs to juggle: BLSI inum 5895
	REARRANGE one pattern worked for BLSI inum 5895
	REARRANGE needs to juggle: BLSI inum 5896
	REARRANGE one pattern worked for BLSI inum 5896
	REARRANGE needs to juggle: BLSI inum 5897
	REARRANGE one pattern worked for BLSI inum 5897
	REARRANGE needs to juggle: BLSI inum 5898
	REARRANGE one pattern worked for BLSI inum 5898
	REARRANGE needs to juggle: BLSI inum 5899
	REARRANGE one pattern worked for BLSI inum 5899
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
BLSR inum=5882  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5883  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5884  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5885  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=5886  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5887  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5888  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5889  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5890  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5891  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5892  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5893  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5894  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5895  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5896  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5897  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=5898  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5899  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BLSR inum 5882 -- already fine
	REARRANGE needs to juggle: BLSR inum 5883
	REARRANGE one pattern worked for BLSR inum 5883
	SKIPPING BLSR inum 5884 -- already fine
	REARRANGE needs to juggle: BLSR inum 5885
	REARRANGE one pattern worked for BLSR inum 5885
	REARRANGE needs to juggle: BLSR inum 5886
	REARRANGE one pattern worked for BLSR inum 5886
	REARRANGE needs to juggle: BLSR inum 5887
	REARRANGE one pattern worked for BLSR inum 5887
	SKIPPING BLSMSK inum 5888 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5889
	REARRANGE one pattern worked for BLSMSK inum 5889
	SKIPPING BLSMSK inum 5890 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5891
	REARRANGE one pattern worked for BLSMSK inum 5891
	REARRANGE needs to juggle: BLSMSK inum 5892
	REARRANGE one pattern worked for BLSMSK inum 5892
	REARRANGE needs to juggle: BLSMSK inum 5893
	REARRANGE one pattern worked for BLSMSK inum 5893
	SKIPPING BLSI inum 5894 -- already fine
	REARRANGE needs to juggle: BLSI inum 5895
	REARRANGE one pattern worked for BLSI inum 5895
	SKIPPING BLSI inum 5896 -- already fine
	REARRANGE needs to juggle: BLSI inum 5897
	REARRANGE one pattern worked for BLSI inum 5897
	REARRANGE needs to juggle: BLSI inum 5898
	REARRANGE one pattern worked for BLSI inum 5898
	REARRANGE needs to juggle: BLSI inum 5899
	REARRANGE one pattern worked for BLSI inum 5899
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
BZHI inum=5900  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5901  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5902  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=5903  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=5904  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5905  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

VPMADDWD inum=5192  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5193  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMADDWD inum=5656  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5657  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PEXT inum=5870  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5871  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5872  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=5873  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=5874  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5875  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=5864  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5865  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5866  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=5867  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=5868  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5869  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING BZHI inum 5900 -- already fine
	SKIPPING BZHI inum 5901 -- already fine
	SKIPPING BZHI inum 5902 -- already fine
	SKIPPING BZHI inum 5903 -- already fine
	SKIPPING BZHI inum 5904 -- already fine
	SKIPPING BZHI inum 5905 -- already fine
	REARRANGE needs to juggle: VPMADDWD inum 5192
	REARRANGE one pattern worked for VPMADDWD inum 5192
	REARRANGE needs to juggle: VPMADDWD inum 5193
	REARRANGE one pattern worked for VPMADDWD inum 5193
	REARRANGE needs to juggle: VPMADDWD inum 5656
	REARRANGE one pattern worked for VPMADDWD inum 5656
	REARRANGE needs to juggle: VPMADDWD inum 5657
	REARRANGE one pattern worked for VPMADDWD inum 5657
	SKIPPING PEXT inum 5870 -- already fine
	SKIPPING PEXT inum 5871 -- already fine
	SKIPPING PEXT inum 5872 -- already fine
	SKIPPING PEXT inum 5873 -- already fine
	SKIPPING PEXT inum 5874 -- already fine
	SKIPPING PEXT inum 5875 -- already fine
	SKIPPING PDEP inum 5864 -- already fine
	SKIPPING PDEP inum 5865 -- already fine
	SKIPPING PDEP inum 5866 -- already fine
	SKIPPING PDEP inum 5867 -- already fine
	SKIPPING PDEP inum 5868 -- already fine
	SKIPPING PDEP inum 5869 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
BZHI inum=5900  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5901  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5902  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=5903  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=5904  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5905  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BZHI inum 5900 -- already fine
	REARRANGE needs to juggle: BZHI inum 5901
	REARRANGE one pattern worked for BZHI inum 5901
	SKIPPING BZHI inum 5902 -- already fine
	REARRANGE needs to juggle: BZHI inum 5903
	REARRANGE one pattern worked for BZHI inum 5903
	REARRANGE needs to juggle: BZHI inum 5904
	REARRANGE one pattern worked for BZHI inum 5904
	REARRANGE needs to juggle: BZHI inum 5905
	REARRANGE one pattern worked for BZHI inum 5905
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
PDEP inum=5864  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5865  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5866  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=5867  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=5868  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5869  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PDEP inum 5864 -- already fine
	REARRANGE needs to juggle: PDEP inum 5865
	REARRANGE one pattern worked for PDEP inum 5865
	SKIPPING PDEP inum 5866 -- already fine
	REARRANGE needs to juggle: PDEP inum 5867
	REARRANGE one pattern worked for PDEP inum 5867
	REARRANGE needs to juggle: PDEP inum 5868
	REARRANGE one pattern worked for PDEP inum 5868
	REARRANGE needs to juggle: PDEP inum 5869
	REARRANGE one pattern worked for PDEP inum 5869
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
PEXT inum=5870  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5871  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5872  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=5873  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=5874  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5875  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PEXT inum 5870 -- already fine
	REARRANGE needs to juggle: PEXT inum 5871
	REARRANGE one pattern worked for PEXT inum 5871
	SKIPPING PEXT inum 5872 -- already fine
	REARRANGE needs to juggle: PEXT inum 5873
	REARRANGE one pattern worked for PEXT inum 5873
	REARRANGE needs to juggle: PEXT inum 5874
	REARRANGE one pattern worked for PEXT inum 5874
	REARRANGE needs to juggle: PEXT inum 5875
	REARRANGE one pattern worked for PEXT inum 5875
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
MULX inum=5930  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=5931  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=5932  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5933  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5934  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5935  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

VPSADBW inum=5034  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5035  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSADBW inum=5698  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5699  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING MULX inum 5930 -- already fine
	SKIPPING MULX inum 5931 -- already fine
	SKIPPING MULX inum 5932 -- already fine
	SKIPPING MULX inum 5933 -- already fine
	SKIPPING MULX inum 5934 -- already fine
	SKIPPING MULX inum 5935 -- already fine
	REARRANGE needs to juggle: VPSADBW inum 5034
	REARRANGE one pattern worked for VPSADBW inum 5034
	REARRANGE needs to juggle: VPSADBW inum 5035
	REARRANGE one pattern worked for VPSADBW inum 5035
	REARRANGE needs to juggle: VPSADBW inum 5698
	REARRANGE one pattern worked for VPSADBW inum 5698
	REARRANGE needs to juggle: VPSADBW inum 5699
	REARRANGE one pattern worked for VPSADBW inum 5699
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
MULX inum=5930  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=5931  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=5932  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5933  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5934  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5935  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING MULX inum 5930 -- already fine
	REARRANGE needs to juggle: MULX inum 5931
	REARRANGE one pattern worked for MULX inum 5931
	SKIPPING MULX inum 5932 -- already fine
	REARRANGE needs to juggle: MULX inum 5933
	REARRANGE one pattern worked for MULX inum 5933
	REARRANGE needs to juggle: MULX inum 5934
	REARRANGE one pattern worked for MULX inum 5934
	REARRANGE needs to juggle: MULX inum 5935
	REARRANGE one pattern worked for MULX inum 5935
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
BEXTR inum=5906  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BEXTR inum=5907  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5908  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BEXTR inum=5909  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BEXTR inum=5910  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5911  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BEXTR inum 5906 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5907
	REARRANGE one pattern worked for BEXTR inum 5907
	SKIPPING BEXTR inum 5908 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5909
	REARRANGE one pattern worked for BEXTR inum 5909
	REARRANGE needs to juggle: BEXTR inum 5910
	REARRANGE one pattern worked for BEXTR inum 5910
	REARRANGE needs to juggle: BEXTR inum 5911
	REARRANGE one pattern worked for BEXTR inum 5911
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHLX inum=5912  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHLX inum=5913  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5914  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHLX inum=5915  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHLX inum=5916  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5917  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHLX inum 5912 -- already fine
	REARRANGE needs to juggle: SHLX inum 5913
	REARRANGE one pattern worked for SHLX inum 5913
	SKIPPING SHLX inum 5914 -- already fine
	REARRANGE needs to juggle: SHLX inum 5915
	REARRANGE one pattern worked for SHLX inum 5915
	REARRANGE needs to juggle: SHLX inum 5916
	REARRANGE one pattern worked for SHLX inum 5916
	REARRANGE needs to juggle: SHLX inum 5917
	REARRANGE one pattern worked for SHLX inum 5917
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHRX inum=5924  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHRX inum=5925  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5926  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHRX inum=5927  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHRX inum=5928  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5929  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHRX inum 5924 -- already fine
	REARRANGE needs to juggle: SHRX inum 5925
	REARRANGE one pattern worked for SHRX inum 5925
	SKIPPING SHRX inum 5926 -- already fine
	REARRANGE needs to juggle: SHRX inum 5927
	REARRANGE one pattern worked for SHRX inum 5927
	REARRANGE needs to juggle: SHRX inum 5928
	REARRANGE one pattern worked for SHRX inum 5928
	REARRANGE needs to juggle: SHRX inum 5929
	REARRANGE one pattern worked for SHRX inum 5929
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SARX inum=5918  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SARX inum=5919  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5920  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SARX inum=5921  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SARX inum=5922  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5923  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SARX inum 5918 -- already fine
	REARRANGE needs to juggle: SARX inum 5919
	REARRANGE one pattern worked for SARX inum 5919
	SKIPPING SARX inum 5920 -- already fine
	REARRANGE needs to juggle: SARX inum 5921
	REARRANGE one pattern worked for SARX inum 5921
	REARRANGE needs to juggle: SARX inum 5922
	REARRANGE one pattern worked for SARX inum 5922
	REARRANGE needs to juggle: SARX inum 5923
	REARRANGE one pattern worked for SARX inum 5923
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 22
Others: 
VPEXTRD inum=8005  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    UIMM8()

VPEXTRD inum=8006  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

VPEXTRQ inum=8009  iform_input=VPEXTRQ_GPR64u64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 8005 -- already fine
	SKIPPING VPEXTRD inum 8006 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 8009
	REARRANGE one pattern worked for VPEXTRQ inum 8009
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPEXTRD inum=8007  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=32
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8() ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VPEXTRD inum=8008  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_WRITER_STORE()

VPEXTRQ inum=8010  iform_input=VPEXTRQ_MEMu64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_64_BITS()    NELEM_GPR_WRITER_STORE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 8007 -- already fine
	SKIPPING VPEXTRD inum 8008 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 8010
	REARRANGE one pattern worked for VPEXTRQ inum 8010
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPINSRQ inum=8029  iform_input=VPINSRQ_XMMu64_XMMu64_GPR64u64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    ZEROING=0 MASK=0 UIMM8()

VPINSRD inum=8025  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 ZEROING=0    MASK=0 UIMM8()

VPINSRD inum=8026  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    ZEROING=0 MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VPINSRQ inum 8029 -- already fine
	REARRANGE needs to juggle: VPINSRD inum 8025
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VPINSRQ inum 8029
	REARRANGE one pattern worked for VPINSRQ inum 8029
	SKIPPING VPINSRD inum 8025 -- already fine
	SKIPPING VPINSRD inum 8026 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPINSRQ inum=8030  iform_input=VPINSRQ_XMMu64_XMMu64_MEMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 ZEROING=0 MASK=0 UIMM8()    ESIZE_64_BITS() NELEM_GPR_READER()

VPINSRD inum=8027  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_READER()

VPINSRD inum=8028  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 ZEROING=0 MASK=0 UIMM8()    ESIZE_32_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VPINSRQ inum 8030 -- already fine
	REARRANGE needs to juggle: VPINSRD inum 8027
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VPINSRQ inum 8030
	REARRANGE one pattern worked for VPINSRQ inum 8030
	SKIPPING VPINSRD inum 8027 -- already fine
	SKIPPING VPINSRD inum 8028 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VMOVD inum=6565  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6566  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVQ inum=6605  iform_input=VMOVQ_XMMu64_GPR64u64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6565 -- already fine
	SKIPPING VMOVD inum 6566 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6605
	REARRANGE one pattern worked for VMOVQ inum 6605
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=6567  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()

VMOVD inum=6568  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

VMOVQ inum=6606  iform_input=VMOVQ_XMMu64_MEMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_READER()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6567 -- already fine
	SKIPPING VMOVD inum 6568 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6606
	REARRANGE one pattern worked for VMOVQ inum 6606
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7796  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7797  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7808  iform_input=VPBROADCASTQ_XMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7796 -- already fine
	SKIPPING VPBROADCASTD inum 7797 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7808
	REARRANGE one pattern worked for VPBROADCASTQ inum 7808
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7800  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7801  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7811  iform_input=VPBROADCASTQ_YMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7800 -- already fine
	SKIPPING VPBROADCASTD inum 7801 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7811
	REARRANGE one pattern worked for VPBROADCASTQ inum 7811
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VMOVD inum=6569  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6570  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVQ inum=6607  iform_input=VMOVQ_GPR64u64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6569 -- already fine
	SKIPPING VMOVD inum 6570 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6607
	REARRANGE one pattern worked for VMOVQ inum 6607
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=6571  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()

VMOVD inum=6572  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VMOVQ inum=6608  iform_input=VMOVQ_MEMu64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_WRITER_STORE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6571 -- already fine
	SKIPPING VMOVD inum 6572 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6608
	REARRANGE one pattern worked for VMOVQ inum 6608
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
[NUMBER OF CONVERT PATTERNS] 5
FE:EMIT_FILE obj/xed-operand-convert-init.c
emit_iclass_enum_info
FE:EMIT_FILE obj/xed-iclass-enum.txt
FE:EMIT_FILE obj/xed-iclass-enum.c
FE:EMIT_FILE obj/xed-iclass-enum.h
NOREP KEYS: [0, 103, 104, 106, 108, 279, 280, 283, 385, 386, 387, 388, 441, 442, 446, 448, 483, 484, 485, 746, 747, 748, 749, 800, 801, 802, 803, 1600]
REP KEYS: [681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723]
key - 681
h(x) = linear(x - 681)
FOUND PERFECT HASH FUNCTION FOR repinst
((27*key % 227) % 56)
x = Sigma(Ti << bit_shift)
FKS(x) = (27x mod 227) mod 56
FOUND PERFECT HASH FUNCTION FOR norepinst
FE:EMIT_FILE obj/xed-rep-map.c
FE:EMIT_FILE obj/xed-iform-enum.txt
FE:EMIT_FILE obj/xed-iform-enum.c
FE:EMIT_FILE obj/xed-iform-enum.h
FE:EMIT_FILE obj/xed-iformfl-enum.txt
FE:EMIT_FILE obj/xed-iformfl-enum.c
FE:EMIT_FILE obj/xed-iformfl-enum.h
FE:EMIT_FILE obj/xed-iform-max.c
FE:EMIT_FILE obj/xed-iclass-string.c
[DUPLICATE IFORM] POPA
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] BSF_GPRv_MEMv
[DUPLICATE IFORM] BSF_GPRv_GPRv
[DUPLICATE IFORM] CMPXCHG8B_MEMq
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] JNS_RELBRb
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] JNLE_RELBRb
[DUPLICATE IFORM] JNBE_RELBRb
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] POPFQ
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] CMPXCHG8B_LOCK_MEMq
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] JZ_RELBRb
[DUPLICATE IFORM] JNO_RELBRb
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] MOVNTI_MEMd_GPR32
[DUPLICATE IFORM] PUSHFQ
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] POPFD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] JBE_RELBRb
[DUPLICATE IFORM] JL_RELBRb
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] BNDMOV_BND_MEMq
[DUPLICATE IFORM] BNDMOV_BND_BND
[DUPLICATE IFORM] BNDMOV_MEMq_BND
[DUPLICATE IFORM] REP_OUTSB
[DUPLICATE IFORM] JP_RELBRb
[DUPLICATE IFORM] PUSHAD
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] REP_STOSQ
[DUPLICATE IFORM] REP_LODSB
[DUPLICATE IFORM] JNL_RELBRb
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] BOUND_GPRv_MEMa16
[DUPLICATE IFORM] BOUND_GPRv_MEMa32
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] NOP_90
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1A
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] XCHG_MEMb_GPR8
[DUPLICATE IFORM] XCHG_MEMv_GPRv
[DUPLICATE IFORM] XCHG_GPRv_OrAX
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] JNP_RELBRb
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] JLE_RELBRb
[DUPLICATE IFORM] WBINVD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] BSR_GPRv_MEMv
[DUPLICATE IFORM] BSR_GPRv_GPRv
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] JNZ_RELBRb
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] MOVD_XMMdq_MEMd
[DUPLICATE IFORM] MOVD_XMMdq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_XMMd
[DUPLICATE IFORM] MOVD_GPR32_XMMd
[DUPLICATE IFORM] MOVD_MMXq_MEMd
[DUPLICATE IFORM] MOVD_MMXq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_MMXd
[DUPLICATE IFORM] MOVD_GPR32_MMXd
[DUPLICATE IFORM] JMP_RELBRb
[DUPLICATE IFORM] JECXZ_RELBRb
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] PUSHA
[DUPLICATE IFORM] SYSEXIT
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] REP_STOSB
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] PCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] REP_LODSQ
[DUPLICATE IFORM] REP_INSB
[DUPLICATE IFORM] JB_RELBRb
[DUPLICATE IFORM] REP_MOVSQ
[DUPLICATE IFORM] REP_MONTMUL
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] PCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] REP_MOVSB
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] MOVDIR64B_GPRa_MEM
[DUPLICATE IFORM] POPAD
[DUPLICATE IFORM] SYSENTER
[DUPLICATE IFORM] PCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] JS_RELBRb
[DUPLICATE IFORM] JO_RELBRb
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] PUSHFD
[DUPLICATE IFORM] JNB_RELBRb
[DUPLICATE IFORM] VPSHAQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPCMOV_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPCMOV_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPSHLD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPPERM_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VFNMADDSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_MEMd_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_GPR32d_IMMb
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] BZHI_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BZHI_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFNMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VFMADDSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPEXTRD_MEMd_XMMdq_IMMb
[DUPLICATE IFORM] VPEXTRD_GPR32d_XMMdq_IMMb
[DUPLICATE IFORM] VFNMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] SHRX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFNMSUBSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] KMOVD_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] KMOVD_GPR32u32_MASKmskw_AVX512
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VFMSUBSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] RORX_VGPR32d_VGPR32d_IMMb
[DUPLICATE IFORM] RORX_VGPR32d_MEMd_IMMb
[DUPLICATE IFORM] BEXTR_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BEXTR_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VFNMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VPERMIL2PS_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PS_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] VFNMSUBSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMSUBSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] BLSR_VGPR32d_MEMd
[DUPLICATE IFORM] BLSR_VGPR32d_VGPR32d
[DUPLICATE IFORM] VPERMIL2PD_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSMSK_VGPR32d_MEMd
[DUPLICATE IFORM] BLSMSK_VGPR32d_VGPR32d
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VMOVD_XMMdq_MEMd
[DUPLICATE IFORM] VMOVD_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_MEMd_XMMd
[DUPLICATE IFORM] VMOVD_GPR32d_XMMd
[DUPLICATE IFORM] SARX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFNMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] BLSI_VGPR32d_MEMd
[DUPLICATE IFORM] BLSI_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFNMADDSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFMSUBADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VADDSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VUCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCMPPD_MASKmskw_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VEXP2PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VFMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VDIVPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSS2SD_XMMf64_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMOVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VEXP2PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VGETMANTSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VPEXTRW_GPR32u16_XMMu16_IMM8_AVX512_C5
[DUPLICATE IFORM] VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2PH_YMMf16_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMOVDQU64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VRNDSCALEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR64i64_AVX512
[DUPLICATE IFORM] VUCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMINSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VRANGESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVDQU8_XMMu8_MASKmskw_XMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_YMMu8_MASKmskw_YMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_ZMMu8_MASKmskw_ZMMu8_AVX512
[DUPLICATE IFORM] VGETEXPSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVDQU16_XMMu16_MASKmskw_XMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_YMMu16_MASKmskw_YMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_ZMMu16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VCVTSD2SS_XMMf32_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VRCP28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRD_MEMu32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VRCP28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMINPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTUQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2PS_YMMf32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VRANGEPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VREDUCESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMOVDQA32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VRCP28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VMOVAPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VGETMANTPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VMOVUPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VRNDSCALEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_ZMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VMAXSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VREDUCEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VSQRTPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VRSQRT28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMINPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VDIVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCMPSD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VGETEXPPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VDIVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMAXSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512
[DUPLICATE IFORM] VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VRCP28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VCVTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VRSQRT28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VFMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSUBSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VRANGESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCVTDQ2PS_ZMMf32_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VSCALEFSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR64u64_AVX512
[DUPLICATE IFORM] VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMULSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VDIVPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMAXPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSUBPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCMPSS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVDQA64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMULPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR64i64_AVX512
[DUPLICATE IFORM] VGETEXPSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETMANTSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VFNMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VRNDSCALESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_GPR32u32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_MEMu32_AVX512
[DUPLICATE IFORM] VMOVD_GPR32u32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVD_MEMu32_XMMu32_AVX512
[DUPLICATE IFORM] VGETEXPPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_MEMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_MEMu64_XMMu64_AVX512
[DUPLICATE IFORM] VRSQRT28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VMAXPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCMPPS_MASKmskw_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PD_ZMMf64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VSQRTPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VREDUCESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCVTTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VADDSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMOVUPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VCVTUQQ2PD_ZMMf64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VADDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTUDQ2PS_ZMMf32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VSQRTSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSQRTSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSUBSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VGETMANTPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFNMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMINSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR64u64_AVX512
[DUPLICATE IFORM] VRSQRT28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMULSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PD_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VREDUCEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VRANGEPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMOVDQU32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VFNMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VSUBPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMULPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPH2PS_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VADDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
FE:EMIT_FILE obj/xed-iform-map-init.c
FE:EMIT_FILE obj/xed-exception-enum.txt
FE:EMIT_FILE obj/xed-exception-enum.c
FE:EMIT_FILE obj/xed-exception-enum.h
[Unique Operand Sequences] 2578
[Number of required operand sequence pointers] 8147
[Number of reused operand sequence pointers] 6536
[Number of required operands] 1401
[MAX OPERAND COUNT 11] 
[INVALID WIDTH CODE]  REP    imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REP    imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  LOCK   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x4] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  IMM0SIGNED imm_const [0x1] r EXPLICIT INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x10] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x20] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x40] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x8] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x0] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar8 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar9 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArDX INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar10 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar11 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT rIPa INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar14 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar15 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar13 INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_ESI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EDI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EBP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BX] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_SI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_DI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_INVALID] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArSP INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar12 INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_BP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_SI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_DI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn rcw SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn rw SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG2   nt_lookup_fn r SUPPRESSED OrBX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT SEG_MOV INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_ESP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_EBP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_ESI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_EDI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_R INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_SP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_BP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_SI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_DI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_ESP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_RSP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_IP] rw SUPPRESSED INVALID
[INVALID WIDTH CODE]  BASE1  nt_lookup_fn r SUPPRESSED A_GPR_R INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_EBP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_ESI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_EDI] w SUPPRESSED INVALID
FE:EMIT_FILE obj/xed-init-operand-data.c
FE:EMIT_FILE obj/xed-init-operand-sequences.c
FE:EMIT_FILE obj/xed-init-inst-table-data.c
FE:EMIT_FILE obj/xed-init-inst-table-0.c
FE:EMIT_FILE obj/xed-init-inst-table.c
emit_enum_info
OPERAND-NAMES WBNOINVD UIMM1 REXR REG3 OSZ NELEM REXRR REG1 USING_DEFAULT_SEGMENT1 CLDEMOTE ESRC VEX_PREFIX VEX_C4 TZCNT OUT_OF_BYTES EASZ HINT CHIP ILD_F2 HAS_SIB SIB BCRC HAS_MODRM UIMM0 ROUNDC MODE VEXVALID USING_DEFAULT_SEGMENT0 DF32 NO_SCALE_DISP8 FIRST_F2F3 SEG0 IMM0 MODRM_BYTE DF64 IMM1 MODEP55C REG8 VEXDEST3 SAE NSEG_PREFIXES DISP VEXDEST4 OUTREG BASE0 MOD NOMINAL_OPCODE NPREFIXES SEG_OVD VL EOSZ SMODE SIBINDEX ELEMENT_SIZE POS_MODRM MEM0 PREFIX66 REG IMM_WIDTH REG2 NEEDREX ERROR BASE1 REXW REP ZEROING ICLASS MEM_WIDTH MAP LLRC POS_DISP DEFAULT_SEG INDEX ASZ REG4 MODEP5 DISP_WIDTH PTR BRDISP_WIDTH POS_NOMINAL_OPCODE LZCNT NREXES VEXDEST210 NOREX SIBSCALE REG0 UBIT REG7 MUST_USE_EVEX POS_IMM1 POS_IMM IMM0SIGNED SCALE SIBBASE LOCK MODE_FIRST_PREFIX DUMMY REG5 REG6 ILD_SEG MEM1 NEED_MEMDISP ENCODER_PREFERRED SRM CET POS_SIB BCAST MAX_BYTES SEG1 MASK AMD3DNOW REX RM LAST_F2F3 REXX MPXMODE IMM1_BYTES RELBR P4 ILD_F3 AGEN REALMODE REXB
FE:EMIT_FILE obj/xed-attributes-list.c
FE:EMIT_FILE obj/xed-nonterminal-enum.txt
FE:EMIT_FILE obj/xed-nonterminal-enum.c
FE:EMIT_FILE obj/xed-nonterminal-enum.h
FE:EMIT_FILE obj/xed-operand-enum.txt
FE:EMIT_FILE obj/xed-operand-enum.c
FE:EMIT_FILE obj/xed-operand-enum.h
FE:EMIT_FILE obj/xed-operand-type-enum.txt
FE:EMIT_FILE obj/xed-operand-type-enum.c
FE:EMIT_FILE obj/xed-operand-type-enum.h
FE:EMIT_FILE obj/xed-attribute-enum.txt
FE:EMIT_FILE obj/xed-attribute-enum.c
FE:EMIT_FILE obj/xed-attribute-enum.h
FE:EMIT_FILE obj/xed-category-enum.txt
FE:EMIT_FILE obj/xed-category-enum.c
FE:EMIT_FILE obj/xed-category-enum.h
FE:EMIT_FILE obj/xed-extension-enum.txt
FE:EMIT_FILE obj/xed-extension-enum.c
FE:EMIT_FILE obj/xed-extension-enum.h
PREFAB-ENUM: ./datafiles/xed-addr-width-enum.txt
FE:EMIT_FILE obj/xed-address-width-enum.c
FE:EMIT_FILE obj/xed-address-width-enum.h
PREFAB-ENUM: ./datafiles/xed-operand-action-enum.txt
FE:EMIT_FILE obj/xed-operand-action-enum.c
FE:EMIT_FILE obj/xed-operand-action-enum.h
PREFAB-ENUM: ./datafiles/xed-flag-action-enum.txt
FE:EMIT_FILE obj/xed-flag-action-enum.c
FE:EMIT_FILE obj/xed-flag-action-enum.h
PREFAB-ENUM: ./datafiles/xed-error-enum.txt
FE:EMIT_FILE obj/xed-error-enum.c
FE:EMIT_FILE obj/xed-error-enum.h
PREFAB-ENUM: ./datafiles/xed-syntax-enum.txt
FE:EMIT_FILE obj/xed-syntax-enum.c
FE:EMIT_FILE obj/xed-syntax-enum.h
PREFAB-ENUM: ./datafiles/xed-flag-enum.txt
FE:EMIT_FILE obj/xed-flag-enum.c
FE:EMIT_FILE obj/xed-flag-enum.h
PREFAB-ENUM: ./datafiles/xed-machine-modes-enum.txt
FE:EMIT_FILE obj/xed-machine-mode-enum.c
FE:EMIT_FILE obj/xed-machine-mode-enum.h
PREFAB-ENUM: ./datafiles/xed-operand-visibility-enum.txt
FE:EMIT_FILE obj/xed-operand-visibility-enum.c
FE:EMIT_FILE obj/xed-operand-visibility-enum.h
PREFAB-ENUM: ./datafiles/xed-reg-role.enum.txt
FE:EMIT_FILE obj/xed-reg-role-enum.c
FE:EMIT_FILE obj/xed-reg-role-enum.h
FE:EMIT_FILE obj/xed-attributes-init.c
FE:EMIT_FILE obj/xed-gen-table-defs.h
FE:EMIT_FILE obj/cdata.txt
FE:EMIT_FILE obj/xed-chip-enum.txt
FE:EMIT_FILE obj/xed-chip-enum.c
FE:EMIT_FILE obj/xed-chip-enum.h
FE:EMIT_FILE obj/xed-isa-set-enum.txt
FE:EMIT_FILE obj/xed-isa-set-enum.c
FE:EMIT_FILE obj/xed-isa-set-enum.h
FE:EMIT_FILE obj/xed-chip-features-table.c
FE:EMIT_FILE obj/include-private/xed-chip-features-table.h
Created files: obj/cdata.txt obj/xed-chip-enum.h obj/xed-chip-enum.c obj/xed-isa-set-enum.h obj/xed-isa-set-enum.c obj/include-private/xed-chip-features-table.h obj/xed-chip-features-table.c
[FROM CHIP MODEL] ['INVALID', '3DNOW', 'ADOX_ADCX', 'AES', 'AMD', 'AVX', 'AVX2', 'AVX2GATHER', 'AVX512BW_128', 'AVX512BW_128N', 'AVX512BW_256', 'AVX512BW_512', 'AVX512BW_KOP', 'AVX512CD_128', 'AVX512CD_256', 'AVX512CD_512', 'AVX512DQ_128', 'AVX512DQ_128N', 'AVX512DQ_256', 'AVX512DQ_512', 'AVX512DQ_KOP', 'AVX512DQ_SCALAR', 'AVX512ER_512', 'AVX512ER_SCALAR', 'AVX512F_128', 'AVX512F_128N', 'AVX512F_256', 'AVX512F_512', 'AVX512F_KOP', 'AVX512F_SCALAR', 'AVX512PF_512', 'AVX512_4FMAPS_512', 'AVX512_4FMAPS_SCALAR', 'AVX512_4VNNIW_512', 'AVX512_BF16_128', 'AVX512_BF16_256', 'AVX512_BF16_512', 'AVX512_BITALG_128', 'AVX512_BITALG_256', 'AVX512_BITALG_512', 'AVX512_GFNI_128', 'AVX512_GFNI_256', 'AVX512_GFNI_512', 'AVX512_IFMA_128', 'AVX512_IFMA_256', 'AVX512_IFMA_512', 'AVX512_VAES_128', 'AVX512_VAES_256', 'AVX512_VAES_512', 'AVX512_VBMI2_128', 'AVX512_VBMI2_256', 'AVX512_VBMI2_512', 'AVX512_VBMI_128', 'AVX512_VBMI_256', 'AVX512_VBMI_512', 'AVX512_VNNI_128', 'AVX512_VNNI_256', 'AVX512_VNNI_512', 'AVX512_VP2INTERSECT_128', 'AVX512_VP2INTERSECT_256', 'AVX512_VP2INTERSECT_512', 'AVX512_VPCLMULQDQ_128', 'AVX512_VPCLMULQDQ_256', 'AVX512_VPCLMULQDQ_512', 'AVX512_VPOPCNTDQ_128', 'AVX512_VPOPCNTDQ_256', 'AVX512_VPOPCNTDQ_512', 'AVXAES', 'AVX_GFNI', 'BMI1', 'BMI2', 'CET', 'CLDEMOTE', 'CLFLUSHOPT', 'CLFSH', 'CLWB', 'CLZERO', 'CMOV', 'CMPXCHG16B', 'ENQCMD', 'F16C', 'FAT_NOP', 'FCMOV', 'FMA', 'FMA4', 'FXSAVE', 'FXSAVE64', 'GFNI', 'I186', 'I286PROTECTED', 'I286REAL', 'I386', 'I486', 'I486REAL', 'I86', 'INVPCID', 'LAHF', 'LONGMODE', 'LZCNT', 'MCOMMIT', 'MONITOR', 'MONITORX', 'MOVBE', 'MOVDIR', 'MPX', 'PAUSE', 'PCLMULQDQ', 'PCONFIG', 'PENTIUMMMX', 'PENTIUMREAL', 'PKU', 'POPCNT', 'PPRO', 'PREFETCHW', 'PREFETCHWT1', 'PREFETCH_NOP', 'PT', 'RDPID', 'RDPMC', 'RDPRU', 'RDRAND', 'RDSEED', 'RDTSCP', 'RDWRFSGS', 'RTM', 'SERIALIZE', 'SGX', 'SGX_ENCLV', 'SHA', 'SMAP', 'SMX', 'SNP', 'SSE', 'SSE2', 'SSE2MMX', 'SSE3', 'SSE3X87', 'SSE4', 'SSE42', 'SSE4A', 'SSEMXCSR', 'SSE_PREFETCH', 'SSSE3', 'SSSE3MMX', 'SVM', 'TBM', 'TSX_LDTRK', 'VAES', 'VIA_PADLOCK_AES', 'VIA_PADLOCK_MONTMUL', 'VIA_PADLOCK_RNG', 'VIA_PADLOCK_SHA', 'VMFUNC', 'VPCLMULQDQ', 'VTX', 'WAITPKG', 'WBNOINVD', 'X87', 'XOP', 'XSAVE', 'XSAVEC', 'XSAVEOPT', 'XSAVES']
[FROM INSTRUCTIONS ] {'CLWB', 'RDSEED', 'AVX512BW_KOP', 'PKU', 'CLZERO', 'FMA', 'SSSE3MMX', 'RDWRFSGS', 'AVX512CD_512', 'CLDEMOTE', 'PT', 'AVX512PF_512', 'AVX512_VNNI_512', 'AVX512_BITALG_128', 'SSSE3', 'MONITOR', 'PPRO', 'SSE4A', 'AVX512_BITALG_512', 'CET', 'XSAVEOPT', 'AVX512F_128', 'AVX512CD_128', 'AVX512F_512', 'AVX512_VNNI_256', 'SSE_PREFETCH', 'F16C', 'AVX512DQ_256', 'AVX512_VP2INTERSECT_512', 'AVX512_IFMA_256', 'VIA_PADLOCK_RNG', 'AVX512ER_SCALAR', 'ENQCMD', 'AVX512_VNNI_128', 'I286PROTECTED', 'AVX512DQ_KOP', 'AVX2', 'SMAP', 'XOP', 'VIA_PADLOCK_AES', 'AMD', 'SMX', 'RDRAND', 'AVX512_VAES_256', 'AVX_GFNI', 'AVX512_GFNI_256', 'RDPID', 'AVX512_VPOPCNTDQ_512', 'I486REAL', 'LAHF', 'CMPXCHG16B', 'VMFUNC', 'SERIALIZE', 'SSE3X87', 'XSAVE', 'FCMOV', 'AVX512_VBMI_128', 'AVX512_4FMAPS_SCALAR', 'RDPRU', 'VIA_PADLOCK_MONTMUL', 'AVX512_VAES_128', 'FXSAVE64', 'I86', 'AVX512_BF16_256', 'MPX', 'PENTIUMREAL', '3DNOW', 'AVX512F_256', 'AVX512_VPCLMULQDQ_512', 'AVX512F_KOP', 'AVX512_VAES_512', 'AVX512_BITALG_256', 'SHA', 'SSEMXCSR', 'AVX512DQ_SCALAR', 'AVX512_IFMA_512', 'VPCLMULQDQ', 'AVX512_GFNI_128', 'AVX512_VPOPCNTDQ_256', 'RDTSCP', 'AVX512BW_128', 'MCOMMIT', 'FAT_NOP', 'VAES', 'I286REAL', 'GFNI', 'AVX2GATHER', 'AVX512DQ_128N', 'INVPCID', 'FXSAVE', 'WBNOINVD', 'SSE', 'MONITORX', 'PCLMULQDQ', 'XSAVEC', 'AVX512_VBMI_256', 'WAITPKG', 'AVX512_VBMI2_512', 'BMI1', 'CLFSH', 'I486', 'CMOV', 'AVX512CD_256', 'AVX512_VPCLMULQDQ_128', 'RTM', 'SSE2MMX', 'PENTIUMMMX', 'PREFETCH_NOP', 'AVX512BW_256', 'AVX512_VPCLMULQDQ_256', 'TBM', 'MOVBE', 'CLFLUSHOPT', 'FMA4', 'I386', 'AES', 'SSE2', 'AVX512_VBMI_512', 'AVX512DQ_128', 'AVX512_VBMI2_256', 'ADOX_ADCX', 'AVX512DQ_512', 'TSX_LDTRK', 'AVXAES', 'SNP', 'VTX', 'SGX_ENCLV', 'SVM', 'AVX512_GFNI_512', 'AVX', 'LZCNT', 'AVX512_VP2INTERSECT_128', 'X87', 'AVX512BW_512', 'SSE42', 'RDPMC', 'AVX512BW_128N', 'MOVDIR', 'AVX512_IFMA_128', 'AVX512_VPOPCNTDQ_128', 'SSE4', 'VIA_PADLOCK_SHA', 'XSAVES', 'LONGMODE', 'AVX512_4FMAPS_512', 'I186', 'AVX512_VBMI2_128', 'AVX512_4VNNIW_512', 'AVX512F_128N', 'PCONFIG', 'AVX512_BF16_512', 'AVX512_VP2INTERSECT_256', 'PAUSE', 'POPCNT', 'PREFETCHWT1', 'AVX512ER_512', 'BMI2', 'AVX512_BF16_128', 'SGX', 'SSE3', 'AVX512F_SCALAR'}
FE:EMIT_FILE obj/xed-operand-convert-enum.txt
FE:EMIT_FILE obj/xed-operand-convert-enum.c
FE:EMIT_FILE obj/xed-operand-convert-enum.h
FE:EMIT_FILE obj/xed-convert-table-init.c
FE:EMIT_FILE obj/xed-convert-table-init.h
FE:EMIT_FILE obj/xed-operand-storage.h
FE:EMIT_FILE obj/xed-classifiers.c
FE:EMIT_FILE obj/include-private/xed-ild-modrm.h
FE:EMIT_FILE obj/ild_eosz_debug.txt
FE:EMIT_FILE obj/ild_eosz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-eosz.c
FE:EMIT_FILE obj/include-private/xed-ild-eosz.h
FE:EMIT_FILE obj/include-private/xed-ild-eosz-getters.h
FE:EMIT_FILE obj/ild_easz_debug.txt
FE:EMIT_FILE obj/ild_easz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-easz.c
FE:EMIT_FILE obj/include-private/xed-ild-easz.h
FE:EMIT_FILE obj/include-private/xed-ild-easz-getters.h
FE:EMIT_FILE obj/xed-operand-accessors.h
FE:EMIT_FILE obj/xed-operand-accessors.c
FE:EMIT_FILE obj/xed-ild-imm-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-imm-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf6 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf7 map 0x0
FE:EMIT_FILE obj/include-private/xed-ild-imm-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-bytes.h
FE:EMIT_FILE obj/xed-ild-disp-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-disp-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe8 map 0x0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe8 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe9 map 0x0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe9 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x80 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x80 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x81 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x81 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x82 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x82 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x83 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x83 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x84 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x84 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x85 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x85 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x86 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x86 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x87 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x87 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x88 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x88 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x89 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x89 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8a map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8a map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8b map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8b map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8c map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8c map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8d map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8d map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8e map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8e map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8f map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8f map 0x0F
FE:EMIT_FILE obj/include-private/xed-ild-disp-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-bytes.h
[ALL ZEROS] VV=0 MAP=XMAPA
[ALL ZEROS] VV=0 MAP=MAP5
[ALL ZEROS] VV=0 MAP=MAP6
[ALL ZEROS] VV=0 MAP=MAP4
[ALL ZEROS] VV=0 MAP=XMAP9
[ALL ZEROS] VV=0 MAP=XMAP8
FE:EMIT_FILE obj/include-private/xed3-phash-vv0.h
FE:EMIT_FILE obj/xed3-phash-lu-vv0.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv0.h
[ALL ZEROS] VV=1 MAP=0x0
[ALL ZEROS] VV=1 MAP=XMAPA
[ALL ZEROS] VV=1 MAP=MAP5
[ALL ZEROS] VV=1 MAP=MAP6
[ALL ZEROS] VV=1 MAP=MAP4
[ALL ZEROS] VV=1 MAP=XMAP9
[ALL ZEROS] VV=1 MAP=0x0F0F
[ALL ZEROS] VV=1 MAP=XMAP8
FE:EMIT_FILE obj/include-private/xed3-phash-vv1.h
FE:EMIT_FILE obj/xed3-phash-lu-vv1.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv1.h
[ALL ZEROS] VV=2 MAP=0x0
[ALL ZEROS] VV=2 MAP=XMAPA
[ALL ZEROS] VV=2 MAP=MAP5
[ALL ZEROS] VV=2 MAP=MAP6
[ALL ZEROS] VV=2 MAP=MAP4
[ALL ZEROS] VV=2 MAP=XMAP9
[ALL ZEROS] VV=2 MAP=0x0F0F
[ALL ZEROS] VV=2 MAP=XMAP8
FE:EMIT_FILE obj/include-private/xed3-phash-vv2.h
FE:EMIT_FILE obj/xed3-phash-lu-vv2.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv2.h
[ALL ZEROS] VV=3 MAP=0x0
[ALL ZEROS] VV=3 MAP=0x0F
[ALL ZEROS] VV=3 MAP=MAP5
[ALL ZEROS] VV=3 MAP=MAP6
[ALL ZEROS] VV=3 MAP=MAP4
[ALL ZEROS] VV=3 MAP=0x0F3A
[ALL ZEROS] VV=3 MAP=0x0F38
[ALL ZEROS] VV=3 MAP=0x0F0F
FE:EMIT_FILE obj/include-private/xed3-phash-vv3.h
FE:EMIT_FILE obj/xed3-phash-lu-vv3.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv3.h
FE:EMIT_FILE obj/include-private/xed3-operand-lu.h
FE:EMIT_FILE obj/xed3-operand-lu.c
FE:EMIT_FILE obj/include-private/xed3-phash.h
FE:EMIT_FILE obj/include-private/xed3-nt-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-dynamic-part1-capture.h
FE:EMIT_FILE obj/xed-cpuid-bit-enum.txt
FE:EMIT_FILE obj/xed-cpuid-bit-enum.c
FE:EMIT_FILE obj/xed-cpuid-bit-enum.h
ISASET:  INVALID
ISASET:  3DNOW
ISASET:  ADOX_ADCX
ISASET:  AES
ISASET:  AMD
ISASET:  AVX
ISASET:  AVX2
ISASET:  AVX2GATHER
ISASET:  AVX512BW_128
ISASET:  AVX512BW_128N
ISASET:  AVX512BW_256
ISASET:  AVX512BW_512
ISASET:  AVX512BW_KOP
ISASET:  AVX512CD_128
ISASET:  AVX512CD_256
ISASET:  AVX512CD_512
ISASET:  AVX512DQ_128
ISASET:  AVX512DQ_128N
ISASET:  AVX512DQ_256
ISASET:  AVX512DQ_512
ISASET:  AVX512DQ_KOP
ISASET:  AVX512DQ_SCALAR
ISASET:  AVX512ER_512
ISASET:  AVX512ER_SCALAR
ISASET:  AVX512F_128
ISASET:  AVX512F_128N
ISASET:  AVX512F_256
ISASET:  AVX512F_512
ISASET:  AVX512F_KOP
ISASET:  AVX512F_SCALAR
ISASET:  AVX512PF_512
ISASET:  AVX512_4FMAPS_512
ISASET:  AVX512_4FMAPS_SCALAR
ISASET:  AVX512_4VNNIW_512
ISASET:  AVX512_BF16_128
ISASET:  AVX512_BF16_256
ISASET:  AVX512_BF16_512
ISASET:  AVX512_BITALG_128
ISASET:  AVX512_BITALG_256
ISASET:  AVX512_BITALG_512
ISASET:  AVX512_GFNI_128
ISASET:  AVX512_GFNI_256
ISASET:  AVX512_GFNI_512
ISASET:  AVX512_IFMA_128
ISASET:  AVX512_IFMA_256
ISASET:  AVX512_IFMA_512
ISASET:  AVX512_VAES_128
ISASET:  AVX512_VAES_256
ISASET:  AVX512_VAES_512
ISASET:  AVX512_VBMI2_128
ISASET:  AVX512_VBMI2_256
ISASET:  AVX512_VBMI2_512
ISASET:  AVX512_VBMI_128
ISASET:  AVX512_VBMI_256
ISASET:  AVX512_VBMI_512
ISASET:  AVX512_VNNI_128
ISASET:  AVX512_VNNI_256
ISASET:  AVX512_VNNI_512
ISASET:  AVX512_VP2INTERSECT_128
ISASET:  AVX512_VP2INTERSECT_256
ISASET:  AVX512_VP2INTERSECT_512
ISASET:  AVX512_VPCLMULQDQ_128
ISASET:  AVX512_VPCLMULQDQ_256
ISASET:  AVX512_VPCLMULQDQ_512
ISASET:  AVX512_VPOPCNTDQ_128
ISASET:  AVX512_VPOPCNTDQ_256
ISASET:  AVX512_VPOPCNTDQ_512
ISASET:  AVXAES
ISASET:  AVX_GFNI
ISASET:  BMI1
ISASET:  BMI2
ISASET:  CET
ISASET:  CLDEMOTE
ISASET:  CLFLUSHOPT
ISASET:  CLFSH
ISASET:  CLWB
ISASET:  CLZERO
ISASET:  CMOV
ISASET:  CMPXCHG16B
ISASET:  ENQCMD
ISASET:  F16C
ISASET:  FAT_NOP
ISASET:  FCMOV
ISASET:  FMA
ISASET:  FMA4
ISASET:  FXSAVE
ISASET:  FXSAVE64
ISASET:  GFNI
ISASET:  I186
ISASET:  I286PROTECTED
ISASET:  I286REAL
ISASET:  I386
ISASET:  I486
ISASET:  I486REAL
ISASET:  I86
ISASET:  INVPCID
ISASET:  LAHF
ISASET:  LONGMODE
ISASET:  LZCNT
ISASET:  MCOMMIT
ISASET:  MONITOR
ISASET:  MONITORX
ISASET:  MOVBE
ISASET:  MOVDIR
ISASET:  MPX
ISASET:  PAUSE
ISASET:  PCLMULQDQ
ISASET:  PCONFIG
ISASET:  PENTIUMMMX
ISASET:  PENTIUMREAL
ISASET:  PKU
ISASET:  POPCNT
ISASET:  PPRO
ISASET:  PREFETCHW
ISASET:  PREFETCHWT1
ISASET:  PREFETCH_NOP
ISASET:  PT
ISASET:  RDPID
ISASET:  RDPMC
ISASET:  RDPRU
ISASET:  RDRAND
ISASET:  RDSEED
ISASET:  RDTSCP
ISASET:  RDWRFSGS
ISASET:  RTM
ISASET:  SERIALIZE
ISASET:  SGX
ISASET:  SGX_ENCLV
ISASET:  SHA
ISASET:  SMAP
ISASET:  SMX
ISASET:  SNP
ISASET:  SSE
ISASET:  SSE2
ISASET:  SSE2MMX
ISASET:  SSE3
ISASET:  SSE3X87
ISASET:  SSE4
ISASET:  SSE42
ISASET:  SSE4A
ISASET:  SSEMXCSR
ISASET:  SSE_PREFETCH
ISASET:  SSSE3
ISASET:  SSSE3MMX
ISASET:  SVM
ISASET:  TBM
ISASET:  TSX_LDTRK
ISASET:  VAES
ISASET:  VIA_PADLOCK_AES
ISASET:  VIA_PADLOCK_MONTMUL
ISASET:  VIA_PADLOCK_RNG
ISASET:  VIA_PADLOCK_SHA
ISASET:  VMFUNC
ISASET:  VPCLMULQDQ
ISASET:  VTX
ISASET:  WAITPKG
ISASET:  WBNOINVD
ISASET:  X87
ISASET:  XOP
ISASET:  XSAVE
ISASET:  XSAVEC
ISASET:  XSAVEOPT
ISASET:  XSAVES
FE:EMIT_FILE obj/xed-cpuid-tables.c
FE: Closing an already-closed file: obj/xed-init-inst-table.c
FE:EMIT_FILE obj/xed-flags-simple.c
FE:EMIT_FILE obj/xed-flags-complex.c
FE:EMIT_FILE obj/xed-flags-actions.c
FE: Closing an already-closed file: obj/xed-operand-convert-init.c
FE: Closing an already-closed file: obj/xed-iclass-string.c
FE: Closing an already-closed file: obj/xed-iform-map-init.c
FE: Closing an already-closed file: obj/xed-init-inst-table-0.c
FE: Closing an already-closed file: obj/xed-attributes-init.c
